# https://docs.astro.build/en/ llms-full.txt

## Astro Recipes
[Skip to content](https://docs.astro.build/en/recipes/#_top)

# Astro recipes

See guided examples of adding features to your Astro project.

## Official Recipes

[Section titled Official Recipes](https://docs.astro.build/en/recipes/#official-recipes)

Astro’s official recipes are short, focused how-to guides that walk a reader through completing a working example of a specific task. Recipes are a great way to add new features or behavior to your Astro project by following step-by-step instructions!

- ### [Installing a Vite or Rollup plugin](https://docs.astro.build/en/recipes/add-yaml-support/)



Learn how you can import YAML data by adding a Rollup plugin to your project.

- ### [Analyze bundle size](https://docs.astro.build/en/recipes/analyze-bundle-size/)



Learn how to analyze the bundle generated by Astro using \`rollup-plugin-visualizer\`.

- ### [Build a custom image component](https://docs.astro.build/en/recipes/build-custom-img-component/)



Learn how to build a custom image component that supports media queries using the getImage function.

- ### [Build forms with API routes](https://docs.astro.build/en/recipes/build-forms-api/)



Learn how to use JavaScript to send form submissions to an API Route.

- ### [Build HTML forms in Astro pages](https://docs.astro.build/en/recipes/build-forms/)



Learn how to build HTML forms and handle submissions in your frontmatter.

- ### [Use Bun with Astro](https://docs.astro.build/en/recipes/bun/)



Learn how to use Bun with your Astro site.

- ### [Call endpoints from the server](https://docs.astro.build/en/recipes/call-endpoints/)



Learn how to call endpoints from the server in Astro.

- ### [Verify a Captcha](https://docs.astro.build/en/recipes/captcha/)



Learn how to create an API route and fetch it from the client.

- ### [Build your Astro site with Docker](https://docs.astro.build/en/recipes/docker/)



Learn how to build your Astro site using Docker.

- ### [Dynamically import images](https://docs.astro.build/en/recipes/dynamically-importing-images/)



Learn how to dynamically import images using Vite's import.meta.glob function.

- ### [Add icons to external links](https://docs.astro.build/en/recipes/external-links/)



Learn how to install a rehype plugin to add icons to external links in your Markdown files.

- ### [Add i18n features](https://docs.astro.build/en/recipes/i18n/)



Use dynamic routing and content collections to add internationalization support to your Astro site.

- ### [Create a dev toolbar app](https://docs.astro.build/en/recipes/making-toolbar-apps/)



Learn how to create a dev toolbar app for your site.

- ### [Add last modified time](https://docs.astro.build/en/recipes/modified-time/)



Build a remark plugin to add the last modified time to your Markdown and MDX.

- ### [Add reading time](https://docs.astro.build/en/recipes/reading-time/)



Build a remark plugin to add reading time to your Markdown or MDX files.

- ### [Add an RSS feed](https://docs.astro.build/en/recipes/rss/)



Add an RSS feed to your Astro site to let users subscribe to your content.

- ### [Share state between islands](https://docs.astro.build/en/recipes/sharing-state-islands/)



Learn how to share state across framework components with Nano Stores.

- ### [Share state between Astro components](https://docs.astro.build/en/recipes/sharing-state/)



Learn how to share state across Astro components with Nano Stores.

- ### [Using streaming to improve page performance](https://docs.astro.build/en/recipes/streaming-improve-page-performance/)



Learn how to use streaming to improve page performance.

- ### [Style rendered Markdown with Tailwind Typography](https://docs.astro.build/en/recipes/tailwind-rendered-markdown/)



Learn how to use @tailwind/typography to style your rendered Markdown.


## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/recipes/#community-resources)

Find more recipes written and submitted by the community at [Astro Tips](https://astro-tips.dev/).

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=91821811)

## Contribute to Astro
[Skip to content](https://docs.astro.build/en/contribute/#_top)

# Contribute to Astro

We welcome contributions of any size and contributors of any skill level. As an open-source project, we believe in giving back to our contributors. We are happy to help with guidance on PRs, technical writing, and turning any feature idea into a reality.

Want to get even more involved? See our [Governance doc](https://github.com/withastro/.github/blob/main/GOVERNANCE.md) for detailed descriptions of different roles, maintainer nomination processes, code review processes, and Code of Conduct enforcement.

## Ways to Contribute

[Section titled Ways to Contribute](https://docs.astro.build/en/contribute/#ways-to-contribute)

### Project repositories

[Section titled Project repositories](https://docs.astro.build/en/contribute/#project-repositories)

There are lots of ways to contribute to the Astro Project! Every Astro repository has a README with a link to a `CONTRIBUTING.md` file in the root of the project.

Visit [Astro’s GitHub profile](https://github.com/withastro) to find the repositories for:

- The [main Astro codebase](https://github.com/withastro/astro), including official integrations and starter templates.

- [Astro Docs](https://github.com/withastro/docs), an entire Astro website! Contribute not just written content, but also Astro code addressing a11y, CSS, UI, and UX concerns. We also make our documentation available in several languages, so we need help translating the entire site.

- The [Astro compiler](https://github.com/withastro/compiler), written in Go, distributed as WASM.

- Astro’s [language tools](https://github.com/withastro/language-tools), the editor tooling required for the Astro language ( `.astro` files).

- [Starlight](https://github.com/withastro/starlight), Astro’s official documentation framework.

- The [Astro Roadmap](https://github.com/withastro/roadmap) where the future of Astro is shaped! Ideas, suggestions, and formal RFC proposals for the Astro project.


### Types of contributions

[Section titled Types of contributions](https://docs.astro.build/en/contribute/#types-of-contributions)

In addition to contributing your own code or content, you can also make a huge contribution by getting involved by leaving review comments on PRs, adding ideas in existing GitHub Issues and Discussions, and participating in our “Pinned” issue maintenance tasks!

Every PR, especially translation PRs, needs reviewers! Reviewing PRs and leaving comments, suggestions, or an approving “LGTM!” (“Looks Good To Me!”) is a great way to get started in any repository, and to learn more about Astro.

We also have a very active [Discord](https://astro.build/chat) community! We value the contributions of those who welcome new members, answer support questions, and share what they have built with and for Astro! Beyond traditional GitHub contributions, Astro recognizes and supports community members who engage with our community, share Astro in blog posts, videos and conference talks, and help maintain the health of our community.

## Contributing to Docs

[Section titled Contributing to Docs](https://docs.astro.build/en/contribute/#contributing-to-docs)

We have several guides available to assist you with contributing to Astro Docs.

Whether it’s your very first contribution to open-source, or you need to add docs for the new Astro feature you just built, or you’re an experienced translator looking for the next page to translate, or you’d like to learn more about helping as a PR reviewer… we’ve got you covered!

Please visit our dedicated site [_Astro Docs_ Docs](https://contribute.docs.astro.build/), where you’ll find our documentation to help you contribute to Astro Docs as a typo-fixer, a writer, a translator, a feature-builder, and even as a PR reviewer.

## Our contributors

[Section titled Our contributors](https://docs.astro.build/en/contribute/#our-contributors)

These docs are brought to you by all these helpful people. [Join us on GitHub!](https://github.com/withastro/docs)

- [![jsparkdev](https://avatars.githubusercontent.com/u/39112954?s=64)](https://github.com/jsparkdev)
- [![sarah11918](https://avatars.githubusercontent.com/u/5098874?s=64)](https://github.com/sarah11918)
- [![ArmandPhilippot](https://avatars.githubusercontent.com/u/59021693?s=64)](https://github.com/ArmandPhilippot)
- [![dreyfus92](https://avatars.githubusercontent.com/u/85648028?s=64)](https://github.com/dreyfus92)
- [![Nin3lee](https://avatars.githubusercontent.com/u/30520689?s=64)](https://github.com/Nin3lee)
- [![delucis](https://avatars.githubusercontent.com/u/357379?s=64)](https://github.com/delucis)
- [![astrobot-houston](https://avatars.githubusercontent.com/u/108291165?s=64)](https://github.com/astrobot-houston)
- [![Waxer59](https://avatars.githubusercontent.com/u/78129249?s=64)](https://github.com/Waxer59)
- [![liruifengv](https://avatars.githubusercontent.com/u/25167721?s=64)](https://github.com/liruifengv)
- [![100gle](https://avatars.githubusercontent.com/u/36526527?s=64)](https://github.com/100gle)
- [![huyikai](https://avatars.githubusercontent.com/u/25839948?s=64)](https://github.com/huyikai)
- [![yanthomasdev](https://avatars.githubusercontent.com/u/61414485?s=64)](https://github.com/yanthomasdev)
- [![thomasbnt](https://avatars.githubusercontent.com/u/14293805?s=64)](https://github.com/thomasbnt)
- [![morinokami](https://avatars.githubusercontent.com/u/7889778?s=64)](https://github.com/morinokami)
- [![FredKSchott](https://avatars.githubusercontent.com/u/622227?s=64)](https://github.com/FredKSchott)
- [![McFlyPartages](https://avatars.githubusercontent.com/u/44530252?s=64)](https://github.com/McFlyPartages)
- [![mearashadowfax](https://avatars.githubusercontent.com/u/125820963?s=64)](https://github.com/mearashadowfax)
- [![kevinzunigacuellar](https://avatars.githubusercontent.com/u/46791833?s=64)](https://github.com/kevinzunigacuellar)
- [![Jutanium](https://avatars.githubusercontent.com/u/4033662?s=64)](https://github.com/Jutanium)
- [![hippotastic](https://avatars.githubusercontent.com/u/6137925?s=64)](https://github.com/hippotastic)
- [![viniciusdeliz](https://avatars.githubusercontent.com/u/5748616?s=64)](https://github.com/viniciusdeliz)
- [![Alynva](https://avatars.githubusercontent.com/u/12958674?s=64)](https://github.com/Alynva)
- [![TheOtterlord](https://avatars.githubusercontent.com/u/64310361?s=64)](https://github.com/TheOtterlord)
- [![bholmesdev](https://avatars.githubusercontent.com/u/51384119?s=64)](https://github.com/bholmesdev)
- [![Chrissdroid](https://avatars.githubusercontent.com/u/29927270?s=64)](https://github.com/Chrissdroid)
- [![AitorMT](https://avatars.githubusercontent.com/u/25897764?s=64)](https://github.com/AitorMT)
- [![kecrily](https://avatars.githubusercontent.com/u/45708948?s=64)](https://github.com/kecrily)
- [![trueberryless](https://avatars.githubusercontent.com/u/99918022?s=64)](https://github.com/trueberryless)
- [![ematipico](https://avatars.githubusercontent.com/u/602478?s=64)](https://github.com/ematipico)
- [![kyosuke](https://avatars.githubusercontent.com/u/13069?s=64)](https://github.com/kyosuke)
- [![Fryuni](https://avatars.githubusercontent.com/u/11063910?s=64)](https://github.com/Fryuni)
- [![alexnguyennz](https://avatars.githubusercontent.com/u/54233296?s=64)](https://github.com/alexnguyennz)
- [![jasikpark](https://avatars.githubusercontent.com/u/10626596?s=64)](https://github.com/jasikpark)
- [![ElianCodes](https://avatars.githubusercontent.com/u/15145918?s=64)](https://github.com/ElianCodes)
- [![Princesseuh](https://avatars.githubusercontent.com/u/3019731?s=64)](https://github.com/Princesseuh)
- [![agustinmulet](https://avatars.githubusercontent.com/u/31162600?s=64)](https://github.com/agustinmulet)
- [![jonathantneal](https://avatars.githubusercontent.com/u/188426?s=64)](https://github.com/jonathantneal)
- [![matthewp](https://avatars.githubusercontent.com/u/361671?s=64)](https://github.com/matthewp)
- [![at-the-vr](https://avatars.githubusercontent.com/u/88548999?s=64)](https://github.com/at-the-vr)
- [![Genteure](https://avatars.githubusercontent.com/u/11240579?s=64)](https://github.com/Genteure)
- [![mingjunlu](https://avatars.githubusercontent.com/u/40516784?s=64)](https://github.com/mingjunlu)
- [![vrabe](https://avatars.githubusercontent.com/u/8216525?s=64)](https://github.com/vrabe)
- [![casungo](https://avatars.githubusercontent.com/u/25723446?s=64)](https://github.com/casungo)
- [![bluwy](https://avatars.githubusercontent.com/u/34116392?s=64)](https://github.com/bluwy)
- [![Egpereira](https://avatars.githubusercontent.com/u/12275019?s=64)](https://github.com/Egpereira)
- [![natemoo-re](https://avatars.githubusercontent.com/u/7118177?s=64)](https://github.com/natemoo-re)
- [![Hanawa02](https://avatars.githubusercontent.com/u/11237366?s=64)](https://github.com/Hanawa02)
- [![aFuzzyBear](https://avatars.githubusercontent.com/u/28299972?s=64)](https://github.com/aFuzzyBear)
- [![jp-knj](https://avatars.githubusercontent.com/u/70939128?s=64)](https://github.com/jp-knj)
- [![MoustaphaDev](https://avatars.githubusercontent.com/u/81974850?s=64)](https://github.com/MoustaphaDev)
- [![JuanPabloDiaz](https://avatars.githubusercontent.com/u/25883220?s=64)](https://github.com/JuanPabloDiaz)
- [![fredoist](https://avatars.githubusercontent.com/u/7684330?s=64)](https://github.com/fredoist)
- [![pioupia](https://avatars.githubusercontent.com/u/49518790?s=64)](https://github.com/pioupia)
- [![sasoria](https://avatars.githubusercontent.com/u/7903076?s=64)](https://github.com/sasoria)
- [![maxchang3](https://avatars.githubusercontent.com/u/36927158?s=64)](https://github.com/maxchang3)
- [![piro-hiroki](https://avatars.githubusercontent.com/u/103011756?s=64)](https://github.com/piro-hiroki)
- [![sarasate](https://avatars.githubusercontent.com/u/1528803?s=64)](https://github.com/sarasate)
- [![JuanM04](https://avatars.githubusercontent.com/u/16712703?s=64)](https://github.com/JuanM04)
- [![mrienstra](https://avatars.githubusercontent.com/u/669326?s=64)](https://github.com/mrienstra)
- [![florian-lefebvre](https://avatars.githubusercontent.com/u/69633530?s=64)](https://github.com/florian-lefebvre)
- [![HiDeoo](https://avatars.githubusercontent.com/u/494699?s=64)](https://github.com/HiDeoo)
- [![VoxelMC](https://avatars.githubusercontent.com/u/20650404?s=64)](https://github.com/VoxelMC)
- [![CodeF1ow](https://avatars.githubusercontent.com/u/47194884?s=64)](https://github.com/CodeF1ow)
- [![antonyfaris](https://avatars.githubusercontent.com/u/11766500?s=64)](https://github.com/antonyfaris)
- [![glopzel](https://avatars.githubusercontent.com/u/74939915?s=64)](https://github.com/glopzel)
- [![dragomano](https://avatars.githubusercontent.com/u/229402?s=64)](https://github.com/dragomano)
- [![afucher](https://avatars.githubusercontent.com/u/3756185?s=64)](https://github.com/afucher)
- [![shuuji3](https://avatars.githubusercontent.com/u/1425259?s=64)](https://github.com/shuuji3)
- [![kimulaco](https://avatars.githubusercontent.com/u/11986753?s=64)](https://github.com/kimulaco)
- [![DerTimonius](https://avatars.githubusercontent.com/u/103483059?s=64)](https://github.com/DerTimonius)
- [![helmerdx](https://avatars.githubusercontent.com/u/11061182?s=64)](https://github.com/helmerdx)
- [![luoingly](https://avatars.githubusercontent.com/u/101558384?s=64)](https://github.com/luoingly)
- [![AbrahamX3](https://avatars.githubusercontent.com/u/78459953?s=64)](https://github.com/AbrahamX3)
- [![mayank99](https://avatars.githubusercontent.com/u/9084735?s=64)](https://github.com/mayank99)
- [![itskitto](https://avatars.githubusercontent.com/u/12174733?s=64)](https://github.com/itskitto)
- [![ncvcz](https://avatars.githubusercontent.com/u/77632836?s=64)](https://github.com/ncvcz)
- [![asgoshawk](https://avatars.githubusercontent.com/u/42184309?s=64)](https://github.com/asgoshawk)
- [![lilnasy](https://avatars.githubusercontent.com/u/69170106?s=64)](https://github.com/lilnasy)
- [![CaptainOfPhB](https://avatars.githubusercontent.com/u/30765485?s=64)](https://github.com/CaptainOfPhB)
- [![diegognt](https://avatars.githubusercontent.com/u/181699?s=64)](https://github.com/diegognt)
- [![karolhas](https://avatars.githubusercontent.com/u/99908851?s=64)](https://github.com/karolhas)
- [![martrapp](https://avatars.githubusercontent.com/u/94928215?s=64)](https://github.com/martrapp)
- [![itsmatteomanf](https://avatars.githubusercontent.com/u/20746019?s=64)](https://github.com/itsmatteomanf)
- [![wpplumber](https://avatars.githubusercontent.com/u/52907282?s=64)](https://github.com/wpplumber)
- [![zadeviggers](https://avatars.githubusercontent.com/u/74938858?s=64)](https://github.com/zadeviggers)
- [![yuto343](https://avatars.githubusercontent.com/u/43196286?s=64)](https://github.com/yuto343)
- [![Eric-llos](https://avatars.githubusercontent.com/u/85624552?s=64)](https://github.com/Eric-llos)
- [![XindiShang](https://avatars.githubusercontent.com/u/89835661?s=64)](https://github.com/XindiShang)
- [![SnowDingo](https://avatars.githubusercontent.com/u/101443426?s=64)](https://github.com/SnowDingo)
- [![BryceRussell](https://avatars.githubusercontent.com/u/19967622?s=64)](https://github.com/BryceRussell)
- [![chuygil](https://avatars.githubusercontent.com/u/59382692?s=64)](https://github.com/chuygil)
- [![leoj3n](https://avatars.githubusercontent.com/u/990216?s=64)](https://github.com/leoj3n)
- [![codersjj](https://avatars.githubusercontent.com/u/44868357?s=64)](https://github.com/codersjj)
- [![ryuapp](https://avatars.githubusercontent.com/u/114303361?s=64)](https://github.com/ryuapp)
- [![yeonjulee1005](https://avatars.githubusercontent.com/u/57179957?s=64)](https://github.com/yeonjulee1005)
- [![hkbertoson](https://avatars.githubusercontent.com/u/44106297?s=64)](https://github.com/hkbertoson)
- [![drixswe](https://avatars.githubusercontent.com/u/198779117?s=64)](https://github.com/drixswe)
- [![mottox2](https://avatars.githubusercontent.com/u/7007253?s=64)](https://github.com/mottox2)
- [![teinett](https://avatars.githubusercontent.com/u/1038168?s=64)](https://github.com/teinett)
- [![apatel369](https://avatars.githubusercontent.com/u/33442948?s=64)](https://github.com/apatel369)
- [![agriffard](https://avatars.githubusercontent.com/u/703248?s=64)](https://github.com/agriffard)
- [![alexanderniebuhr](https://avatars.githubusercontent.com/u/45965090?s=64)](https://github.com/alexanderniebuhr)
- [![sujang958](https://avatars.githubusercontent.com/u/59335584?s=64)](https://github.com/sujang958)
- [![tejapaturu](https://avatars.githubusercontent.com/u/37566594?s=64)](https://github.com/tejapaturu)
- [![HashCookie](https://avatars.githubusercontent.com/u/92775570?s=64)](https://github.com/HashCookie)
- [![n-tong009](https://avatars.githubusercontent.com/u/66517416?s=64)](https://github.com/n-tong009)
- [![renovate[bot]](https://avatars.githubusercontent.com/u/29139614?s=64)](https://github.com/renovate[bot])
- [![autroshot](https://avatars.githubusercontent.com/u/95019875?s=64)](https://github.com/autroshot)
- [![crutchcorn](https://avatars.githubusercontent.com/u/9100169?s=64)](https://github.com/crutchcorn)
- [![clearlyTHUYDOAN](https://avatars.githubusercontent.com/u/22087604?s=64)](https://github.com/clearlyTHUYDOAN)
- [![fhiromasa](https://avatars.githubusercontent.com/u/74556046?s=64)](https://github.com/fhiromasa)
- [![magnum-zx](https://avatars.githubusercontent.com/u/46154381?s=64)](https://github.com/magnum-zx)
- [![anaxite](https://avatars.githubusercontent.com/u/89195061?s=64)](https://github.com/anaxite)
- [![arisa-fukuzaki](https://avatars.githubusercontent.com/u/25793187?s=64)](https://github.com/arisa-fukuzaki)
- [![caioferrarezi](https://avatars.githubusercontent.com/u/14830190?s=64)](https://github.com/caioferrarezi)
- [![Elib27](https://avatars.githubusercontent.com/u/92606530?s=64)](https://github.com/Elib27)
- [![jdwilkin4](https://avatars.githubusercontent.com/u/67210629?s=64)](https://github.com/jdwilkin4)
- [![Jothsa](https://avatars.githubusercontent.com/u/58094796?s=64)](https://github.com/Jothsa)
- [![Panelinio](https://avatars.githubusercontent.com/u/139560930?s=64)](https://github.com/Panelinio)
- [![palmiak](https://avatars.githubusercontent.com/u/2342458?s=64)](https://github.com/palmiak)
- [![JusticeMatthew](https://avatars.githubusercontent.com/u/72817096?s=64)](https://github.com/JusticeMatthew)
- [![michaelbe812](https://avatars.githubusercontent.com/u/29756792?s=64)](https://github.com/michaelbe812)
- [![OliverSpeir](https://avatars.githubusercontent.com/u/115520730?s=64)](https://github.com/OliverSpeir)
- [![NinuzIBZ](https://avatars.githubusercontent.com/u/68387835?s=64)](https://github.com/NinuzIBZ)
- [![pyronaur](https://avatars.githubusercontent.com/u/988095?s=64)](https://github.com/pyronaur)
- [![milovangudelj](https://avatars.githubusercontent.com/u/49202538?s=64)](https://github.com/milovangudelj)
- [![ascorbic](https://avatars.githubusercontent.com/u/213306?s=64)](https://github.com/ascorbic)
- [![staticWagomU](https://avatars.githubusercontent.com/u/34824645?s=64)](https://github.com/staticWagomU)
- [![manchan4869](https://avatars.githubusercontent.com/u/65327974?s=64)](https://github.com/manchan4869)
- [![imbant](https://avatars.githubusercontent.com/u/17983739?s=64)](https://github.com/imbant)
- [![Maxframe](https://avatars.githubusercontent.com/u/51922004?s=64)](https://github.com/Maxframe)
- [![Adammatthiesen](https://avatars.githubusercontent.com/u/30383579?s=64)](https://github.com/Adammatthiesen)
- [![minjongbaek](https://avatars.githubusercontent.com/u/48359052?s=64)](https://github.com/minjongbaek)
- [![gacek1123](https://avatars.githubusercontent.com/u/78506637?s=64)](https://github.com/gacek1123)
- [![chalkygames123](https://avatars.githubusercontent.com/u/5608239?s=64)](https://github.com/chalkygames123)
- [![chenxsan](https://avatars.githubusercontent.com/u/1091472?s=64)](https://github.com/chenxsan)
- [![ralacerda](https://avatars.githubusercontent.com/u/19380403?s=64)](https://github.com/ralacerda)
- [![RafidMuhymin](https://avatars.githubusercontent.com/u/63650415?s=64)](https://github.com/RafidMuhymin)
- [![angelmarfil](https://avatars.githubusercontent.com/u/59626670?s=64)](https://github.com/angelmarfil)
- [![bandantonio](https://avatars.githubusercontent.com/u/16765690?s=64)](https://github.com/bandantonio)
- [![BassamXYZ](https://avatars.githubusercontent.com/u/100040151?s=64)](https://github.com/BassamXYZ)
- [![wtchnm](https://avatars.githubusercontent.com/u/37726261?s=64)](https://github.com/wtchnm)
- [![garysassano](https://avatars.githubusercontent.com/u/10464497?s=64)](https://github.com/garysassano)
- [![olets](https://avatars.githubusercontent.com/u/3282350?s=64)](https://github.com/olets)
- [![IgorKowalczyk](https://avatars.githubusercontent.com/u/49127376?s=64)](https://github.com/IgorKowalczyk)
- [![Singebob](https://avatars.githubusercontent.com/u/24290044?s=64)](https://github.com/Singebob)
- [![Pukimaa](https://avatars.githubusercontent.com/u/58347116?s=64)](https://github.com/Pukimaa)
- [![Njong392](https://avatars.githubusercontent.com/u/81039882?s=64)](https://github.com/Njong392)
- [![NightFeather0615](https://avatars.githubusercontent.com/u/77222233?s=64)](https://github.com/NightFeather0615)
- [![nermalcat69](https://avatars.githubusercontent.com/u/73933669?s=64)](https://github.com/nermalcat69)
- [![mogeko](https://avatars.githubusercontent.com/u/26341224?s=64)](https://github.com/mogeko)
- [![tinymachine](https://avatars.githubusercontent.com/u/171986?s=64)](https://github.com/tinymachine)
- [![mhstrkmp](https://avatars.githubusercontent.com/u/5558193?s=64)](https://github.com/mhstrkmp)
- [![marsidev](https://avatars.githubusercontent.com/u/56328053?s=64)](https://github.com/marsidev)
- [![lorenzolewis](https://avatars.githubusercontent.com/u/15347255?s=64)](https://github.com/lorenzolewis)
- [![chriswburke](https://avatars.githubusercontent.com/u/362261?s=64)](https://github.com/chriswburke)
- [![mitian233](https://avatars.githubusercontent.com/u/13678847?s=64)](https://github.com/mitian233)
- [![santiemanuel](https://avatars.githubusercontent.com/u/3680835?s=64)](https://github.com/santiemanuel)
- [![paulrudy](https://avatars.githubusercontent.com/u/1110792?s=64)](https://github.com/paulrudy)
- [![nokazn](https://avatars.githubusercontent.com/u/41154684?s=64)](https://github.com/nokazn)
- [![miroim](https://avatars.githubusercontent.com/u/22488175?s=64)](https://github.com/miroim)
- [![melon95](https://avatars.githubusercontent.com/u/35761035?s=64)](https://github.com/melon95)
- [![mantaroh](https://avatars.githubusercontent.com/u/3241026?s=64)](https://github.com/mantaroh)
- [![ktym4a](https://avatars.githubusercontent.com/u/51779800?s=64)](https://github.com/ktym4a)
- [![lostra01](https://avatars.githubusercontent.com/u/9054858?s=64)](https://github.com/lostra01)
- [![dorasans](https://avatars.githubusercontent.com/u/75212478?s=64)](https://github.com/dorasans)
- [![dependabot[bot]](https://avatars.githubusercontent.com/u/49699333?s=64)](https://github.com/dependabot[bot])
- [![danielcuque](https://avatars.githubusercontent.com/u/81493003?s=64)](https://github.com/danielcuque)
- [![florluzduarte](https://avatars.githubusercontent.com/u/77161808?s=64)](https://github.com/florluzduarte)
- [![AkashRajpurohit](https://avatars.githubusercontent.com/u/30044630?s=64)](https://github.com/AkashRajpurohit)
- [![guidiego](https://avatars.githubusercontent.com/u/10289071?s=64)](https://github.com/guidiego)
- [![JavGuerra](https://avatars.githubusercontent.com/u/6777224?s=64)](https://github.com/JavGuerra)
- [![selfire1](https://avatars.githubusercontent.com/u/70809675?s=64)](https://github.com/selfire1)
- [![KoriIku](https://avatars.githubusercontent.com/u/86508666?s=64)](https://github.com/KoriIku)
- [![louisescher](https://avatars.githubusercontent.com/u/66965600?s=64)](https://github.com/louisescher)
- [![lumamontes](https://avatars.githubusercontent.com/u/60052718?s=64)](https://github.com/lumamontes)
- [![nbyx](https://avatars.githubusercontent.com/u/28953458?s=64)](https://github.com/nbyx)
- [![Hopelezz](https://avatars.githubusercontent.com/u/72772558?s=64)](https://github.com/Hopelezz)
- [![ohansemmanuel](https://avatars.githubusercontent.com/u/10930234?s=64)](https://github.com/ohansemmanuel)
- [![richeklein](https://avatars.githubusercontent.com/u/99479?s=64)](https://github.com/richeklein)
- [![ItzRoBeerT](https://avatars.githubusercontent.com/u/105317145?s=64)](https://github.com/ItzRoBeerT)
- [![seppegadeyne](https://avatars.githubusercontent.com/u/18264851?s=64)](https://github.com/seppegadeyne)
- [![vuecat](https://avatars.githubusercontent.com/u/16623919?s=64)](https://github.com/vuecat)
- [![tordans](https://avatars.githubusercontent.com/u/111561?s=64)](https://github.com/tordans)
- [![simonswiss](https://avatars.githubusercontent.com/u/485747?s=64)](https://github.com/simonswiss)
- [![darusk](https://avatars.githubusercontent.com/u/110596249?s=64)](https://github.com/darusk)
- [![vedxp](https://avatars.githubusercontent.com/u/87353286?s=64)](https://github.com/vedxp)
- [![tony-sull](https://avatars.githubusercontent.com/u/15836226?s=64)](https://github.com/tony-sull)
- [![arty-name](https://avatars.githubusercontent.com/u/133055?s=64)](https://github.com/arty-name)
- [![timfee](https://avatars.githubusercontent.com/u/3246342?s=64)](https://github.com/timfee)
- [![Tc-001](https://avatars.githubusercontent.com/u/55956895?s=64)](https://github.com/Tc-001)
- [![hexWars](https://avatars.githubusercontent.com/u/61684793?s=64)](https://github.com/hexWars)
- [![SatanshuMishra](https://avatars.githubusercontent.com/u/63601536?s=64)](https://github.com/SatanshuMishra)
- [![ManorSailor](https://avatars.githubusercontent.com/u/53308129?s=64)](https://github.com/ManorSailor)
- [![BlackdestinyXX](https://avatars.githubusercontent.com/u/65021823?s=64)](https://github.com/BlackdestinyXX)
- [![DevRohit06](https://avatars.githubusercontent.com/u/66678395?s=64)](https://github.com/DevRohit06)
- [![radenpioneer](https://avatars.githubusercontent.com/u/7355835?s=64)](https://github.com/radenpioneer)
- [![thepassle](https://avatars.githubusercontent.com/u/17054057?s=64)](https://github.com/thepassle)
- [![Morritz](https://avatars.githubusercontent.com/u/12800230?s=64)](https://github.com/Morritz)
- [![emily-shen](https://avatars.githubusercontent.com/u/69125074?s=64)](https://github.com/emily-shen)
- [![VLTHellolin](https://avatars.githubusercontent.com/u/119287439?s=64)](https://github.com/VLTHellolin)
- [![Lilian97](https://avatars.githubusercontent.com/u/53004404?s=64)](https://github.com/Lilian97)
- [![matdexir](https://avatars.githubusercontent.com/u/58453130?s=64)](https://github.com/matdexir)
- [![nadar](https://avatars.githubusercontent.com/u/3417221?s=64)](https://github.com/nadar)
- [![okonomi](https://avatars.githubusercontent.com/u/74355?s=64)](https://github.com/okonomi)
- [![neoki07](https://avatars.githubusercontent.com/u/22608727?s=64)](https://github.com/neoki07)
- [![renanleonel](https://avatars.githubusercontent.com/u/62075475?s=64)](https://github.com/renanleonel)
- [![situ2001](https://avatars.githubusercontent.com/u/28241963?s=64)](https://github.com/situ2001)
- [![space-otter](https://avatars.githubusercontent.com/u/27896533?s=64)](https://github.com/space-otter)
- [![tobiasschmidt89](https://avatars.githubusercontent.com/u/75863044?s=64)](https://github.com/tobiasschmidt89)
- [![ws-rush](https://avatars.githubusercontent.com/u/37883750?s=64)](https://github.com/ws-rush)
- [![ykcory](https://avatars.githubusercontent.com/u/124225078?s=64)](https://github.com/ykcory)
- [![bengeois](https://avatars.githubusercontent.com/u/20949060?s=64)](https://github.com/bengeois)
- [![openscript](https://avatars.githubusercontent.com/u/1105080?s=64)](https://github.com/openscript)
- [![fflaten](https://avatars.githubusercontent.com/u/3436158?s=64)](https://github.com/fflaten)
- [![favanso](https://avatars.githubusercontent.com/u/71955135?s=64)](https://github.com/favanso)
- [![evadecker](https://avatars.githubusercontent.com/u/4117920?s=64)](https://github.com/evadecker)
- [![eric-burel](https://avatars.githubusercontent.com/u/7983005?s=64)](https://github.com/eric-burel)
- [![dsomel21](https://avatars.githubusercontent.com/u/17516559?s=64)](https://github.com/dsomel21)
- [![Dillonpw](https://avatars.githubusercontent.com/u/136388405?s=64)](https://github.com/Dillonpw)
- [![David-Large](https://avatars.githubusercontent.com/u/87678248?s=64)](https://github.com/David-Large)
- [![cravend](https://avatars.githubusercontent.com/u/7117993?s=64)](https://github.com/cravend)
- [![CBID2](https://avatars.githubusercontent.com/u/105683440?s=64)](https://github.com/CBID2)
- [![csarnataro](https://avatars.githubusercontent.com/u/11388820?s=64)](https://github.com/csarnataro)
- [![emjio](https://avatars.githubusercontent.com/u/26915891?s=64)](https://github.com/emjio)
- [![breadadams](https://avatars.githubusercontent.com/u/5795227?s=64)](https://github.com/breadadams)
- [![Because789](https://avatars.githubusercontent.com/u/867257?s=64)](https://github.com/Because789)
- [![deining](https://avatars.githubusercontent.com/u/18169566?s=64)](https://github.com/deining)
- [![0xflotus](https://avatars.githubusercontent.com/u/26602940?s=64)](https://github.com/0xflotus)
- [![ahmed-n-abdeltwab](https://avatars.githubusercontent.com/u/62723180?s=64)](https://github.com/ahmed-n-abdeltwab)
- [![leen-neel](https://avatars.githubusercontent.com/u/49027876?s=64)](https://github.com/leen-neel)
- [![nicdun](https://avatars.githubusercontent.com/u/28926450?s=64)](https://github.com/nicdun)
- [![pReya](https://avatars.githubusercontent.com/u/4677417?s=64)](https://github.com/pReya)
- [![mhdcodes](https://avatars.githubusercontent.com/u/9967336?s=64)](https://github.com/mhdcodes)
- [![debiru](https://avatars.githubusercontent.com/u/36402166?s=64)](https://github.com/debiru)
- [![baevm](https://avatars.githubusercontent.com/u/91272406?s=64)](https://github.com/baevm)
- [![MartinFerret](https://avatars.githubusercontent.com/u/90469240?s=64)](https://github.com/MartinFerret)
- [![kannansuresh](https://avatars.githubusercontent.com/u/61264139?s=64)](https://github.com/kannansuresh)
- [![kanadgupta](https://avatars.githubusercontent.com/u/8854718?s=64)](https://github.com/kanadgupta)
- [![jdbruxelles](https://avatars.githubusercontent.com/u/18559798?s=64)](https://github.com/jdbruxelles)
- [![Je12emy](https://avatars.githubusercontent.com/u/34408108?s=64)](https://github.com/Je12emy)
- [![jhuleatt](https://avatars.githubusercontent.com/u/3759507?s=64)](https://github.com/jhuleatt)
- [![sunapi386](https://avatars.githubusercontent.com/u/1029022?s=64)](https://github.com/sunapi386)
- [![swift502](https://avatars.githubusercontent.com/u/24359130?s=64)](https://github.com/swift502)
- [![newtoallofthis123](https://avatars.githubusercontent.com/u/78465651?s=64)](https://github.com/newtoallofthis123)
- [![LiHowe](https://avatars.githubusercontent.com/u/30686223?s=64)](https://github.com/LiHowe)
- [![RolginRoman](https://avatars.githubusercontent.com/u/5978625?s=64)](https://github.com/RolginRoman)
- [![ffxsam](https://avatars.githubusercontent.com/u/12532733?s=64)](https://github.com/ffxsam)
- [![SandraRodgers](https://avatars.githubusercontent.com/u/45321563?s=64)](https://github.com/SandraRodgers)
- [![SebasG22](https://avatars.githubusercontent.com/u/17608169?s=64)](https://github.com/SebasG22)
- [![SergioDiez](https://avatars.githubusercontent.com/u/9643358?s=64)](https://github.com/SergioDiez)
- [![ShamarYarde](https://avatars.githubusercontent.com/u/19520829?s=64)](https://github.com/ShamarYarde)
- [![surjithctly](https://avatars.githubusercontent.com/u/1884712?s=64)](https://github.com/surjithctly)
- [![V3RON](https://avatars.githubusercontent.com/u/8137511?s=64)](https://github.com/V3RON)
- [![motss](https://avatars.githubusercontent.com/u/10607759?s=64)](https://github.com/motss)
- [![tem235](https://avatars.githubusercontent.com/u/5091416?s=64)](https://github.com/tem235)
- [![tobySolutions](https://avatars.githubusercontent.com/u/96334363?s=64)](https://github.com/tobySolutions)
- [![inwardmovement](https://avatars.githubusercontent.com/u/9438102?s=64)](https://github.com/inwardmovement)
- [![XinChou16](https://avatars.githubusercontent.com/u/24493056?s=64)](https://github.com/XinChou16)
- [![vitoriapena](https://avatars.githubusercontent.com/u/16581093?s=64)](https://github.com/vitoriapena)
- [![vivitt](https://avatars.githubusercontent.com/u/91918142?s=64)](https://github.com/vivitt)
- [![Zastinian](https://avatars.githubusercontent.com/u/82119938?s=64)](https://github.com/Zastinian)
- [![Rolanddoda](https://avatars.githubusercontent.com/u/18482346?s=64)](https://github.com/Rolanddoda)
- [![millette](https://avatars.githubusercontent.com/u/50741?s=64)](https://github.com/millette)
- [![RobertAKARobin](https://avatars.githubusercontent.com/u/6268177?s=64)](https://github.com/RobertAKARobin)
- [![wobsoriano](https://avatars.githubusercontent.com/u/13049130?s=64)](https://github.com/wobsoriano)
- [![RezixDev](https://avatars.githubusercontent.com/u/128291517?s=64)](https://github.com/RezixDev)
- [![Scalamando](https://avatars.githubusercontent.com/u/16595528?s=64)](https://github.com/Scalamando)
- [![serhalp](https://avatars.githubusercontent.com/u/1377702?s=64)](https://github.com/serhalp)
- [![9thQuadrant](https://avatars.githubusercontent.com/u/14833423?s=64)](https://github.com/9thQuadrant)
- [![dibaxu](https://avatars.githubusercontent.com/u/123599427?s=64)](https://github.com/dibaxu)
- [![omarr45](https://avatars.githubusercontent.com/u/58887202?s=64)](https://github.com/omarr45)
- [![okikio](https://avatars.githubusercontent.com/u/17222836?s=64)](https://github.com/okikio)
- [![Ekwuno](https://avatars.githubusercontent.com/u/35943047?s=64)](https://github.com/Ekwuno)
- [![nikhilhenry](https://avatars.githubusercontent.com/u/25770025?s=64)](https://github.com/nikhilhenry)
- [![NavyStack](https://avatars.githubusercontent.com/u/137406386?s=64)](https://github.com/NavyStack)
- [![stormynight9](https://avatars.githubusercontent.com/u/81434423?s=64)](https://github.com/stormynight9)
- [![xun082](https://avatars.githubusercontent.com/u/73689580?s=64)](https://github.com/xun082)
- [![my-astro](https://avatars.githubusercontent.com/u/190968675?s=64)](https://github.com/my-astro)
- [![pilcrowonpaper](https://avatars.githubusercontent.com/u/80624252?s=64)](https://github.com/pilcrowonpaper)
- [![randomguy-2650](https://avatars.githubusercontent.com/u/150704902?s=64)](https://github.com/randomguy-2650)
- [![ref-thomasledoux1](https://avatars.githubusercontent.com/u/74651094?s=64)](https://github.com/ref-thomasledoux1)
- [![sentisso](https://avatars.githubusercontent.com/u/38100632?s=64)](https://github.com/sentisso)
- [![t0yohei](https://avatars.githubusercontent.com/u/30691457?s=64)](https://github.com/t0yohei)
- [![JPVan](https://avatars.githubusercontent.com/u/11825317?s=64)](https://github.com/JPVan)
- [![woshierha](https://avatars.githubusercontent.com/u/79536204?s=64)](https://github.com/woshierha)
- [![yiyuan9](https://avatars.githubusercontent.com/u/53341550?s=64)](https://github.com/yiyuan9)
- [![zreren](https://avatars.githubusercontent.com/u/70315161?s=64)](https://github.com/zreren)
- [![dei8bit](https://avatars.githubusercontent.com/u/83183656?s=64)](https://github.com/dei8bit)
- [![shinonomelon](https://avatars.githubusercontent.com/u/70379917?s=64)](https://github.com/shinonomelon)
- [![Tsukistar](https://avatars.githubusercontent.com/u/36409869?s=64)](https://github.com/Tsukistar)
- [![zhuchentong](https://avatars.githubusercontent.com/u/4535888?s=64)](https://github.com/zhuchentong)
- [![abhikjain360](https://avatars.githubusercontent.com/u/43034252?s=64)](https://github.com/abhikjain360)
- [![castarco](https://avatars.githubusercontent.com/u/251364?s=64)](https://github.com/castarco)
- [![peng](https://avatars.githubusercontent.com/u/26745086?s=64)](https://github.com/peng)
- [![AsazuTaiga](https://avatars.githubusercontent.com/u/48325984?s=64)](https://github.com/AsazuTaiga)
- [![magurotabetai](https://avatars.githubusercontent.com/u/3165765?s=64)](https://github.com/magurotabetai)
- [![Bluex-xx](https://avatars.githubusercontent.com/u/30541686?s=64)](https://github.com/Bluex-xx)
- [![carsakiller](https://avatars.githubusercontent.com/u/61925890?s=64)](https://github.com/carsakiller)
- [![djdeo](https://avatars.githubusercontent.com/u/32230775?s=64)](https://github.com/djdeo)
- [![fabriciodev26](https://avatars.githubusercontent.com/u/133163553?s=64)](https://github.com/fabriciodev26)
- [![mardybardy](https://avatars.githubusercontent.com/u/26926272?s=64)](https://github.com/mardybardy)
- [![gtnbssn](https://avatars.githubusercontent.com/u/10359074?s=64)](https://github.com/gtnbssn)
- [![guiguir68](https://avatars.githubusercontent.com/u/46498821?s=64)](https://github.com/guiguir68)
- [![eiis](https://avatars.githubusercontent.com/u/88193046?s=64)](https://github.com/eiis)
- [![inotelabs](https://avatars.githubusercontent.com/u/137146930?s=64)](https://github.com/inotelabs)
- [![jose8a](https://avatars.githubusercontent.com/u/817855?s=64)](https://github.com/jose8a)
- [![kikonavarro](https://avatars.githubusercontent.com/u/78880702?s=64)](https://github.com/kikonavarro)
- [![lhz960904](https://avatars.githubusercontent.com/u/29157111?s=64)](https://github.com/lhz960904)
- [![lstephensca](https://avatars.githubusercontent.com/u/31998110?s=64)](https://github.com/lstephensca)
- [![aaronlamz](https://avatars.githubusercontent.com/u/3964466?s=64)](https://github.com/aaronlamz)
- [![conradagramont](https://avatars.githubusercontent.com/u/41589731?s=64)](https://github.com/conradagramont)
- [![WooDaeHyun](https://avatars.githubusercontent.com/u/113018070?s=64)](https://github.com/WooDaeHyun)
- [![DavidEGiraldo](https://avatars.githubusercontent.com/u/113148688?s=64)](https://github.com/DavidEGiraldo)
- [![Sparkhand](https://avatars.githubusercontent.com/u/39919361?s=64)](https://github.com/Sparkhand)
- [![ekafyi](https://avatars.githubusercontent.com/u/6597211?s=64)](https://github.com/ekafyi)
- [![estruyf](https://avatars.githubusercontent.com/u/2900833?s=64)](https://github.com/estruyf)
- [![emma-sg](https://avatars.githubusercontent.com/u/5727389?s=64)](https://github.com/emma-sg)
- [![Erik-McKelvey](https://avatars.githubusercontent.com/u/43917961?s=64)](https://github.com/Erik-McKelvey)
- [![PanConDev](https://avatars.githubusercontent.com/u/10679967?s=64)](https://github.com/PanConDev)
- [![Franqsanz](https://avatars.githubusercontent.com/u/44296203?s=64)](https://github.com/Franqsanz)
- [![falvarador](https://avatars.githubusercontent.com/u/8008909?s=64)](https://github.com/falvarador)
- [![felixsanz](https://avatars.githubusercontent.com/u/6182099?s=64)](https://github.com/felixsanz)
- [![ogabrielp](https://avatars.githubusercontent.com/u/15015260?s=64)](https://github.com/ogabrielp)
- [![gaeulbyul](https://avatars.githubusercontent.com/u/830515?s=64)](https://github.com/gaeulbyul)
- [![neotherapper](https://avatars.githubusercontent.com/u/1514154?s=64)](https://github.com/neotherapper)
- [![TKDev7](https://avatars.githubusercontent.com/u/30705623?s=64)](https://github.com/TKDev7)
- [![addonion](https://avatars.githubusercontent.com/u/51356696?s=64)](https://github.com/addonion)
- [![AdamPrendergast](https://avatars.githubusercontent.com/u/550193?s=64)](https://github.com/AdamPrendergast)
- [![afonsojramos](https://avatars.githubusercontent.com/u/19473034?s=64)](https://github.com/afonsojramos)
- [![Alex-S-Davies](https://avatars.githubusercontent.com/u/46956435?s=64)](https://github.com/Alex-S-Davies)
- [![Astisme](https://avatars.githubusercontent.com/u/96465880?s=64)](https://github.com/Astisme)
- [![alfredogonzalezmartinez](https://avatars.githubusercontent.com/u/48945157?s=64)](https://github.com/alfredogonzalezmartinez)
- [![alvgaona](https://avatars.githubusercontent.com/u/13088001?s=64)](https://github.com/alvgaona)
- [![alvinometric](https://avatars.githubusercontent.com/u/107407814?s=64)](https://github.com/alvinometric)
- [![andremralves](https://avatars.githubusercontent.com/u/71379045?s=64)](https://github.com/andremralves)
- [![ArinaKosiakov](https://avatars.githubusercontent.com/u/112902422?s=64)](https://github.com/ArinaKosiakov)
- [![atilafassina](https://avatars.githubusercontent.com/u/2382552?s=64)](https://github.com/atilafassina)
- [![avilyre](https://avatars.githubusercontent.com/u/66757451?s=64)](https://github.com/avilyre)
- [![bartosztrusinski](https://avatars.githubusercontent.com/u/33166095?s=64)](https://github.com/bartosztrusinski)
- [![calebeby](https://avatars.githubusercontent.com/u/13206945?s=64)](https://github.com/calebeby)
- [![CheukTsai](https://avatars.githubusercontent.com/u/58281730?s=64)](https://github.com/CheukTsai)
- [![colbyfayock](https://avatars.githubusercontent.com/u/1045274?s=64)](https://github.com/colbyfayock)
- [![juanburg98](https://avatars.githubusercontent.com/u/106132925?s=64)](https://github.com/juanburg98)
- [![juansemprun](https://avatars.githubusercontent.com/u/33623712?s=64)](https://github.com/juansemprun)
- [![juliamrch](https://avatars.githubusercontent.com/u/101819212?s=64)](https://github.com/juliamrch)
- [![jurajkapsz](https://avatars.githubusercontent.com/u/2209893?s=64)](https://github.com/jurajkapsz)
- [![justinnoel](https://avatars.githubusercontent.com/u/81643826?s=64)](https://github.com/justinnoel)
- [![yt-kevincarrera](https://avatars.githubusercontent.com/u/144747596?s=64)](https://github.com/yt-kevincarrera)
- [![ixkaito](https://avatars.githubusercontent.com/u/5457539?s=64)](https://github.com/ixkaito)
- [![yeskunall](https://avatars.githubusercontent.com/u/14703164?s=64)](https://github.com/yeskunall)
- [![kylebutts](https://avatars.githubusercontent.com/u/19961439?s=64)](https://github.com/kylebutts)
- [![leoxs22](https://avatars.githubusercontent.com/u/9098977?s=64)](https://github.com/leoxs22)
- [![leohxj](https://avatars.githubusercontent.com/u/1506900?s=64)](https://github.com/leohxj)
- [![LuMiSxh](https://avatars.githubusercontent.com/u/76248448?s=64)](https://github.com/LuMiSxh)
- [![Trombach](https://avatars.githubusercontent.com/u/19306765?s=64)](https://github.com/Trombach)
- [![lukemcdonald](https://avatars.githubusercontent.com/u/299173?s=64)](https://github.com/lukemcdonald)
- [![MaxTheTurtle0](https://avatars.githubusercontent.com/u/129096443?s=64)](https://github.com/MaxTheTurtle0)
- [![mingXta](https://avatars.githubusercontent.com/u/37586974?s=64)](https://github.com/mingXta)
- [![HALQME](https://avatars.githubusercontent.com/u/68320771?s=64)](https://github.com/HALQME)
- [![X7md](https://avatars.githubusercontent.com/u/54203033?s=64)](https://github.com/X7md)
- [![HawtinZeng](https://avatars.githubusercontent.com/u/73981739?s=64)](https://github.com/HawtinZeng)
- [![hfournier](https://avatars.githubusercontent.com/u/13371332?s=64)](https://github.com/hfournier)
- [![iainsimmons](https://avatars.githubusercontent.com/u/8390324?s=64)](https://github.com/iainsimmons)
- [![isaac-mcfadyen](https://avatars.githubusercontent.com/u/6243993?s=64)](https://github.com/isaac-mcfadyen)
- [![isamardzija](https://avatars.githubusercontent.com/u/74252988?s=64)](https://github.com/isamardzija)
- [![AsyncBanana](https://avatars.githubusercontent.com/u/58297401?s=64)](https://github.com/AsyncBanana)
- [![vandorsx](https://avatars.githubusercontent.com/u/140852203?s=64)](https://github.com/vandorsx)
- [![DerYeger](https://avatars.githubusercontent.com/u/7950094?s=64)](https://github.com/DerYeger)
- [![JEverhart383](https://avatars.githubusercontent.com/u/7818951?s=64)](https://github.com/JEverhart383)
- [![jeffdrumgod](https://avatars.githubusercontent.com/u/504327?s=64)](https://github.com/jeffdrumgod)
- [![jazzypants1989](https://avatars.githubusercontent.com/u/102560332?s=64)](https://github.com/jazzypants1989)
- [![Jhon-H](https://avatars.githubusercontent.com/u/88730883?s=64)](https://github.com/Jhon-H)
- [![jcha0713](https://avatars.githubusercontent.com/u/29053796?s=64)](https://github.com/jcha0713)
- [![Jvictorvieira](https://avatars.githubusercontent.com/u/62016742?s=64)](https://github.com/Jvictorvieira)
- [![andrzeij](https://avatars.githubusercontent.com/u/3809608?s=64)](https://github.com/andrzeij)
- [![Gelbotron](https://avatars.githubusercontent.com/u/9696553?s=64)](https://github.com/Gelbotron)
- [![unrevised6419](https://avatars.githubusercontent.com/u/1881266?s=64)](https://github.com/unrevised6419)
- [![madrus](https://avatars.githubusercontent.com/u/7058116?s=64)](https://github.com/madrus)
- [![andersk](https://avatars.githubusercontent.com/u/26471?s=64)](https://github.com/andersk)
- [![ancaemcken](https://avatars.githubusercontent.com/u/1617798?s=64)](https://github.com/ancaemcken)
- [![grace-anand](https://avatars.githubusercontent.com/u/95082903?s=64)](https://github.com/grace-anand)
- [![yoyo837](https://avatars.githubusercontent.com/u/6134547?s=64)](https://github.com/yoyo837)
- [![amirzezo201](https://avatars.githubusercontent.com/u/104027530?s=64)](https://github.com/amirzezo201)
- [![amxmln](https://avatars.githubusercontent.com/u/15271679?s=64)](https://github.com/amxmln)
- [![gachikuku](https://avatars.githubusercontent.com/u/11743804?s=64)](https://github.com/gachikuku)
- [![heldinz](https://avatars.githubusercontent.com/u/851278?s=64)](https://github.com/heldinz)
- [![hrynko](https://avatars.githubusercontent.com/u/28267443?s=64)](https://github.com/hrynko)
- [![notjb](https://avatars.githubusercontent.com/u/3164034?s=64)](https://github.com/notjb)
- [![andriesniemandt](https://avatars.githubusercontent.com/u/43276171?s=64)](https://github.com/andriesniemandt)
- [![ap-1](https://avatars.githubusercontent.com/u/67872951?s=64)](https://github.com/ap-1)
- [![GalindoSVQ](https://avatars.githubusercontent.com/u/47742611?s=64)](https://github.com/GalindoSVQ)
- [![Antonytm](https://avatars.githubusercontent.com/u/647813?s=64)](https://github.com/Antonytm)
- [![theAnuragMishra](https://avatars.githubusercontent.com/u/86455065?s=64)](https://github.com/theAnuragMishra)
- [![ansango](https://avatars.githubusercontent.com/u/27769121?s=64)](https://github.com/ansango)
- [![Aperezpe](https://avatars.githubusercontent.com/u/32003234?s=64)](https://github.com/Aperezpe)
- [![Apisathan](https://avatars.githubusercontent.com/u/16895360?s=64)](https://github.com/Apisathan)
- [![aritraroy24](https://avatars.githubusercontent.com/u/65696941?s=64)](https://github.com/aritraroy24)
- [![ArnavK-09](https://avatars.githubusercontent.com/u/69188140?s=64)](https://github.com/ArnavK-09)
- [![khattakdev](https://avatars.githubusercontent.com/u/37709578?s=64)](https://github.com/khattakdev)
- [![artt](https://avatars.githubusercontent.com/u/1711188?s=64)](https://github.com/artt)
- [![artursopelnik](https://avatars.githubusercontent.com/u/6503839?s=64)](https://github.com/artursopelnik)
- [![3w36zj6](https://avatars.githubusercontent.com/u/52315048?s=64)](https://github.com/3w36zj6)
- [![aaronkai](https://avatars.githubusercontent.com/u/1002694?s=64)](https://github.com/aaronkai)
- [![arafays](https://avatars.githubusercontent.com/u/6192554?s=64)](https://github.com/arafays)
- [![alfawal](https://avatars.githubusercontent.com/u/61620817?s=64)](https://github.com/alfawal)
- [![abisekhsubedi](https://avatars.githubusercontent.com/u/20342543?s=64)](https://github.com/abisekhsubedi)
- [![adamlevoy](https://avatars.githubusercontent.com/u/81095429?s=64)](https://github.com/adamlevoy)
- [![AdamGEmerson](https://avatars.githubusercontent.com/u/35545129?s=64)](https://github.com/AdamGEmerson)
- [![adamgajzlerowicz](https://avatars.githubusercontent.com/u/675615?s=64)](https://github.com/adamgajzlerowicz)
- [![adam-lynch](https://avatars.githubusercontent.com/u/1427241?s=64)](https://github.com/adam-lynch)
- [![armgitaar](https://avatars.githubusercontent.com/u/30202878?s=64)](https://github.com/armgitaar)
- [![ADRlANO](https://avatars.githubusercontent.com/u/35582648?s=64)](https://github.com/ADRlANO)
- [![adrian-burkhart](https://avatars.githubusercontent.com/u/59536294?s=64)](https://github.com/adrian-burkhart)
- [![adrianlyjak](https://avatars.githubusercontent.com/u/2024018?s=64)](https://github.com/adrianlyjak)
- [![apz-gh](https://avatars.githubusercontent.com/u/20273871?s=64)](https://github.com/apz-gh)
- [![ahmedrowaihi](https://avatars.githubusercontent.com/u/67356781?s=64)](https://github.com/ahmedrowaihi)
- [![AishaBlake](https://avatars.githubusercontent.com/u/7365296?s=64)](https://github.com/AishaBlake)
- [![aboudard](https://avatars.githubusercontent.com/u/767767?s=64)](https://github.com/aboudard)
- [![altano](https://avatars.githubusercontent.com/u/1009?s=64)](https://github.com/altano)
- [![wonderbeel](https://avatars.githubusercontent.com/u/1643060?s=64)](https://github.com/wonderbeel)
- [![albertogiunta](https://avatars.githubusercontent.com/u/5568337?s=64)](https://github.com/albertogiunta)
- [![amaimus](https://avatars.githubusercontent.com/u/35699916?s=64)](https://github.com/amaimus)
- [![alexpdraper](https://avatars.githubusercontent.com/u/6441503?s=64)](https://github.com/alexpdraper)
- [![AlexNodex](https://avatars.githubusercontent.com/u/17162626?s=64)](https://github.com/AlexNodex)
- [![haasal](https://avatars.githubusercontent.com/u/104835302?s=64)](https://github.com/haasal)
- [![alex-drocks](https://avatars.githubusercontent.com/u/69808183?s=64)](https://github.com/alex-drocks)
- [![thekidisalright](https://avatars.githubusercontent.com/u/125706322?s=64)](https://github.com/thekidisalright)
- [![alextison](https://avatars.githubusercontent.com/u/59065561?s=64)](https://github.com/alextison)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Styling Guide
[Skip to content](https://docs.astro.build/en/guides/styling/#_top)

# Styles and CSS

Astro was designed to make styling and writing CSS a breeze. Write your own CSS directly inside of an Astro component or import your favorite CSS library like [Tailwind](https://tailwindcss.com/docs/installation/framework-guides/astro). Advanced styling languages like [Sass](https://sass-lang.com/) and [Less](https://lesscss.org/) are also supported.

## Styling in Astro

[Section titled Styling in Astro](https://docs.astro.build/en/guides/styling/#styling-in-astro)

Styling an Astro component is as easy as adding a `<style>` tag to your component or page template. When you place a `<style>` tag inside of an Astro component, Astro will detect the CSS and handle your styles for you, automatically.

```

<style>

  h1 { color: red; }

</style>
```

### Scoped Styles

[Section titled Scoped Styles](https://docs.astro.build/en/guides/styling/#scoped-styles)

Astro `<style>` CSS rules are automatically **scoped by default**. Scoped styles are compiled behind-the-scenes to only apply to HTML written inside of that same component. The CSS that you write inside of an Astro component is automatically encapsulated inside of that component.

This CSS:

```

<style>

  h1 {

    color: red;

  }

  .text {

    color: blue;

  }

</style>
```

Compiles to this:

```

<style>

  h1[data-astro-cid-hhnqfkh6] {

     color: red;

  }

  .text[data-astro-cid-hhnqfkh6] {

    color: blue;

  }

</style>
```

Scoped styles don’t leak and won’t impact the rest of your site. In Astro, it is okay to use low-specificity selectors like `h1 {}` or `p {}` because they will be compiled with scopes in the final output.

Scoped styles also won’t apply to other Astro components contained inside of your template. If you need to style a child component, consider wrapping that component in a `<div>` (or other element) that you can then style.

The specificity of scoped styles is preserved, allowing them to work consistently alongside other CSS files or CSS libraries while still preserving the exclusive boundaries that prevent styles from applying outside the component.

### Global Styles

[Section titled Global Styles](https://docs.astro.build/en/guides/styling/#global-styles)

While we recommend scoped styles for most components, you may eventually find a valid reason to write global, unscoped CSS. You can opt-out of automatic CSS scoping with the `<style is:global>` attribute.

```

<style is:global>

  /* Unscoped, delivered as-is to the browser.

     Applies to all <h1> tags on your site. */

  h1 { color: red; }

</style>
```

You can also mix global & scoped CSS rules together in the same `<style>` tag using the `:global()` selector. This becomes a powerful pattern for applying CSS styles to children of your component.

```

<style>

  /* Scoped to this component, only. */

  h1 { color: red; }

  /* Mixed: Applies to child `h1` elements only. */

  article :global(h1) {

    color: blue;

  }

</style>

<h1>Title</h1>

<article><slot /></article>
```

This is a great way to style things like blog posts, or documents with CMS-powered content where the contents live outside of Astro. But be careful: components whose appearance differs based on whether or not they have a certain parent component can become difficult to troubleshoot.

Scoped styles should be used as often as possible. Global styles should be used only as-needed.

### Combining classes with `class:list`

[Section titled Combining classes with class:list](https://docs.astro.build/en/guides/styling/#combining-classes-with-classlist)

If you need to combine classes on an element dynamically, you can use the `class:list` utility attribute in `.astro` files.

```

---

const { isRed } = Astro.props;

---

<!-- If `isRed` is truthy, class will be "box red". -->

<!-- If `isRed` is falsy, class will be "box". -->

<div class:list={['box', { red: isRed }]}><slot /></div>

<style>

  .box { border: 1px solid blue; }

  .red { border-color: red; }

</style>
```

See our [directives reference](https://docs.astro.build/en/reference/directives-reference/#classlist) page to learn more about `class:list`.

### CSS Variables

[Section titled CSS Variables](https://docs.astro.build/en/guides/styling/#css-variables)

**Added in:** `astro@0.21.0`

The Astro `<style>` can reference any CSS variables available on the page. You can also pass CSS variables directly from your component frontmatter using the `define:vars` directive.

```

---

const foregroundColor = "rgb(221 243 228)";

const backgroundColor = "rgb(24 121 78)";

---

<style define:vars={{ foregroundColor, backgroundColor }}>

  h1 {

    background-color: var(--backgroundColor);

    color: var(--foregroundColor);

  }

</style>

<h1>Hello</h1>
```

See our [directives reference](https://docs.astro.build/en/reference/directives-reference/#definevars) page to learn more about `define:vars`.

### Passing a `class` to a child component

[Section titled Passing a class to a child component](https://docs.astro.build/en/guides/styling/#passing-a-class-to-a-child-component)

In Astro, HTML attributes like `class` do not automatically pass through to child components.

Instead, accept a `class` prop in the child component and apply it to the root element. When destructuring, you must rename it, because `class` is a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words) in JavaScript.

Using the default scoped style strategy, you must also pass the `data-astro-cid-*` attribute. You can do this by passing the `...rest` of the props to the component. If you have changed `scopedStyleStrategy` to `'class'` or `'where'`, the `...rest` prop is not necessary.

```

---

const { class: className, ...rest } = Astro.props;

---

<div class={className} {...rest}>

  <slot/>

</div>
```

```

---

import MyComponent from "../components/MyComponent.astro"

---

<style>

  .red {

    color: red;

  }

</style>

<MyComponent class="red">This will be red!</MyComponent>
```

### Inline styles

[Section titled Inline styles](https://docs.astro.build/en/guides/styling/#inline-styles)

You can style HTML elements inline using the `style` attribute. This can be a CSS string or an object of CSS properties:

```

// These are equivalent:

<p style={{ color: "brown", textDecoration: "underline" }}>My text</p>

<p style="color: brown; text-decoration: underline;">My text</p>
```

## External Styles

[Section titled External Styles](https://docs.astro.build/en/guides/styling/#external-styles)

There are two ways to resolve external global stylesheets: an ESM import for files located within your project source, and an absolute URL link for files in your `public/` directory, or hosted outside of your project.

Read more about using [static assets](https://docs.astro.build/en/guides/imports/) located in `public/` or `src/`.

### Import a local stylesheet

[Section titled Import a local stylesheet](https://docs.astro.build/en/guides/styling/#import-a-local-stylesheet)

You can import stylesheets in your Astro component frontmatter using ESM import syntax. CSS imports work like [any other ESM import in an Astro component](https://docs.astro.build/en/basics/astro-components/#the-component-script), which should be referenced as **relative to the component** and must be written at the **top** of your component script, with any other imports.

```

---

// Astro will bundle and optimize this CSS for you automatically

// This also works for preprocessor files like .scss, .styl, etc.

import '../styles/utils.css';

---

<html><!-- Your page here --></html>
```

CSS `import` via ESM are supported inside of any JavaScript file, including JSX components like React & Preact. This can be useful for writing granular, per-component styles for your React components.

### Import a stylesheet from an npm package

[Section titled Import a stylesheet from an npm package](https://docs.astro.build/en/guides/styling/#import-a-stylesheet-from-an-npm-package)

You may also need to load stylesheets from an external npm package. This is especially common for utilities like [Open Props](https://open-props.style/). If your package **recommends using a file extension** (i.e. `package-name/styles.css` instead of `package-name/styles`), this should work like any local stylesheet:

```

---

import 'package-name/styles.css';

---

<html><!-- Your page here --></html>
```

If your package **does not suggest using a file extension** (i.e. `package-name/styles`), you’ll need to update your Astro config first!

Say you are importing a CSS file from `package-name` called `normalize` (with the file extension omitted). To ensure we can prerender your page correctly, add `package-name` to [the `vite.ssr.noExternal` array](https://vite.dev/config/ssr-options.html#ssr-noexternal):

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  vite: {

    ssr: {

      noExternal: ['package-name'],

    }

  }

})
```

Now, you are free to import `package-name/normalize`. This will be bundled and optimized by Astro like any other local stylesheet.

```

---

import 'package-name/normalize';

---

<html><!-- Your page here --></html>
```

### Load a static stylesheet via “link” tags

[Section titled Load a static stylesheet via “link” tags](https://docs.astro.build/en/guides/styling/#load-a-static-stylesheet-via-link-tags)

You can also use the `<link>` element to load a stylesheet on the page. This should be an absolute URL path to a CSS file located in your `/public` directory, or an URL to an external website. Relative `<link>` href values are not supported.

```

<head>

  <!-- Local: /public/styles/global.css -->

  <link rel="stylesheet" href="/styles/global.css" />

  <!-- External -->

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.24.1/themes/prism-tomorrow.css" />

</head>
```

Because this approach uses the `public/` directory, it skips the normal CSS processing, bundling and optimizations that are provided by Astro. If you need these transformations, use the [Import a Stylesheet](https://docs.astro.build/en/guides/styling/#import-a-local-stylesheet) method above.

## Cascading Order

[Section titled Cascading Order](https://docs.astro.build/en/guides/styling/#cascading-order)

Astro components will sometimes have to evaluate multiple sources of CSS. For example, your component might import a CSS stylesheet, include its own `<style>` tag, _and_ be rendered inside a layout that imports CSS.

When conflicting CSS rules apply to the same element, browsers first use _specificity_ and then _order of appearance_ to determine which value to show.

If one rule is more _specific_ than another, no matter where the CSS rule appears, its value will take precedence:

```

<style>

  h1 { color: red }

  div > h1 {

    color: purple

  }

</style>

<div>

  <h1>

    This header will be purple!

  </h1>

</div>
```

If two rules have the same specificity, then the _order of appearance_ is evaluated, and the last rule’s value will take precedence:

```

<style>

  h1 { color: purple }

  h1 { color: red }

</style>

<div>

  <h1>

    This header will be red!

  </h1>

</div>
```

Astro CSS rules are evaluated in this order of appearance:

- **`<link>` tags in the head** (lowest precedence)
- **imported styles**
- **scoped styles** (highest precedence)

### Scoped Styles

[Section titled Scoped Styles](https://docs.astro.build/en/guides/styling/#scoped-styles-1)

Depending on your chosen value for [`scopedStyleStrategy`](https://docs.astro.build/en/reference/configuration-reference/#scopedstylestrategy), scoped styles may or may not increase the [CLASS column specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity#class_column).

However, [scoped styles](https://docs.astro.build/en/guides/styling/#scoped-styles) will always come last in the order of appearance. These styles will therefore take precedence over other styles of the same specificity. For example, if you import a stylesheet that conflicts with a scoped style, the scoped style’s value will apply:

```

h1 {

  color: purple;

}
```

```

---

import "./make-it-purple.css"

---

<style>

  h1 { color: red }

</style>

<div>

  <h1>

    This header will be red!

  </h1>

</div>
```

Scoped styles will be overwritten if the imported style is more specific. The style with a higher specificity will take precedence over the scoped style:

```

#intro {

  color: purple;

}
```

```

---

import "./make-it-purple.css"

---

<style>

  h1 { color: red }

</style>

<div>

  <h1 id="intro">

    This header will be purple!

  </h1>

</div>
```

### Import Order

[Section titled Import Order](https://docs.astro.build/en/guides/styling/#import-order)

When importing multiple stylesheets in an Astro component, the CSS rules are evaluated in the order that they are imported. A higher specificity will always determine which styles to show, no matter when the CSS is evaluated. But, when conflicting styles have the same specificity, the _last one imported_ wins:

```

div > h1 {

  color: purple;

}
```

```

div > h1 {

  color: green;

}
```

```

---

import "./make-it-green.css"

import "./make-it-purple.css"

---

<style>

  h1 { color: red }

</style>

<div>

  <h1>

    This header will be purple!

  </h1>

</div>
```

While `<style>` tags are scoped and only apply to the component that declares them, _imported_ CSS can “leak”. Importing a component applies any CSS it imports, even if the component is never used:

```

---

import "./make-it-purple.css"

---

<div>

  <h1>I import purple CSS.</h1>

</div>
```

```

---

import "./make-it-green.css"

import PurpleComponent from "./PurpleComponent.astro";

---

<style>

  h1 { color: red }

</style>

<div>

  <h1>

    This header will be purple!

  </h1>

</div>
```

### Link Tags

[Section titled Link Tags](https://docs.astro.build/en/guides/styling/#link-tags)

Style sheets loaded via [link tags](https://docs.astro.build/en/guides/styling/#load-a-static-stylesheet-via-link-tags) are evaluated in order, before any other styles in an Astro file. Therefore, these styles will have lower precedence than imported stylesheets and scoped styles:

```

---

import "../components/make-it-purple.css"

---

<html lang="en">

  <head>

    <meta charset="utf-8" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta name="viewport" content="width=device-width" />

    <meta name="generator" content={Astro.generator} />

    <title>Astro</title>

    <link rel="stylesheet" href="/styles/make-it-blue.css" />

  </head>

  <body>

    <div>

      <h1>This will be purple</h1>

    </div>

  </body>

</html>
```

## Tailwind

[Section titled Tailwind](https://docs.astro.build/en/guides/styling/#tailwind)

Astro comes with support for adding popular CSS libraries, tools, and frameworks to your project like [Tailwind](https://tailwindcss.com/) and more!

Astro supports both Tailwind 3 and 4. You can [add Tailwind 4 support through a Vite plugin](https://docs.astro.build/en/guides/styling/#add-tailwind-4) to your project with a CLI command, or install legacy dependencies manually to add [Tailwind 3 support through an Astro integration](https://docs.astro.build/en/guides/styling/#legacy-tailwind-3-support).

To [upgrade your Astro project from Tailwind 3 to 4](https://docs.astro.build/en/guides/styling/#upgrade-from-tailwind-3) you will need to both add Tailwind 4 support, and remove legacy Tailwind 3 support.

### Add Tailwind 4

[Section titled Add Tailwind 4](https://docs.astro.build/en/guides/styling/#add-tailwind-4)

In Astro `>=5.2.0`, use the `astro add tailwind` command for your package manager to install the official Vite Tailwind plugin. To add Tailwind 4 support to earlier versions of Astro, follow the [instructions in the Tailwind docs](https://tailwindcss.com/docs/installation/framework-guides/astro) to add the `@tailwindcss/vite` Vite plugin manually.

- [npm](https://docs.astro.build/en/guides/styling/#tab-panel-1807)
- [pnpm](https://docs.astro.build/en/guides/styling/#tab-panel-1808)
- [Yarn](https://docs.astro.build/en/guides/styling/#tab-panel-1809)

```

npx astro add tailwind
```

```

pnpm astro add tailwind
```

```

yarn astro add tailwind
```

Then, import `tailwindcss` into `src/styles/global.css` (or another CSS file of your choosing) to make Tailwind classes available to your Astro project. This file including the import will be created by default if you used the `astro add tailwind` command to install the Vite plugin.

```

@import "tailwindcss";
```

Import this file in the pages where you want Tailwind to apply. This is often done in a layout component so that Tailwind styles can be used on all pages sharing that layout:

```

---

import "../styles/global.css";

---
```

### Upgrade from Tailwind 3

[Section titled Upgrade from Tailwind 3](https://docs.astro.build/en/guides/styling/#upgrade-from-tailwind-3)

Follow the steps to update an existing Astro project using Tailwind v3 (using the `@astrojs/tailwind` integration) to Tailwind 4 (using [the `@tailwindcss/vite` plugin](https://tailwindcss.com/docs/installation/framework-guides/astro)).

1. [Add Tailwind 4 support to your project](https://docs.astro.build/en/guides/styling/#add-tailwind-4) through the CLI for the latest version of Astro, or by adding the Vite plugin manually.

2. Uninstall the `@astrojs/tailwind` integration from your project:




- [npm](https://docs.astro.build/en/guides/styling/#tab-panel-1810)
- [pnpm](https://docs.astro.build/en/guides/styling/#tab-panel-1811)
- [Yarn](https://docs.astro.build/en/guides/styling/#tab-panel-1812)

```

npm uninstall @astrojs/tailwind
```

```

pnpm remove @astrojs/tailwind
```

```

yarn remove @astrojs/tailwind
```

3. Remove the `@astrojs/tailwind` integration from your `astro.config.mjs`:



```


import { defineConfig } from 'astro/config';

import tailwind from '@astrojs/tailwind';




export default defineConfig({

     // ...

     integrations: [tailwind()],

     // ...

});
```

4. Then, upgrade your project according to [Tailwind’s v4 upgrade guide](https://tailwindcss.com/docs/upgrade-guide#changes-from-v3).


### Legacy Tailwind 3 support

[Section titled Legacy Tailwind 3 support](https://docs.astro.build/en/guides/styling/#legacy-tailwind-3-support)

To add (or keep) support for Tailwind 3, you will need to have both `tailwindcss@3` and the official Astro Tailwind integration `@astrojs/tailwind` installed. Installing these dependencies manually is only used for legacy Tailwind 3 compatibility, and is not required for Tailwind 4. You will also need a [legacy Tailwind configuration](https://v3.tailwindcss.com/docs/configuration#creating-your-configuration-file):

1. Install Tailwind and the Astro Tailwind integration to your project dependencies using your preferred package manager:




- [npm](https://docs.astro.build/en/guides/styling/#tab-panel-1813)
- [pnpm](https://docs.astro.build/en/guides/styling/#tab-panel-1814)
- [Yarn](https://docs.astro.build/en/guides/styling/#tab-panel-1815)

```

npm install tailwindcss@3 @astrojs/tailwind
```

```

pnpm add tailwindcss@3 @astrojs/tailwind
```

```

yarn add tailwindcss@3 @astrojs/tailwind
```

2. Import the integration to your `astro.config.mjs` file, and add it to your `integrations[]` array:



```


import { defineConfig } from 'astro/config';

import tailwind from '@astrojs/tailwind';




export default defineConfig({

     // ...

     integrations: [tailwind()],

     // ...

});
```

3. Create a `tailwind.config.mjs` file in your project’s root directory. You can use the following command to generate a basic configuration file for you:




- [npm](https://docs.astro.build/en/guides/styling/#tab-panel-1816)
- [pnpm](https://docs.astro.build/en/guides/styling/#tab-panel-1817)
- [Yarn](https://docs.astro.build/en/guides/styling/#tab-panel-1818)

```

npx tailwindcss init
```

```

pnpm dlx tailwindcss init
```

```

yarn dlx tailwindcss init
```

4. Add the following basic configuration to your `tailwind.config.mjs` file:



```


/** @type {import('tailwindcss').Config} */

export default {

     content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],

     theme: {

       extend: {},

     },

     plugins: [],

};
```


![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Style rendered Markdown with Tailwind Typography](https://docs.astro.build/en/recipes/tailwind-rendered-markdown/)

## CSS Preprocessors

[Section titled CSS Preprocessors](https://docs.astro.build/en/guides/styling/#css-preprocessors)

Astro supports CSS preprocessors such as [Sass](https://sass-lang.com/), [Stylus](https://stylus-lang.com/), and [Less](https://lesscss.org/) through [Vite](https://vite.dev/guide/features.html#css-pre-processors).

### Sass and SCSS

[Section titled Sass and SCSS](https://docs.astro.build/en/guides/styling/#sass-and-scss)

```

npm install sass
```

Use `<style lang="scss">` or `<style lang="sass">` in `.astro` files.

### Stylus

[Section titled Stylus](https://docs.astro.build/en/guides/styling/#stylus)

```

npm install stylus
```

Use `<style lang="styl">` or `<style lang="stylus">` in `.astro` files.

### Less

[Section titled Less](https://docs.astro.build/en/guides/styling/#less)

```

npm install less
```

Use `<style lang="less">` in `.astro` files.

### LightningCSS

[Section titled LightningCSS](https://docs.astro.build/en/guides/styling/#lightningcss)

```

npm install lightningcss
```

Update your `vite` configuration in `astro.config.mjs`:

```

import { defineConfig } from 'astro/config'

export default defineConfig({

  vite: {

    css: {

      transformer: "lightningcss",

    },

  },

})
```

### In framework components

[Section titled In framework components](https://docs.astro.build/en/guides/styling/#in-framework-components)

You can also use all of the above CSS preprocessors within JS frameworks as well! Be sure to follow the patterns each framework recommends:

- **React** / **Preact**: `import Styles from './styles.module.scss';`
- **Vue**: `<style lang="scss">`
- **Svelte**: `<style lang="scss">`

## PostCSS

[Section titled PostCSS](https://docs.astro.build/en/guides/styling/#postcss)

Astro comes with PostCSS included as part of [Vite](https://vite.dev/guide/features.html#postcss). To configure PostCSS for your project, create a `postcss.config.cjs` file in the project root. You can import plugins using `require()` after installing them (for example `npm install autoprefixer`).

```

module.exports = {

  plugins: [\
\
    require('autoprefixer'),\
\
    require('cssnano'),\
\
  ],

};
```

## Frameworks and Libraries

[Section titled Frameworks and Libraries](https://docs.astro.build/en/guides/styling/#frameworks-and-libraries)

### 📘 React / Preact

[Section titled 📘 React / Preact](https://docs.astro.build/en/guides/styling/#-react--preact)

`.jsx` files support both global CSS and CSS Modules. To enable the latter, use the `.module.css` extension (or `.module.scss`/ `.module.sass` if using Sass).

```

import './global.css'; // include global CSS

import Styles from './styles.module.css'; // Use CSS Modules (must end in `.module.css`, `.module.scss`, or `.module.sass`!)
```

### 📗 Vue

[Section titled 📗 Vue](https://docs.astro.build/en/guides/styling/#-vue)

Vue in Astro supports the same methods as `vue-loader` does:

- [vue-loader - Scoped CSS](https://vue-loader.vuejs.org/guide/scoped-css.html)
- [vue-loader - CSS Modules](https://vue-loader.vuejs.org/guide/css-modules.html)

### 📕 Svelte

[Section titled 📕 Svelte](https://docs.astro.build/en/guides/styling/#-svelte)

Svelte in Astro also works exactly as expected: [Svelte Styling Docs](https://svelte.dev/docs#component-format-style).

## Markdown Styling

[Section titled Markdown Styling](https://docs.astro.build/en/guides/styling/#markdown-styling)

Any Astro styling methods are available to a [Markdown layout component](https://docs.astro.build/en/basics/layouts/#markdown-layouts), but different methods will have different styling effects on your page.

You can apply global styles to your Markdown content by adding [imported stylesheets](https://docs.astro.build/en/guides/styling/#external-styles) to the layout that wraps your page content. It is also possible to style your Markdown with [`<style is:global>` tags](https://docs.astro.build/en/guides/styling/#global-styles) in the layout component. Note that any styles added are subject to [Astro’s cascading order](https://docs.astro.build/en/guides/styling/#cascading-order), and you should check your rendered page carefully to ensure your styles are being applied as intended.

You can also add CSS integrations including [Tailwind](https://docs.astro.build/en/recipes/tailwind-rendered-markdown/). If you are using Tailwind, the [typography plugin](https://tailwindcss.com/docs/typography-plugin) can be useful for styling Markdown.

## Production

[Section titled Production](https://docs.astro.build/en/guides/styling/#production)

### Bundle control

[Section titled Bundle control](https://docs.astro.build/en/guides/styling/#bundle-control)

When Astro builds your site for production deployment, it minifies and combines your CSS into chunks. Each page on your site gets its own chunk, and additionally, CSS that is shared between multiple pages is further split off into their own chunks for reuse.

However, when you have several pages sharing styles, some shared chunks can become really small. If all of them were sent separately, it would lead to many stylesheets requests and affect site performance. Therefore, by default Astro will link only those in your HTML above 4kB in size as `<link rel="stylesheet">` tags, while inlining smaller ones into `<style type="text/css">`. This approach provides a balance between the number of additional requests and the volume of CSS that can be cached between pages.

You can configure the size at which stylesheets will be linked externally (in bytes) using the `assetsInlineLimit` vite build option. Note that this option affects script and image inlining as well.

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  vite: {

    build: {

      assetsInlineLimit: 1024,

    }

  };

});
```

If you would rather all project styles remain external, you can configure the `inlineStylesheets` build option.

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  build: {

    inlineStylesheets: 'never'

  }

});
```

You can also set this option to `'always'` which will inline all stylesheets.

## Advanced

[Section titled Advanced](https://docs.astro.build/en/guides/styling/#advanced)

### `?raw` CSS Imports

[Section titled ?raw CSS Imports](https://docs.astro.build/en/guides/styling/#raw-css-imports)

For advanced use cases, CSS can be read directly from disk without being bundled or optimized by Astro. This can be useful when you need complete control over some snippet of CSS, and need to bypass Astro’s automatic CSS handling.

This is not recommended for most users.

```

---

// Advanced example! Not recommended for most users.

import rawStylesCSS from '../styles/main.css?raw';

---

<style is:inline set:html={rawStylesCSS}></style>
```

See [Vite’s docs](https://vite.dev/guide/assets.html#importing-asset-as-string) for full details.

### `?url` CSS Imports

[Section titled ?url CSS Imports](https://docs.astro.build/en/guides/styling/#url-css-imports)

For advanced use cases, you can import a direct URL reference for a CSS file inside of your project `src/` directory. This can be useful when you need complete control over how a CSS file is loaded on the page. However, this will prevent the optimization of that CSS file with the rest of your page CSS .

This is not recommended for most users. Instead, place your CSS files inside of `public/` to get a consistent URL reference.

```

---

// Advanced example! Not recommended for most users.

import stylesUrl from '../styles/main.css?url';

---

<link rel="preload" href={stylesUrl} as="style">

<link rel="stylesheet" href={stylesUrl}>
```

See [Vite’s docs](https://vite.dev/guide/assets.html#importing-asset-as-url) for full details.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Sessions Guide
[Skip to content](https://docs.astro.build/en/guides/sessions/#_top)

# Sessions

**Added in:** `astro@5.7.0`

Sessions are used to share data between requests for [on-demand rendered pages](https://docs.astro.build/en/guides/on-demand-rendering/).

Unlike [`cookies`](https://docs.astro.build/en/guides/on-demand-rendering/#cookies), sessions are stored on the server, so you can store larger amounts of data without worrying about size limits or security issues. They are useful for storing things like user data, shopping carts, and form state, and they work without any client-side JavaScript:

```

---

export const prerender = false; // Not needed with 'server' output

const cart = await Astro.session?.get('cart');

---

<a href="/checkout">🛒 {cart?.length ?? 0} items</a>
```

## Configuring sessions

[Section titled Configuring sessions](https://docs.astro.build/en/guides/sessions/#configuring-sessions)

Sessions require a storage driver to store the session data. The [Node](https://docs.astro.build/en/guides/integrations-guide/node/#sessions), [Cloudflare](https://docs.astro.build/en/guides/integrations-guide/cloudflare/#sessions), and [Netlify](https://docs.astro.build/en/guides/integrations-guide/netlify/#sessions) adapters automatically configure a default driver for you, but other adapters currently require you to [specify a driver manually](https://docs.astro.build/en/reference/configuration-reference/#sessiondriver).

```

  {

    adapter: vercel(),

    session: {

      driver: "redis",

    },

  }
```

See [the `session` configuration option](https://docs.astro.build/en/reference/configuration-reference/#session-options) for more details on setting a storage driver, and other configurable options.

## Interacting with session data

[Section titled Interacting with session data](https://docs.astro.build/en/guides/sessions/#interacting-with-session-data)

The [`session` object](https://docs.astro.build/en/reference/api-reference/#session) allows you to interact with the stored user state (e.g. adding items to a shopping cart) and the session ID (e.g. deleting the session ID cookie when logging out). The object is accessible as `Astro.session` in your Astro components and pages and as `context.session` object in API endpoints, middleware, and actions.

The session is generated automatically when it is first used and can be regenerated at any time with [`session.regenerate()`](https://docs.astro.build/en/reference/api-reference/#regenerate) or destroyed with [`session.destroy()`](https://docs.astro.build/en/reference/api-reference/#destroy).

For many use cases, you will only need to use [`session.get()`](https://docs.astro.build/en/reference/api-reference/#get) and [`session.set()`](https://docs.astro.build/en/reference/api-reference/#set).

See [the Sessions API reference](https://docs.astro.build/en/reference/api-reference/#session) for more details.

### Astro components and pages

[Section titled Astro components and pages](https://docs.astro.build/en/guides/sessions/#astro-components-and-pages)

In `.astro` components and pages, you can access the session object via the global `Astro` object. For example, to display the number of items in a shopping cart:

```

---

export const prerender = false; // Not needed with 'server' output

const cart = await Astro.session?.get('cart');

---

<a href="/checkout">🛒 {cart?.length ?? 0} items</a>
```

### API endpoints

[Section titled API endpoints](https://docs.astro.build/en/guides/sessions/#api-endpoints)

In API endpoints, the session object is available on the `context` object. For example, to add an item to a shopping cart:

```

export async function POST(context: APIContext) {

  const cart = await context.session?.get('cart') || [];

  const data = await context.request.json<{ item: string }>();

  if(!data?.item) {

    return new Response('Item is required', { status: 400 });

  }

  cart.push(data.item);

  await context.session?.set('cart', cart);

  return Response.json(cart);

}
```

### Actions

[Section titled Actions](https://docs.astro.build/en/guides/sessions/#actions)

In actions, the session object is available on the `context` object. For example, to add an item to a shopping cart:

```

import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';

export const server = {

  addToCart: defineAction({

    input: z.object({ productId: z.string() }),

    handler: async (input, context) => {

      const cart = await context.session?.get('cart');

      cart.push(input.productId);

      await context.session?.set('cart', cart);

      return cart;

    },

  }),

};
```

### Middleware

[Section titled Middleware](https://docs.astro.build/en/guides/sessions/#middleware)

In middleware, the session object is available on the `context` object. For example, to set the last visit time in the session:

```

import { defineMiddleware } from 'astro:middleware';

export const onRequest = defineMiddleware(async (context, next) => {

  context.session?.set('lastVisit', new Date());

  return next();

});
```

## Session data types

[Section titled Session data types](https://docs.astro.build/en/guides/sessions/#session-data-types)

By default session data is untyped, and you can store arbitrary data in any key. Values are serialized and deserialized using [devalue](https://github.com/Rich-Harris/devalue), which is the same library used in content collections and actions. This means that supported types are the same, and include strings, numbers, `Date`, `Map`, `Set`, `URL`, arrays, and plain objects.

You can optionally define TypeScript types for your session data by creating a `src/env.d.ts` file and adding a declaration for the `App.SessionData` type:

```

declare namespace App {

  interface SessionData {

    user: {

      id: string;

      name: string;

    };

    cart: string[];

  }

}
```

This will allow you to access the session data with type-checking and auto-completion in your editor:

```

---

const cart = await Astro.session?.get('cart');

// const cart: string[] | undefined

const something = await Astro.session?.get('something');

// const something: any

Astro.session?.set('user', { id: 1, name: 'Houston' });

// Error: Argument of type '{ id: number; name: string }' is not assignable to parameter of type '{ id: string; name: string; }'.

---
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Imports Guide
[Skip to content](https://docs.astro.build/en/guides/imports/#_top)

# Imports reference

Astro supports most static assets with zero configuration required. You can use the `import` statement anywhere in your project JavaScript (including your Astro frontmatter) and Astro will include a built, optimized copy of that static asset in your final build. `@import` is also supported inside of CSS & `<style>` tags.

## Supported File Types

[Section titled Supported File Types](https://docs.astro.build/en/guides/imports/#supported-file-types)

The following file types are supported out-of-the-box by Astro:

- Astro Components ( `.astro`)
- Markdown ( `.md`, `.markdown`, etc.)
- JavaScript ( `.js`, `.mjs`)
- TypeScript ( `.ts`)
- NPM Packages
- JSON ( `.json`)
- CSS ( `.css`)
- CSS Modules ( `.module.css`)
- Images & Assets ( `.svg`, `.jpg`, `.png`, etc.)

Additionally, you can extend Astro to add support for different [UI Frameworks](https://docs.astro.build/en/guides/framework-components/) like React, Svelte and Vue components. You can also install the [Astro MDX integration](https://docs.astro.build/en/guides/integrations-guide/mdx/) or the [Astro Markdoc integration](https://docs.astro.build/en/guides/integrations-guide/markdoc/) to use `.mdx` or `.mdoc` files in your project.

### Files in `public/`

[Section titled Files in public/](https://docs.astro.build/en/guides/imports/#files-in-public)

You can place any static asset in the [`public/` directory](https://docs.astro.build/en/basics/project-structure/#public) of your project, and Astro will copy it directly into your final build untouched. `public/` files are not built or bundled by Astro, which means that any type of file is supported.

You can reference a `public/` file by a URL path directly in your HTML templates.

```

// To link to /public/reports/annual/2024.pdf

Download the <a href="/reports/annual/2024.pdf">2024 annual statement as a PDF</a>.

// To display /public/assets/cats/ginger.jpg

<img src="/assets/cats/ginger.jpg" alt="An orange cat sleeping on a bed.">
```

## Import statements

[Section titled Import statements](https://docs.astro.build/en/guides/imports/#import-statements)

Astro uses ESM, the same [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#syntax) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax supported in the browser.

### JavaScript

[Section titled JavaScript](https://docs.astro.build/en/guides/imports/#javascript)

```

import { getUser } from './user.js';
```

JavaScript can be imported using normal ESM `import` & `export` syntax.

### TypeScript

[Section titled TypeScript](https://docs.astro.build/en/guides/imports/#typescript)

```

import { getUser } from './user';

import type { UserType } from './user';
```

Astro includes built-in support for [TypeScript](https://www.typescriptlang.org/). You can import `.ts` and `.tsx` files directly in your Astro project, and even write TypeScript code directly inside your [Astro component script](https://docs.astro.build/en/basics/astro-components/#the-component-script) and any [script tags](https://docs.astro.build/en/guides/client-side-scripts/).

**Astro doesn’t perform any type checking itself.** Type checking should be taken care of outside of Astro, either by your IDE or through a separate script. For type checking Astro files, the [`astro check` command](https://docs.astro.build/en/reference/cli-reference/#astro-check) is provided.

Read more about [TypeScript support in Astro](https://docs.astro.build/en/guides/typescript/).

### NPM Packages

[Section titled NPM Packages](https://docs.astro.build/en/guides/imports/#npm-packages)

If you’ve installed an NPM package, you can import it in Astro.

```

---

import { Icon } from 'astro-icon';

---
```

If a package was published using a legacy format, Astro will try to convert the package to ESM so that `import` statements work. In some cases, you may need to adjust your [`vite` config](https://docs.astro.build/en/reference/configuration-reference/#vite) for it to work.

### JSON

[Section titled JSON](https://docs.astro.build/en/guides/imports/#json)

```

// Load the JSON object via the default export

import json from './data.json';
```

Astro supports importing JSON files directly into your application. Imported files return the full JSON object in the default import.

### CSS

[Section titled CSS](https://docs.astro.build/en/guides/imports/#css)

```

// Load and inject 'style.css' onto the page

import './style.css';
```

Astro supports importing CSS files directly into your application. Imported styles expose no exports, but importing one will automatically add those styles to the page. This works for all CSS files by default, and can support compile-to-CSS languages like Sass & Less via plugins.

Read more about advanced CSS import use cases such as a direct URL reference for a CSS file, or importing CSS as a string in the [Styling guide](https://docs.astro.build/en/guides/styling/#advanced).

### CSS Modules

[Section titled CSS Modules](https://docs.astro.build/en/guides/imports/#css-modules)

```

// 1. Converts './style.module.css' classnames to unique, scoped values.

// 2. Returns an object mapping the original classnames to their final, scoped value.

import styles from './style.module.css';

// This example uses JSX, but you can use CSS Modules with any framework.

return <div className={styles.error}>Your Error Message</div>;
```

Astro supports CSS Modules using the `[name].module.css` naming convention. Like any CSS file, importing one will automatically apply that CSS to the page. However, CSS Modules export a special default `styles` object that maps your original classnames to unique identifiers.

CSS Modules help you enforce component scoping & isolation on the frontend with uniquely-generated class names for your stylesheets.

### Other Assets

[Section titled Other Assets](https://docs.astro.build/en/guides/imports/#other-assets)

```

import imgReference from './image.png'; // imgReference === '/src/image.png'

import svgReference from './image.svg'; // svgReference === '/src/image.svg'

import txtReference from './words.txt'; // txtReference === '/src/words.txt'

// This example uses JSX, but you can use import references with any framework.

<img src={imgReference.src} alt="image description" />;
```

All other assets not explicitly mentioned above can be imported via ESM `import` and will return a URL reference to the final built asset. This can be useful for referencing non-JS assets by URL, like creating an image element with a `src` attribute pointing to that image.

It can also be useful to place images in the `public/` folder as explained on the [project-structure page](https://docs.astro.build/en/basics/project-structure/#public).

Read more about appending Vite import parameters (e.g. `?url`, `?raw`) in [Vite’s static asset handling guide](https://vite.dev/guide/assets.html).

## Aliases

[Section titled Aliases](https://docs.astro.build/en/guides/imports/#aliases)

An **alias** is a way to create shortcuts for your imports.

Aliases can help improve the development experience in codebases with many directories or relative imports.

```

---

import Button from '../../components/controls/Button.astro';

import logoUrl from '../../assets/logo.png?url';

---
```

In this example, a developer would need to understand the tree relationship between `src/pages/about/company.astro`, `src/components/controls/Button.astro`, and `src/assets/logo.png`. And then, if the `company.astro` file were to be moved, these imports would also need to be updated.

You can add import aliases in `tsconfig.json`.

```

{

  "compilerOptions": {

    "baseUrl": ".",

    "paths": {

      "@components/*": ["src/components/*"],

      "@assets/*": ["src/assets/*"]

    }

  }

}
```

The development server will automatically restart after this configuration change. You can now import using the aliases anywhere in your project:

```

---

import Button from '@components/controls/Button.astro';

import logoUrl from '@assets/logo.png?url';

---
```

These aliases are also integrated automatically into [VS Code](https://code.visualstudio.com/docs/languages/jsconfig) and other editors.

## `import.meta.glob()`

[Section titled import.meta.glob()](https://docs.astro.build/en/guides/imports/#importmetaglob)

[Vite’s `import.meta.glob()`](https://vite.dev/guide/features.html#glob-import) is a way to import many files at once using glob patterns to find matching file paths.

`import.meta.glob()` takes a relative [glob pattern](https://docs.astro.build/en/guides/imports/#glob-patterns) matching the local files you’d like to import as a parameter. It returns an array of each matching file’s exports. To load all matched modules up front, pass `{ eager: true }` as the second argument:

```

---

// imports all files that end with `.md` in `./src/pages/post/`

const matches = import.meta.glob('../pages/post/*.md', { eager: true });

const posts = Object.values(matches);

---

<!-- Renders an <article> for the first 5 blog posts -->

<div>

{posts.slice(0, 4).map((post) => (

  <article>

    <h2>{post.frontmatter.title}</h2>

    <p>{post.frontmatter.description}</p>

    <a href={post.url}>Read more</a>

  </article>

))}

</div>
```

Astro components imported using `import.meta.glob` are of type [`AstroInstance`](https://docs.astro.build/en/guides/imports/#astro-files). You can render each component instance using its `default` property:

```

---

// imports all files that end with `.astro` in `./src/components/`

const components = Object.values(import.meta.glob('../components/*.astro', { eager: true }));

---

<!-- Display all of our components -->

{components.map((component) => (

  <div>

    <component.default size={24} />

  </div>

))}
```

### Supported Values

[Section titled Supported Values](https://docs.astro.build/en/guides/imports/#supported-values)

Vite’s `import.meta.glob()` function only supports static string literals. It does not support dynamic variables and string interpolation.

A common workaround is to instead import a larger set of files that includes all the files you need, then filter them:

```

---

const { postSlug } = Astro.props;

const pathToMyFeaturedPost = `src/pages/blog/${postSlug}.md`;

const posts = Object.values(import.meta.glob("../pages/blog/*.md", { eager: true }));

const myFeaturedPost = posts.find(post => post.file.includes(pathToMyFeaturedPost));

---

<p>

  Take a look at my favorite post, <a href={myFeaturedPost.url}>{myFeaturedPost.frontmatter.title}</a>!

</p>
```

### Import type utilities

[Section titled Import type utilities](https://docs.astro.build/en/guides/imports/#import-type-utilities)

#### Markdown files

[Section titled Markdown files](https://docs.astro.build/en/guides/imports/#markdown-files)

Markdown files loaded with `import.meta.glob()` return the following `MarkdownInstance` interface:

```

export interface MarkdownInstance<T extends Record<string, any>> {

  /* Any data specified in this file's YAML/TOML frontmatter */

  frontmatter: T;

  /* The absolute file path of this file */

  file: string;

  /* The rendered path of this file */

  url: string | undefined;

  /* Astro Component that renders the contents of this file */

  Content: AstroComponentFactory;

  /** (Markdown only) Raw Markdown file content, excluding layout HTML and YAML/TOML frontmatter */

  rawContent(): string;

  /** (Markdown only) Markdown file compiled to HTML, excluding layout HTML */

  compiledContent(): string;

  /* Function that returns an array of the h1...h6 elements in this file */

  getHeadings(): Promise<{ depth: number; slug: string; text: string }[]>;

  default: AstroComponentFactory;

}
```

You can optionally provide a type for the `frontmatter` variable using a TypeScript generic.

```

---

import type { MarkdownInstance } from 'astro';

interface Frontmatter {

    title: string;

    description?: string;

}

const posts = Object.values(import.meta.glob<MarkdownInstance<Frontmatter>>('./posts/**/*.md', { eager: true }));

---

<ul>

  {posts.map(post => <li>{post.frontmatter.title}</li>)}

</ul>
```

#### Astro files

[Section titled Astro files](https://docs.astro.build/en/guides/imports/#astro-files)

Astro files have the following interface:

```

export interface AstroInstance {

  /* The file path of this file */

  file: string;

  /* The URL for this file (if it is in the pages directory) */

  url: string | undefined;

  default: AstroComponentFactory;

}
```

#### Other files

[Section titled Other files](https://docs.astro.build/en/guides/imports/#other-files)

Other files may have various different interfaces, but `import.meta.glob()` accepts a TypeScript generic if you know exactly what an unrecognized file type contains.

```

---

interface CustomDataFile {

  default: Record<string, any>;

}

const data = import.meta.glob<CustomDataFile>('../data/**/*.js');

---
```

### Glob Patterns

[Section titled Glob Patterns](https://docs.astro.build/en/guides/imports/#glob-patterns)

A glob pattern is a file path that supports special wildcard characters. This is used to reference multiple files in your project at once.

For example, the glob pattern `./pages/**/*.{md,mdx}` starts within the pages subdirectory, looks through all of its subdirectories ( `/**`), and matches any filename ( `/*`) that ends in either `.md` or `.mdx` ( `.{md,mdx}`).

#### Glob Patterns in Astro

[Section titled Glob Patterns in Astro](https://docs.astro.build/en/guides/imports/#glob-patterns-in-astro)

To use with `import.meta.glob()`, the glob pattern must be a string literal and cannot contain any variables.

Additionally, glob patterns must begin with one of the following:

- `./` (to start in the current directory)
- `../` (to start in the parent directory)
- `/` (to start at the root of the project)

[Read more about the glob pattern syntax](https://github.com/micromatch/picomatch#globbing-features).

### `import.meta.glob()` vs `getCollection()`

[Section titled import.meta.glob() vs getCollection()](https://docs.astro.build/en/guides/imports/#importmetaglob-vs-getcollection)

[Content collections](https://docs.astro.build/en/guides/content-collections/) provide a [`getCollection()` API](https://docs.astro.build/en/reference/modules/astro-content/#getcollection) for loading multiple files instead of `import.meta.glob()`. If your content files (e.g. Markdown, MDX, Markdoc) are located in collections within the `src/content/` directory, use `getCollection()` to [query a collection](https://docs.astro.build/en/guides/content-collections/#querying-collections) and return content entries.

## WASM

[Section titled WASM](https://docs.astro.build/en/guides/imports/#wasm)

```

// Loads and initializes the requested WASM file

const wasm = await WebAssembly.instantiateStreaming(fetch('/example.wasm'));
```

Astro supports loading WASM files directly into your application using the browser’s [`WebAssembly`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly) API.

## Node Builtins

[Section titled Node Builtins](https://docs.astro.build/en/guides/imports/#node-builtins)

Astro supports Node.js built-ins, with some limitations, using Node’s newer `node:` prefix. There may be differences between development and production, and some features may be incompatible with on-demand rendering. Some [adapters](https://docs.astro.build/en/guides/on-demand-rendering/) may also be incompatible with these built-ins modules or require configuration to support a subset (e.g., [Cloudflare Workers](https://docs.astro.build/en/guides/integrations-guide/cloudflare/) or [Deno](https://github.com/denoland/deno-astro-adapter)).

The following example imports the `util` module from Node to parse a media type (MIME):

```

---

// Example: import the "util" built-in from Node.js

import util from 'node:util';

export interface Props {

  mimeType: string,

}

const mime = new util.MIMEType(Astro.props.mimeType)

---

<span>Type: {mime.type}</span>

<span>SubType: {mime.subtype}</span>
```

## Extending file type support

[Section titled Extending file type support](https://docs.astro.build/en/guides/imports/#extending-file-type-support)

With **Vite** and compatible **Rollup** plugins, you can import file types which aren’t natively supported by Astro. Learn where to find the plugins you need in the [Finding Plugins](https://vite.dev/guide/using-plugins.html#finding-plugins) section of the Vite Documentation.

![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Installing a Vite or Rollup plugin](https://docs.astro.build/en/recipes/add-yaml-support/)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Backend Services
[Skip to content](https://docs.astro.build/en/guides/backend/#_top)

# Use a backend service with Astro

**Ready to add features like authentication, monitoring, storage, or data to your Astro project?** Follow one of our guides to integrate a backend service.

## Backend service guides

[Section titled Backend service guides](https://docs.astro.build/en/guides/backend/#backend-service-guides)

Note that many of these pages are **stubs**: they’re collections of resources waiting for your contribution!

- ![](https://docs.astro.build/logos/appwriteio.svg)



### [Appwrite](https://docs.astro.build/en/guides/backend/appwriteio/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Firebase](https://docs.astro.build/en/guides/backend/google-firebase/)

- ![](https://docs.astro.build/logos/neon.svg)



### [Neon](https://docs.astro.build/en/guides/backend/neon/)

- ![](https://docs.astro.build/logos/sentry.svg)



### [Sentry](https://docs.astro.build/en/guides/backend/sentry/)

- ![](https://docs.astro.build/logos/supabase.svg)



### [Supabase](https://docs.astro.build/en/guides/backend/supabase/)

- ![](https://docs.astro.build/logos/turso.svg)



### [Turso](https://docs.astro.build/en/guides/backend/turso/)

- ![](https://docs.astro.build/logos/xata.svg)



### [Xata](https://docs.astro.build/en/guides/backend/xata/)


## What is a backend service?

[Section titled What is a backend service?](https://docs.astro.build/en/guides/backend/#what-is-a-backend-service)

A backend service is a cloud-based system that helps you build and manage your backend infrastructure. It provides a set of tools and services for managing databases, user authentication, and other server-side functionality. This enables you to focus on building your applications without having to worry about managing the underlying infrastructure.

## Why would I use a backend service?

[Section titled Why would I use a backend service?](https://docs.astro.build/en/guides/backend/#why-would-i-use-a-backend-service)

You might want to consider a backend service if your project has complex server-side needs, for example:

- user sign-ups and authentication
- persistent data storage
- user-uploaded asset storage
- API generation
- realtime communication
- application monitoring

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## RSS Feed Setup
[Skip to content](https://docs.astro.build/en/recipes/rss/#_top)

# Add an RSS feed

Astro supports fast, automatic RSS feed generation for blogs and other content websites. RSS feeds provide an easy way for users to subscribe to your content.

## Setting up `@astrojs/rss`

[Section titled Setting up @astrojs/rss](https://docs.astro.build/en/recipes/rss/#setting-up-astrojsrss)

The package [`@astrojs/rss`](https://github.com/withastro/astro/tree/main/packages/astro-rss) provides helpers for generating RSS feeds using [API endpoints](https://docs.astro.build/en/guides/endpoints/#static-file-endpoints). This unlocks both static builds _and_ on-demand generation when using an [SSR adapter](https://docs.astro.build/en/guides/on-demand-rendering/).

1. Install `@astrojs/rss` using your preferred package manager:




- [npm](https://docs.astro.build/en/recipes/rss/#tab-panel-1729)
- [pnpm](https://docs.astro.build/en/recipes/rss/#tab-panel-1730)
- [Yarn](https://docs.astro.build/en/recipes/rss/#tab-panel-1731)

```

npm install @astrojs/rss
```

```

pnpm add @astrojs/rss
```

```

yarn add @astrojs/rss
```

2. Create a file in `src/pages/` with a name of your choice and the extension `.xml.js` to be used as the output URL for your feed. Some common RSS feed URL names are `feed.xml` or `rss.xml`.

The example file below `src/pages/rss.xml.js` will create an RSS feed at `site/rss.xml`.

3. Import the `rss()` helper from the `@astrojs/rss` package into your `.xml.js` file and export a function that returns it using the following parameters:



```


import rss from '@astrojs/rss';




export function GET(context) {

     return rss({

       // `<title>` field in output xml

       title: 'Buzz’s Blog',

       // `<description>` field in output xml

       description: 'A humble Astronaut’s guide to the stars',

       // Pull in your project "site" from the endpoint context

       // https://docs.astro.build/en/reference/api-reference/#site

       site: context.site,

       // Array of `<item>`s in output xml

       // See "Generating items" section for examples using content collections and glob imports

       items: [],

       // (optional) inject custom xml

       customData: `<language>en-us</language>`,

     });

}
```


See the [`@astrojs/rss` README](https://github.com/withastro/astro/tree/main/packages/astro-rss) for the full configuration reference.

## Generating `items`

[Section titled Generating items](https://docs.astro.build/en/recipes/rss/#generating-items)

The `items` field accepts a list of RSS feed objects, which can be generated from content collections entries using `getCollection()` or from your page files using `pagesGlobToRssItems()`.

The RSS feed standard format includes metadata for each published item, including values such as:

- `title`: The title of the entry. Optional only if a `description` is set. Otherwise, required.
- `description`: A short excerpt from or describing the entry. Optional only if a `title` is set. Otherwise, required.
- `link`: A URL to the original source of the entry. (optional)
- `pubDate`: The date of publication of the entry. (optional)
- `content`: The full content of your post. (optional)

See the [`items` configuration reference](https://github.com/withastro/astro/tree/main/packages/astro-rss#items) for a complete list of options.

### Using content collections

[Section titled Using content collections](https://docs.astro.build/en/recipes/rss/#using-content-collections)

To create an RSS feed of pages managed in [content collections](https://docs.astro.build/en/guides/content-collections/), use the `getCollection()` function to retrieve the data required for your `items` array. You will need to specify the values for each desired property (e.g. `title`, `description`) from the returned data.

```

import rss from '@astrojs/rss';

import { getCollection } from 'astro:content';

export async function GET(context) {

  const blog = await getCollection('blog');

  return rss({

    title: 'Buzz’s Blog',

    description: 'A humble Astronaut’s guide to the stars',

    site: context.site,

    items: blog.map((post) => ({

      title: post.data.title,

      pubDate: post.data.pubDate,

      description: post.data.description,

      // Compute RSS link from post `id`

      // This example assumes all posts are rendered as `/blog/[id]` routes

      link: `/blog/${post.id}/`,

    })),

  });

}
```

Optional: replace your existing blog collection schema to enforce the expected RSS properties.

To ensure that every blog entry produces a valid RSS feed item, you can optionally import and apply `rssSchema` instead of defining each individual property of your schema.

```

import { defineCollection } from 'astro:content';

import { rssSchema } from '@astrojs/rss';

const blog = defineCollection({

  schema: rssSchema,

});

export const collections = { blog };
```

### Using glob imports

[Section titled Using glob imports](https://docs.astro.build/en/recipes/rss/#using-glob-imports)

**Added in:** `@astrojs/rss@2.1.0`

To create an RSS feed from documents in `src/pages/`, use the `pagesGlobToRssItems()` helper. This accepts an [`import.meta.glob`](https://vite.dev/guide/features.html#glob-import) result and outputs an array of valid RSS feed items (see [more about writing glob patterns](https://docs.astro.build/en/guides/imports/#glob-patterns) for specifying which pages to include).

```

import rss, { pagesGlobToRssItems } from '@astrojs/rss';

export async function GET(context) {

  return rss({

    title: 'Buzz’s Blog',

    description: 'A humble Astronaut’s guide to the stars',

    site: context.site,

    items: await pagesGlobToRssItems(

      import.meta.glob('./blog/*.{md,mdx}'),

    ),

  });

}
```

### Including full post content

[Section titled Including full post content](https://docs.astro.build/en/recipes/rss/#including-full-post-content)

**Added in:** `astro@1.6.14`

The `content` key contains the full content of the post as HTML. This allows you to make your entire post content available to RSS feed readers.

When using content collections, render the post `body` using a standard Markdown parser like [`markdown-it`](https://github.com/markdown-it/markdown-it) and sanitize the result, including any extra tags (e.g. `<img>`) needed to render your content:

```

import rss from '@astrojs/rss';

import { getCollection } from 'astro:content';

import sanitizeHtml from 'sanitize-html';

import MarkdownIt from 'markdown-it';

const parser = new MarkdownIt();

export async function GET(context) {

  const blog = await getCollection('blog');

  return rss({

    title: 'Buzz’s Blog',

    description: 'A humble Astronaut’s guide to the stars',

    site: context.site,

    items: blog.map((post) => ({

      link: `/blog/${post.id}/`,

      // Note: this will not process components or JSX expressions in MDX files.

      content: sanitizeHtml(parser.render(post.body), {

        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img'])

      }),

      ...post.data,

    })),

  });

}
```

When using glob imports with Markdown, you may use the `compiledContent()` helper to retrieve the rendered HTML for sanitization. Note: this feature is **not** supported for MDX files.

```

import rss from '@astrojs/rss';

import sanitizeHtml from 'sanitize-html';

export async function GET(context) {

  const postImportResult = import.meta.glob('../posts/**/*.md', { eager: true });

  const posts = Object.values(postImportResult);

  return rss({

    title: 'Buzz’s Blog',

    description: 'A humble Astronaut’s guide to the stars',

    site: context.site,

    items: await Promise.all(posts.map(async (post) => ({

      link: post.url,

      content: sanitizeHtml((await post.compiledContent())),

      ...post.frontmatter,

    }))),

  });

}
```

## Removing trailing slashes

[Section titled Removing trailing slashes](https://docs.astro.build/en/recipes/rss/#removing-trailing-slashes)

Astro’s RSS feed produces links with a trailing slash by default, no matter what value you have configured for `trailingSlash`. This means that your RSS links may not match your post URLs exactly.

If you have set `trailingSlash: "never"` on your `astro.config.mjs`, set `trailingSlash: false` in the `rss()` helper so that your feed matches your project configuration.

```

import rss from '@astrojs/rss';

export function GET(context) {

  const posts = Object.values(postImportResult);

  return rss({

    title: 'Buzz’s Blog',

    description: 'A humble Astronaut’s guide to the stars',

    site: context.site,

    trailingSlash: false,

    items: posts.map((post) => ({

      link: post.url,

      ...post.frontmatter,

    })),

  });

}
```

## Adding a stylesheet

[Section titled Adding a stylesheet](https://docs.astro.build/en/recipes/rss/#adding-a-stylesheet)

Style your RSS feed for a more pleasant user experience when viewing the file in your browser.

Use the `rss` function’s `stylesheet` option to specify an absolute path to your stylesheet.

```

rss({

  // ex. use your stylesheet from "public/rss/styles.xsl"

  stylesheet: '/rss/styles.xsl',

  // ...

});
```

## Enabling RSS feed auto-discovery

[Section titled Enabling RSS feed auto-discovery](https://docs.astro.build/en/recipes/rss/#enabling-rss-feed-auto-discovery)

[RSS autodiscovery](https://www.rssboard.org/rss-autodiscovery) allows browsers and other software to automatically find a site’s RSS feed from the main URL.

To enable, add a `<link>` tag with the following attributes to your site’s `head` element:

```

<link

    rel="alternate"

    type="application/rss+xml"

    title="Your Site's Title"

    href={new URL("rss.xml", Astro.site)}

/>
```

With this tag, readers of your blog can enter your site’s base URL into their RSS reader to subscribe to your posts without needing the specific URL of your RSS feed.

## Next Steps

[Section titled Next Steps](https://docs.astro.build/en/recipes/rss/#next-steps)

After visiting your feed in the browser at `your-domain.com/rss.xml` and confirming that you can see data for each of your posts, you can now [promote your feed on your website](https://medium.com/samsung-internet-dev/add-rss-feeds-to-your-website-to-keep-your-core-readers-engaged-3179dca9c91e#:~:text=com/~deno%2Drss-,Advertising%20your%20RSS%20feed,-Now%20you%20have). Adding the standard RSS icon to your site lets your readers know that they can subscribe to your posts in their own feed reader.

## Resources

[Section titled Resources](https://docs.astro.build/en/recipes/rss/#resources)

- [RSS Feeds](https://aboutfeeds.com/)

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Media Integration
[Skip to content](https://docs.astro.build/en/guides/media/#_top)

# Use a DAM with Astro

**Ready to connect a headless Digital Asset Manager (DAM) to your Astro project?** Follow one of our guides to integrate a hosted media system.

## Hosted Media Guides

[Section titled Hosted Media Guides](https://docs.astro.build/en/guides/media/#hosted-media-guides)

Note that many of these pages are **stubs**: they’re collections of resources waiting for your contribution!

- ![](https://docs.astro.build/logos/cloudinary.svg)



### [Cloudinary](https://docs.astro.build/en/guides/media/cloudinary/)


## Why use a DAM or hosted media?

[Section titled Why use a DAM or hosted media?](https://docs.astro.build/en/guides/media/#why-use-a-dam-or-hosted-media)

Using a DAM, or Digital Asset Manager, helps individuals, teams, and organizations manage their image and video assets from a central location much like a [CMS](https://docs.astro.build/en/guides/cms/).

The difference is the type of content being managed: a DAM would primarily manage images, videos, other media assets like 3D models, and any metadata associated with those assets.

This can be useful particularly when using a single source of truth for your assets between multiple web or mobile properties. This is important if you’re part of an organization that requires multiple teams to use the same assets, or are integrating into other content systems like a PIM (Product Information Manager) to connect your assets to products.

## Which hosted media systems or DAMs work well with Astro?

[Section titled Which hosted media systems or DAMs work well with Astro?](https://docs.astro.build/en/guides/media/#which-hosted-media-systems-or-dams-work-well-with-astro)

Much like when using a CMS, as Astro handles the _presentation_ of your content, you’ll want to use a headless DAM that allows you to fetch and interact with your assets via an API or SDK.

Some headless DAMs, like Cloudinary, provide an Astro [integration](https://docs.astro.build/en/guides/integrations-guide/) that allows you to easily fetch your assets as well as display them on your website or app.

## Can I use Astro without a hosted media system or DAM?

[Section titled Can I use Astro without a hosted media system or DAM?](https://docs.astro.build/en/guides/media/#can-i-use-astro-without-a-hosted-media-system-or-dam)

Yes! Astro provides built-in ways to [store images](https://docs.astro.build/en/guides/images/#where-to-store-images), including support for referencing remote images.

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Prefetching Guide
[Skip to content](https://docs.astro.build/en/guides/prefetch/#_top)

# Prefetch

Page load times play a big role in the usability and overall enjoyment of a site. Astro’s **opt-in prefetching** brings the benefits of near-instant page navigations to your multi-page application (MPA) as your visitors interact with the site.

## Enable prefetching

[Section titled Enable prefetching](https://docs.astro.build/en/guides/prefetch/#enable-prefetching)

You can enable prefetching with the `prefetch` config:

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  prefetch: true

});
```

A prefetch script will be added to all pages of your site. You can then add the `data-astro-prefetch` attribute to any `<a />` links on your site to opt-in to prefetching. When you hover over the link, the script will fetch the page in the background.

```

<a href="/about" data-astro-prefetch>
```

Note that prefetching only works for links within your site, and not external links.

## Prefetch configuration

[Section titled Prefetch configuration](https://docs.astro.build/en/guides/prefetch/#prefetch-configuration)

The `prefetch` config also accepts an option object to further customize prefetching.

### Prefetch strategies

[Section titled Prefetch strategies](https://docs.astro.build/en/guides/prefetch/#prefetch-strategies)

Astro supports 4 prefetch strategies for various use cases:

- `hover` (default): Prefetch when you hover over or focus on the link.
- `tap`: Prefetch just before you click on the link.
- `viewport`: Prefetch as the links enter the viewport.
- `load`: Prefetch all links on the page after the page is loaded.

You can specify a strategy for an individual link by passing it to the `data-astro-prefetch` attribute:

```

<a href="/about" data-astro-prefetch="tap">About</a>
```

Each strategy is fine-tuned to only prefetch when needed and save your users’ bandwidth. For example:

- If a visitor is using [data saver mode](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) or has a [slow connection](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType), prefetch will fallback to the `tap` strategy.
- Quickly hovering or scrolling over links will not prefetch them.

### Default prefetch strategy

[Section titled Default prefetch strategy](https://docs.astro.build/en/guides/prefetch/#default-prefetch-strategy)

The default prefetch strategy when adding the `data-astro-prefetch` attribute is `hover`. To change it, you can configure [`prefetch.defaultStrategy`](https://docs.astro.build/en/reference/configuration-reference/#prefetchdefaultstrategy) in your `astro.config.mjs` file:

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  prefetch: {

    defaultStrategy: 'viewport'

  }

});
```

### Prefetch all links by default

[Section titled Prefetch all links by default](https://docs.astro.build/en/guides/prefetch/#prefetch-all-links-by-default)

If you want to prefetch all links, including those without the `data-astro-prefetch` attribute, you can set [`prefetch.prefetchAll`](https://docs.astro.build/en/reference/configuration-reference/#prefetchprefetchall) to `true`:

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  prefetch: {

    prefetchAll: true

  }

});
```

You can then opt-out of prefetching for individual links by setting `data-astro-prefetch="false"`:

```

<a href="/about" data-astro-prefetch="false">About</a>
```

The default prefetch strategy for all links can be changed with `prefetch.defaultStrategy` as shown in the [Default prefetch strategy section](https://docs.astro.build/en/guides/prefetch/#default-prefetch-strategy).

## Prefetch programmatically

[Section titled Prefetch programmatically](https://docs.astro.build/en/guides/prefetch/#prefetch-programmatically)

As some navigation might not always appear as `<a />` links, you can also prefetch programmatically with the `prefetch()` API from the `astro:prefetch` module:

```

<button id="btn">Click me</button>

<script>

  import { prefetch } from 'astro:prefetch';

  const btn = document.getElementById('btn');

  btn.addEventListener('click', () => {

    prefetch('/about');

  });

</script>
```

The `prefetch()` API includes the same [data saver mode](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) and [slow connection](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType) detection so that it only prefetches when needed.

To ignore slow connection detection, you can use the `ignoreSlowConnection` option:

```

// Prefetch even on data saver mode or slow connection

prefetch('/about', { ignoreSlowConnection: true });
```

### `eagerness`

[Section titled eagerness](https://docs.astro.build/en/guides/prefetch/#eagerness)

**Type:** `'immediate' | 'eager' | 'moderate' | 'conservative'`

**Default:** `'immediate'`

**Added in:** `astro@5.6.0`

With the experimental [`clientPrerender`](https://docs.astro.build/en/reference/experimental-flags/client-prerender/) flag enabled, you can use the `eagerness` option on `prefetch()` to suggest to the browser how eagerly it should prefetch/prerender link targets.

This follows the same API described in the [Speculation Rules API](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/speculationrules#eagerness) and defaults to `immediate` (the most eager option). In decreasing order of eagerness, the other options are `eager`, `moderate`, and `conservative`.

The `eagerness` option allows you to balance the benefit of reduced wait times against bandwidth, memory, and CPU costs for your site visitors. Some browsers, such as Chrome, have [limits in place to guard against over-speculating](https://developer.chrome.com/blog/speculation-rules-improvements#chrome-limits) (prerendering/prefetching too many links).

```

---

---

<script>

// Control prefetching eagerness with `experimental.clientPrerender`

import { prefetch } from 'astro:prefetch';

// This page is resource-intensive

prefetch('/data-heavy-dashboard', { eagerness: 'conservative' });

// This page is critical to the visitor's journey

prefetch('/getting-started'); // defaults to `{ eagerness: 'immediate' }`

// This page may not be visited

prefetch('/terms-of-service', { eagerness: 'moderate' });

</script>
```

To use `prefetch()` programmatically with large sets of links, you can set `eagerness: 'moderate'` to take advantage of [First In, First Out (FIFO)](https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)) strategies and browser heuristics to let the browser decide when to prerender/prefetch them and in what order:

```

<a class="link-moderate" href="/nice-link-1">A Nice Link 1</a>

<a class="link-moderate" href="/nice-link-2">A Nice Link 2</a>

<a class="link-moderate" href="/nice-link-3">A Nice Link 3</a>

<a class="link-moderate" href="/nice-link-4">A Nice Link 4</a>

...

<a class="link-moderate" href="/nice-link-20">A Nice Link 20</a>

<script>

  import { prefetch } from 'astro:prefetch';

  const linkModerate = document.getElementsByClassName('link-moderate');

  linkModerate.forEach((link) => prefetch(link.getAttribute('href'), {eagerness: 'moderate'}));

</script>
```

Make sure to only import `prefetch()` in client-side scripts as it relies on browser APIs.

## Using with View Transitions

[Section titled Using with View Transitions](https://docs.astro.build/en/guides/prefetch/#using-with-view-transitions)

When you use [View Transitions](https://docs.astro.build/en/guides/view-transitions/) on a page, prefetching will also be enabled by default. It sets a default configuration of `{ prefetchAll: true }` which enables [prefetching for all links](https://docs.astro.build/en/guides/prefetch/#prefetch-all-links-by-default) on the page.

You can customize the prefetch configuration in `astro.config.mjs` to override the default. For example:

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  // Disable prefetch completely

  prefetch: false

});
```

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  // Keep prefetch, but only prefetch for links with `data-astro-prefetch`

  prefetch: {

    prefetchAll: false

  }

});
```

## Browser support

[Section titled Browser support](https://docs.astro.build/en/guides/prefetch/#browser-support)

Astro’s prefetching uses [`<link rel="prefetch">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch) if supported by the browser, and falls back to the [`fetch()` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) otherwise.

The most common browsers support Astro’s prefetching with subtle differences:

### Chrome

[Section titled Chrome](https://docs.astro.build/en/guides/prefetch/#chrome)

Chrome supports `<link rel="prefetch">`. Prefetching works as intended.

It also fully supports `<script type="speculationrules">` from the [Speculation Rules API](https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API), which can be used to further describe [prefetching strategies and rules](https://docs.astro.build/en/guides/prefetch/#eagerness), enhancing user experience for your Chrome users. You’ll need to enable [`clientPrerender`](https://docs.astro.build/en/reference/experimental-flags/client-prerender/) experiment to utilize this functionality with `prefetch()`

### Firefox

[Section titled Firefox](https://docs.astro.build/en/guides/prefetch/#firefox)

Firefox supports `<link rel="prefetch">` but may display errors or fail entirely:

- Without an explicit cache header (e.g. [`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) or [`Expires`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires)), prefetching will error with `NS_BINDING_ABORTED`.
- Even in the event of an error, if the response has a proper [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header, it will be re-used on navigation.
- Otherwise, if it errors with no other cache headers, the prefetch will not work.

### Safari

[Section titled Safari](https://docs.astro.build/en/guides/prefetch/#safari)

Safari does not support `<link rel="prefetch">` and will fall back to the `fetch()` API which requires cache headers (e.g. [`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control), [`Expires`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires), and [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)) to be set. Otherwise, the prefetch will not work.

**Edge case:** `ETag` headers do not work in private windows.

### Recommendations

[Section titled Recommendations](https://docs.astro.build/en/guides/prefetch/#recommendations)

To best support all browsers, make sure your pages have the proper cache headers.

For static or prerendered pages, the `ETag` header is often automatically set by the deployment platform and is expected to work out of the box.

For dynamic and server-side rendered pages, set the appropriate cache headers yourself based on the page content. Visit the [MDN documentation on HTTP caching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching) for more information.

## Migrating from `@astrojs/prefetch`

[Section titled Migrating from @astrojs/prefetch](https://docs.astro.build/en/guides/prefetch/#migrating-from-astrojsprefetch)

The `@astrojs/prefetch` integration was deprecated in v3.5.0 and will eventually be removed entirely. Use the following instructions to migrate to Astro’s built-in prefetching which replaces this integration.

1. Remove the `@astrojs/prefetch` integration and enable the `prefetch` config in `astro.config.mjs`:



```


import { defineConfig } from 'astro/config';

import prefetch from '@astrojs/prefetch';




export default defineConfig({

     integrations: [prefetch()],

     prefetch: true

});
```

2. Convert from `@astrojs/prefetch`’s configuration options:
   - The deprecated integration used the `selector` config option to specify which links should be prefetched upon entering the viewport.

     Add `data-astro-prefetch="viewport"` to these individual links instead.



     ```


     <a href="/about" data-astro-prefetch="viewport">
     ```

   - The deprecated integration used the `intentSelector` config option to specify which links should be prefetched when they were hovered over or focused.

     Add `data-astro-prefetch` or `data-astro-prefetch="hover"` to these individual links instead:



     ```


     <!-- You can omit the value if `defaultStrategy` is set to `hover` (default) -->

     <a href="/about" data-astro-prefetch>




     <!-- Otherwise, you can explicitly define the prefetch strategy -->

     <a href="/about" data-astro-prefetch="hover">
     ```

   - The `throttles` option from `@astrojs/prefetch` is no longer needed as the new prefetch feature will automatically schedule and prefetch optimally.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Getting Started with Astro
[Skip to content](https://docs.astro.build/en/getting-started/#_top)

Astro v5 is here! [Learn how to upgrade your site](https://docs.astro.build/en/guides/upgrade-to/v5/)

# Astro Docs

Guides, resources, and API references to help you build with Astro.

[Install Astro](https://docs.astro.build/en/install-and-setup/) [Learn about Astro’s features](https://docs.astro.build/en/concepts/why-astro/)

Powered by Astro and our open-source contributors. [Join us!](https://docs.astro.build/en/contribute/)

![](https://docs.astro.build/_astro/61414485_Z1xsHVD.webp)![](https://docs.astro.build/_astro/5098874_Xmneb.webp)![](https://docs.astro.build/_astro/357379_ZKO92b.webp)

![](https://docs.astro.build/_astro/361671_1jGyyS.webp)![](https://docs.astro.build/_astro/7118177_ZpfedT.webp)![](https://docs.astro.build/_astro/602478_Z1j0biA.webp)![](https://docs.astro.build/_astro/34116392_ZbAa2A.webp)

![](https://docs.astro.build/_astro/85648028_ZS2tmy.webp)![](https://docs.astro.build/_astro/3019731_Z1d2OlH.webp)![](https://docs.astro.build/_astro/622227_ZgWgJ2.webp)

![](https://docs.astro.build/_astro/39112954_2r9kRD.webp)![](https://docs.astro.build/_astro/108291165_Z1suPGD.webp)![](https://docs.astro.build/_astro/25167721_FdCXa.webp)

![](https://docs.astro.build/_astro/494699_Uj3X8.webp)![](https://docs.astro.build/_astro/1369770_8D3ud.webp)![](https://docs.astro.build/_astro/15836226_ZtVxk8.webp)![](https://docs.astro.build/_astro/59021693_ZHbveW.webp)![](https://docs.astro.build/_astro/51384119_c1LGe.webp)![](https://docs.astro.build/_astro/69633530_2iImQL.webp)

![](https://docs.astro.build/_astro/14293805_1joHXY.webp)![](https://docs.astro.build/_astro/15368_buQwa.webp)![](https://docs.astro.build/_astro/78129249_2j195u.webp)![](https://docs.astro.build/_astro/10626596_2bKcQK.webp)

![](https://docs.astro.build/_astro/15145918_Z1i4sKD.webp)![](https://docs.astro.build/_astro/213306_18n3Wi.webp)![](https://docs.astro.build/_astro/64310361_Z2cKvpc.webp)![](https://docs.astro.build/_astro/30520689_ZJkafL.webp)![](https://docs.astro.build/_astro/7889778_2mvI3m.webp)![](https://docs.astro.build/_astro/188426_1SeoP1.webp)

Powered by Astro and our open-source contributors. [Join us!](https://docs.astro.build/en/contribute/)

![](https://docs.astro.build/_astro/46791833_Z1KNVzb.webp)![](https://docs.astro.build/_astro/69170106_1JOJsJ.webp)![](https://docs.astro.build/_astro/36526527_ZGtduA.webp)

![](https://docs.astro.build/_astro/4033662_gFxik.webp)![](https://docs.astro.build/_astro/25839948_s92Cr.webp)![](https://docs.astro.build/_astro/45965090_Z1Q0PLL.webp)

![](https://docs.astro.build/_astro/15368_buQwa.webp)![](https://docs.astro.build/_astro/81974850_25nYCc.webp)![](https://docs.astro.build/_astro/6137925_ZRDvbT.webp)

What will you build with Astro?

Explore [Astro starter themes](https://astro.build/themes/) for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more!

Take a guided tour

Complete our introductory [Build a Blog Tutorial](https://docs.astro.build/en/tutorial/0-introduction/) to learn the basics and create your first Astro site.

Start a new project

```

# create a new project with npm

npm create astro@latest
```

Our [installation guide](https://docs.astro.build/en/install-and-setup/) has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually.

Learn

- [Astro’s main features](https://docs.astro.build/en/concepts/why-astro/)
- [Islands architecture](https://docs.astro.build/en/concepts/islands/)
- [Astro components](https://docs.astro.build/en/basics/astro-components/)
- [The Astro template syntax](https://docs.astro.build/en/reference/astro-syntax/)

Extend

- [Add integrations like React and Partytown](https://docs.astro.build/en/guides/integrations-guide/)
- [Create type safe content collections](https://docs.astro.build/en/guides/content-collections/)
- [Enhance navigation with view transitions](https://docs.astro.build/en/guides/view-transitions/)
- [Connect a headless CMS to your project](https://docs.astro.build/en/guides/cms/)

## Have a question or want to get involved?

![](https://docs.astro.build/_astro/houston_love.BttrNCcZ_Ok6Ar.webp)[Join our Discord](https://astro.build/chat)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Image Guide
[Skip to content](https://docs.astro.build/en/guides/images/#_top)

# Images

Astro provides several ways for you to use images on your site, whether they are stored locally inside your project, linked to from an external URL, or managed in a CMS or CDN.

Astro provides [image](https://docs.astro.build/en/guides/images/#display-optimized-images-with-the-image--component) and [picture](https://docs.astro.build/en/guides/images/#create-responsive-images-with-the-picture--component) components, [Markdown image syntax](https://docs.astro.build/en/guides/images/#images-in-markdown-files) processing, [SVG components](https://docs.astro.build/en/guides/images/#svg-components), and [an image generating function](https://docs.astro.build/en/guides/images/#generating-images-with-getimage) to optimize and/or transform your images.

You can always choose to use images and SVG files using native HTML elements in `.astro` or Markdown files, or the standard way for your file type (e.g. `<img />` in MDX and JSX). However, Astro does not perform any processing or optimization of these images.

See the full API reference for the [`<Image />`](https://docs.astro.build/en/reference/modules/astro-assets/#image-) and [`<Picture />`](https://docs.astro.build/en/reference/modules/astro-assets/#picture-) components.

## Where to store images

[Section titled Where to store images](https://docs.astro.build/en/guides/images/#where-to-store-images)

### `src/` vs `public/`

[Section titled src/ vs public/](https://docs.astro.build/en/guides/images/#src-vs-public)

We recommend that local images are kept in `src/` when possible so that Astro can transform, optimize and bundle them. Files in the `/public` directory are always served or copied into the build folder as-is, with no processing.

Your local images stored in `src/` can be used by all files in your project: `.astro`, `.md`, `.mdx`, `.mdoc`, and other UI frameworks. Images can be stored in any folder, including alongside your content.

Store your images in the `public/` folder if you want to avoid any processing or to have a direct public link to them.

### Remote images

[Section titled Remote images](https://docs.astro.build/en/guides/images/#remote-images)

You can also choose to store your images remotely, in a [content management system (CMS)](https://docs.astro.build/en/guides/cms/) or [digital asset management (DAM)](https://docs.astro.build/en/guides/media/) platform.
Astro can fetch your data remotely using APIs or display images from their full URL path.

For extra protection when dealing with external sources, Astro’s image components and helper function will only process (e.g. optimize, transform) images from [authorized image sources specified in your configuration](https://docs.astro.build/en/guides/images/#authorizing-remote-images). Remote images from other sources will be displayed with no processing.

## Images in `.astro` files

[Section titled Images in .astro files](https://docs.astro.build/en/guides/images/#images-in-astro-files)

In `.astro` files, a local image must be imported from its relative path. This import provides the `src` value for your image.

Remote and `public/` images do not require importing, and instead require a URL (full, or relative path on your site) for `src`.

Import and use Astro’s native [`<Image />`](https://docs.astro.build/en/guides/images/#display-optimized-images-with-the-image--component) and [`<Picture />`](https://docs.astro.build/en/guides/images/#create-responsive-images-with-the-picture--component) components for optimized images. Astro syntax also supports [writing an HTML `<img>` tag directly](https://docs.astro.build/en/guides/images/#display-unprocessed-images-with-the-html-img-tag), which skips image processing.

```

---

import { Image } from 'astro:assets';

import localBirdImage from '../../images/subfolder/localBirdImage.png';

---

<Image src={localBirdImage} alt="A bird sitting on a nest of eggs." />

<Image src="/images/bird-in-public-folder.jpg" alt="A bird." width="50" height="50" />

<Image src="https://example.com/remote-bird.jpg" alt="A bird." width="50" height="50" />

<img src={localBirdImage.src} alt="A bird sitting on a nest of eggs.">

<img src="/images/bird-in-public-folder.jpg" alt="A bird.">

<img src="https://example.com/remote-bird.jpg" alt="A bird.">
```

See the full API reference for the [`<Image />`](https://docs.astro.build/en/reference/modules/astro-assets/#image-) and [`<Picture />`](https://docs.astro.build/en/reference/modules/astro-assets/#picture-) components.

![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Dynamically import images](https://docs.astro.build/en/recipes/dynamically-importing-images/)

### Display optimized images with the `<Image />` component

[Section titled Display optimized images with the &lt;Image /&gt; component](https://docs.astro.build/en/guides/images/#display-optimized-images-with-the-image--component)

Use the built-in `<Image />` Astro component to display optimized versions of:

- your local images located within the `src/` folder
- [configured remote images](https://docs.astro.build/en/guides/images/#authorizing-remote-images) from authorized sources

`<Image />` can transform a local or authorized remote image’s dimensions, file type, and quality for control over your displayed image. This transformation happens at build time for prerendered pages. When your page is rendered on demand, this transformation will occur on the fly when the page is viewed. The resulting `<img>` tag includes `alt`, `loading`, and `decoding` attributes and infers image dimensions to avoid Cumulative Layout Shift (CLS).

```

---

// import the Image component and the image

import { Image } from 'astro:assets';

import myImage from '../assets/my_image.png'; // Image is 1600x900

---

<!-- `alt` is mandatory on the Image component -->

<Image src={myImage} alt="A description of my image." />
```

```

<!-- Prerendered output -->

<!-- Image is optimized, proper attributes are enforced -->

<img

  src="/_astro/my_image.hash.webp"

  width="1600"

  height="900"

  decoding="async"

  loading="lazy"

  alt="A description of my image."

/>

<!-- Output rendered on demand-->

<!-- src will use an endpoint generated on demand-->

<img

  src="/_image?href=%2F_astro%2Fmy_image.hash.webp&amp;w=1600&amp;h=900&amp;f=webp"

  <!-- ... -->

/>
```

The `<Image />` component accepts [several component properties](https://docs.astro.build/en/reference/modules/astro-assets/#image-properties) as well as any attributes accepted by the HTML `<img>` tag.

The following example provides a `class` to the image component which will apply to the final `<img>` element.

```

---

import { Image } from 'astro:assets';

import myImage from '../assets/my_image.png';

---

<!-- `alt` is mandatory on the Image component -->

<Image src={myImage} alt="" class="my-class" />
```

```

<!-- Prerendered output -->

<img

  src="/_astro/my_image.hash.webp"

  width="1600"

  height="900"

  decoding="async"

  loading="lazy"

  class="my-class"

  alt=""

/>
```

### Create responsive images with the `<Picture />` component

[Section titled Create responsive images with the &lt;Picture /&gt; component](https://docs.astro.build/en/guides/images/#create-responsive-images-with-the-picture--component)

**Added in:** `astro@3.3.0`

Use the built-in `<Picture />` Astro component to display a responsive image with multiple formats and/or sizes. Like the [`<Image />` component](https://docs.astro.build/en/guides/images/#display-optimized-images-with-the-image--component), images will be processed at build time for prerendered pages. When your page is rendered on demand, processing will occur on the fly when the page is viewed.

```

---

import { Picture } from 'astro:assets';

import myImage from '../assets/my_image.png'; // Image is 1600x900

---

<!-- `alt` is mandatory on the Picture component -->

<Picture src={myImage} formats={['avif', 'webp']} alt="A description of my image." />
```

```

<!-- Prerendered output -->

<picture>

  <source srcset="/_astro/my_image.hash.avif" type="image/avif" />

  <source srcset="/_astro/my_image.hash.webp" type="image/webp" />

  <img

    src="/_astro/my_image.hash.png"

    width="1600"

    height="900"

    decoding="async"

    loading="lazy"

    alt="A description of my image."

  />

</picture>
```

See details about [the `<Picture />` component properties](https://docs.astro.build/en/reference/modules/astro-assets/#picture-properties) in the `astro:assets` reference.

### Display unprocessed images with the HTML `<img>` tag

[Section titled Display unprocessed images with the HTML &lt;img&gt; tag](https://docs.astro.build/en/guides/images/#display-unprocessed-images-with-the-html-img-tag)

The [Astro template syntax](https://docs.astro.build/en/reference/astro-syntax/) also supports writing an `<img>` tag directly, with full control over its final output. These images will not be processed and optimized. It accepts all HTML `<img>` tag properties, and the only required property is `src`.

Local images must be imported from the relative path from the existing `.astro` file, or you can configure and use an [import alias](https://docs.astro.build/en/guides/imports/#aliases). Then, you can access the image’s `src` and other properties to use in the `<img>` tag.

Imported image assets match the following signature:

```

interface ImageMetadata {

  src: string;

  width: number;

  height: number;

  format: string;

}
```

The following example uses the image’s own `height` and `width` properties to avoid Cumulative Layout Shift (CLS) and improve Core Web Vitals:

```

---

// import local images

import myDog from '../../images/pets/local-dog.jpg';

---

// access the image properties

<img src={myDog.src} width={myDog.width} height={myDog.height} alt="A barking dog." />
```

#### Images in `public/`

[Section titled Images in public/](https://docs.astro.build/en/guides/images/#images-in-public)

For images located within `public/` use the image’s file path relative to the public folder as the `src` value:

```

<img src="/images/public-cat.jpg" alt="A sleeping cat." >
```

#### Remote images

[Section titled Remote images](https://docs.astro.build/en/guides/images/#remote-images-1)

For remote images, use the image’s full URL as the `src` value:

```

<img src="https://example.com/remote-cat.jpg" alt="A sleeping cat." >
```

### Choosing `<Image />` vs `<img>`

[Section titled Choosing &lt;Image /&gt; vs &lt;img&gt;](https://docs.astro.build/en/guides/images/#choosing-image--vs-img)

The `<Image />` component optimizes your image and infers width and height (for images it can process) based on the original aspect ratio to avoid CLS. It is the preferred way to use images in `.astro` files whenever possible.

Use the HTML `<img>` element when you cannot use the `<Image />` component, for example:

- for unsupported image formats
- when you do not want your image optimized by Astro
- to access and change the `src` attribute dynamically client-side

### Setting Default Values

[Section titled Setting Default Values](https://docs.astro.build/en/guides/images/#setting-default-values)

Currently, there is no way to specify default values for all `<Image />` or `<Picture/>` components. Required attributes should be set on each individual component.

As an alternative, you can wrap these components in another Astro component for reuse. For example, you could create a component for your blog post images that receives attributes as props and applies consistent styles to each image:

```

---

import { Image } from 'astro:assets';

const { src, ...attrs } = Astro.props;

---

<Image src={src} {...attrs} />

<style>

  img {

    margin-block: 2.5rem;

    border-radius: 0.75rem;

  }

</style>
```

### Authorizing remote images

[Section titled Authorizing remote images](https://docs.astro.build/en/guides/images/#authorizing-remote-images)

You can configure lists of authorized image source URL domains and patterns for image optimization using [`image.domains`](https://docs.astro.build/en/reference/configuration-reference/#imagedomains) and [`image.remotePatterns`](https://docs.astro.build/en/reference/configuration-reference/#imageremotepatterns). This configuration is an extra layer of safety to protect your site when showing images from an external source.

Remote images from other sources will not be optimized, but using the `<Image />` component for these images will prevent Cumulative Layout Shift (CLS).

For example, the following configuration will only allow remote images from `astro.build` to be optimized:

```

export default defineConfig({

  image: {

    domains: ["astro.build"],

  }

});
```

The following configuration will only allow remote images from HTTPS hosts:

```

export default defineConfig({

  image: {

    remotePatterns: [{ protocol: "https" }],

  }

});
```

## SVG components

[Section titled SVG components](https://docs.astro.build/en/guides/images/#svg-components)

**Added in:** `astro@5.7.0`

Astro allows you to import SVG files and use them as Astro components. Astro will inline the SVG content into your HTML output.

Reference the default import of any local `.svg` file. Since this import is treated as an Astro component, you must use the same conventions (e.g. capitalization) as when [using dynamic tags](https://docs.astro.build/en/reference/astro-syntax/#dynamic-tags).

```

---

import Logo from './path/to/svg/file.svg';

---

<Logo />
```

Your SVG component, like `<Image />` or any other Astro component, is unavailable inside UI framework components, but can [be passed to a framework component](https://docs.astro.build/en/guides/images/#images-in-ui-framework-components) inside a `.astro` component.

### SVG component attributes

[Section titled SVG component attributes](https://docs.astro.build/en/guides/images/#svg-component-attributes)

You can pass props such as `width`, `height`, `fill`, `stroke`, and any other attribute accepted by the [native `<svg>` element](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg). These attributes will automatically be applied to the underlying `<svg>` element. If a property is present in the original `.svg` file and is passed to the component, the value passed to the component will override the original value.

```

---

import Logo from '../assets/logo.svg';

---

<Logo width={64} height={64} fill="currentColor" />
```

## Using Images from a CMS or CDN

[Section titled Using Images from a CMS or CDN](https://docs.astro.build/en/guides/images/#using-images-from-a-cms-or-cdn)

Image CDNs work with [all Astro image options](https://docs.astro.build/en/guides/images/#images-in-astro-files). Use an image’s full URL as the `src` attribute in the `<Image />` component, an `<img>` tag, or in Markdown notation. For image optimization with remote images, also [configure your authorized domains or URL patterns](https://docs.astro.build/en/guides/images/#authorizing-remote-images).

Alternatively, the CDN may provide its own SDKs to more easily integrate in an Astro project. For example, Cloudinary supports an [Astro SDK](https://astro.cloudinary.dev/) which allows you to easily drop in images with their `CldImage` component or a [Node.js SDK](https://cloudinary.com/documentation/node_integration) that can generate URLs to use with an `<img>` tag in a Node.js environment.

See the full API reference for the [`<Image />`](https://docs.astro.build/en/reference/modules/astro-assets/#image-) and [`<Picture />`](https://docs.astro.build/en/reference/modules/astro-assets/#picture-) components.

## Images in Markdown files

[Section titled Images in Markdown files](https://docs.astro.build/en/guides/images/#images-in-markdown-files)

Use standard Markdown `![alt](src)` syntax in your `.md` files. This syntax works with Astro’s [Image Service API](https://docs.astro.build/en/reference/image-service-reference/) to optimize your local images stored in `src/` and remote images. Images stored in the `public/` folder are never optimized.

```

# My Markdown Page

<!-- Local image stored in src/assets/ -->

<!-- Use a relative file path or import alias -->

![A starry night sky.](../assets/stars.png)

<!-- Image stored in public/images/ -->

<!-- Use the file path relative to public/ -->

![A starry night sky.](/images/stars.png)

<!-- Remote image on another server -->

<!-- Use the full URL of the image -->

![Astro](https://example.com/images/remote-image.png)
```

The HTML `<img>` tag can also be used to display images stored in `public/` or remote images without any image optimization or processing. However, `<img>` is not supported for your local images in `src`.

The `<Image />` and `<Picture />` components are unavailable in `.md` files. If you require more control over your image attributes, we recommend using [Astro’s MDX integration](https://docs.astro.build/en/guides/integrations-guide/mdx/) to add support for `.mdx` file format. MDX allows additional [image options available in MDX](https://docs.astro.build/en/guides/images/#images-in-mdx-files), including combining components with Markdown syntax.

## Images in MDX files

[Section titled Images in MDX files](https://docs.astro.build/en/guides/images/#images-in-mdx-files)

You can use Astro’s `<Image />` and `<Picture />` components in your `.mdx` files by importing both the component and your image. Use them just as they are [used in `.astro` files](https://docs.astro.build/en/guides/images/#images-in-astro-files). The JSX `<img />` tag is also supported for unprocessed images and [uses the same image import as the HTML `<img>` tag](https://docs.astro.build/en/guides/images/#display-unprocessed-images-with-the-html-img-tag).

Additionally, there is support for [standard Markdown `![alt](src)` syntax](https://docs.astro.build/en/guides/images/#images-in-markdown-files) with no import required.

```

---

title: My Page title

---

import { Image } from 'astro:assets';

import rocket from '../assets/rocket.png';

# My MDX Page

// Local image stored in the the same folder

![Houston in the wild](houston.png)

// Local image stored in src/assets/

<Image src={rocket} alt="A rocketship in space." />

<img src={rocket.src} alt="A rocketship in space." />

![A rocketship in space](../assets/rocket.png)

// Image stored in public/images/

<Image src="/images/stars.png" alt="A starry night sky." />

<img src="/images/stars.png" alt="A starry night sky." />

![A starry night sky.](/images/stars.png)

// Remote image on another server

<Image src="https://example.com/images/remote-image.png" />

<img src="https://example.com/images/remote-image.png" />

![Astro](https://example.com/images/remote-image.png)
```

See the full API reference for the [`<Image />`](https://docs.astro.build/en/reference/modules/astro-assets/#image-) and [`<Picture />`](https://docs.astro.build/en/reference/modules/astro-assets/#picture-) components.

## Images in content collections

[Section titled Images in content collections](https://docs.astro.build/en/guides/images/#images-in-content-collections)

Images in content collections will be processed the same way they are in [Markdown](https://docs.astro.build/en/guides/images/#images-in-markdown-files) and [MDX](https://docs.astro.build/en/guides/images/#images-in-mdx-files) depending on which file type you are using.

Additionally, you can declare an associated image for a content collections entry, such as a blog post’s cover image, in your frontmatter using its path relative to the current folder:

```

---

title: "My first blog post"

cover: "./firstpostcover.jpeg" # will resolve to "src/content/blog/firstblogcover.jpeg"

coverAlt: "A photograph of a sunset behind a mountain range."

---

This is a blog post
```

The `image` helper for the content collections schema lets you validate and import the image.

```

import { defineCollection, z } from "astro:content";

const blogCollection = defineCollection({

  schema: ({ image }) => z.object({

    title: z.string(),

    cover: image(),

    coverAlt: z.string(),

  }),

});

export const collections = {

  blog: blogCollection,

};
```

The image will be imported and transformed into metadata, allowing you to pass it as a `src` to `<Image/>`, `<img>`, or `getImage()`.

The example below shows a blog index page that renders the cover photo and title of each blog post from the schema above:

```

---

import { Image } from "astro:assets";

import { getCollection } from "astro:content";

const allBlogPosts = await getCollection("blog");

---

{

  allBlogPosts.map((post) => (

    <div>

      <Image src={post.data.cover} alt={post.data.coverAlt} />

      <h2>

        <a href={"/blog/" + post.slug}>{post.data.title}</a>

      </h2>

    </div>

  ))

}
```

## Images in UI framework components

[Section titled Images in UI framework components](https://docs.astro.build/en/guides/images/#images-in-ui-framework-components)

The `<Image />` component, like any other Astro component, is unavailable inside UI framework components.

But, you can pass the static content generated by `<Image />` to a framework component inside a `.astro` file [as children](https://docs.astro.build/en/guides/framework-components/#passing-children-to-framework-components) or using a [named `<slot/>`](https://docs.astro.build/en/guides/framework-components/#can-i-use-astro-components-inside-my-framework-components):

```

---

import ReactComponent from './ReactComponent.jsx';

import { Image } from 'astro:assets';

import stars from '~/stars/docline.png';

---

<ReactComponent>

  <Image src={stars} alt="A starry night sky." />

</ReactComponent>
```

You can also use the framework’s own image syntax to render an image (e.g. `<img />` in JSX, `<img>` in Svelte).

[Local images must first be imported](https://docs.astro.build/en/guides/images/#display-unprocessed-images-with-the-html-img-tag) to access their image properties such as `src`.

```

import stars from "../assets/stars.png";

export default function ReactImage() {

  return (

    <img src={stars.src} alt="A starry night sky." />

  )

}
```

```

<script>

  import stars from '../assets/stars.png';

</script>

<img src={stars.src} alt="A starry night sky." />
```

## Generating images with `getImage()`

[Section titled Generating images with getImage()](https://docs.astro.build/en/guides/images/#generating-images-with-getimage)

The `getImage()` function is intended for generating images destined to be used somewhere else than directly in HTML, for example in an [API Route](https://docs.astro.build/en/guides/endpoints/#server-endpoints-api-routes). When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create your own custom `<Image />` component.

See more in the [`getImage()` reference](https://docs.astro.build/en/reference/modules/astro-assets/#getimage).

![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Build a custom image component](https://docs.astro.build/en/recipes/build-custom-img-component/)

## Alt Text

[Section titled Alt Text](https://docs.astro.build/en/guides/images/#alt-text)

Not all users can see images in the same way, so accessibility is an especially important concern when using images. Use the `alt` attribute to provide [descriptive alt text](https://www.w3.org/WAI/tutorials/images/) for images.

This attribute is required for both the `<Image />` and `<Picture />` components. If no alt text is provided, a helpful error message will be provided reminding you to include the `alt` attribute.

If the image is merely decorative (i.e. doesn’t contribute to the understanding of the page), set `alt=""` so that screen readers know to ignore the image.

## Default image service

[Section titled Default image service](https://docs.astro.build/en/guides/images/#default-image-service)

[Sharp](https://github.com/lovell/sharp) is the default image service used for `astro:assets`. You can further configure the image service using the [`image.service`](https://docs.astro.build/en/reference/configuration-reference/#imageservice) option.

### Configure no-op passthrough service

[Section titled Configure no-op passthrough service](https://docs.astro.build/en/guides/images/#configure-no-op-passthrough-service)

If your [adapter](https://astro.build/integrations/?search=&categories%5B%5D=adapters) does not support Astro’s built-in Sharp image optimization (e.g. Deno, Cloudflare), you can configure a no-op image service to allow you to use the `<Image />` and `<Picture />` components. Note that Astro does not perform any image transformation and processing in these environments. However, you can still enjoy the other benefits of using `astro:assets`, including no Cumulative Layout Shift (CLS), the enforced `alt` attribute, and a consistent authoring experience.

Configure the `passthroughImageService()` to avoid Sharp image processing:

```

import { defineConfig, passthroughImageService } from 'astro/config';

export default defineConfig({

  image: {

    service: passthroughImageService()

  }

});
```

## Asset Caching

[Section titled Asset Caching](https://docs.astro.build/en/guides/images/#asset-caching)

Astro stores processed image assets in a cache directory during site builds for both local and [remote images from authorized sources](https://docs.astro.build/en/guides/images/#authorizing-remote-images). By preserving the cache directory between builds, processed assets are reused, improving build time and bandwidth usage.

The default cache directory is `./node_modules/.astro`, however this can be changed using the [`cacheDir`](https://docs.astro.build/en/reference/configuration-reference/#cachedir) configuration setting.

### Remote Images

[Section titled Remote Images](https://docs.astro.build/en/guides/images/#remote-images-2)

Remote images in the asset cache are managed based on [HTTP Caching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching), and respect the [Cache-Control header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) returned by the remote server.
Images are cached if the Cache-Control header allows, and will be used until they are no longer [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age).

#### Revalidation

[Section titled Revalidation](https://docs.astro.build/en/guides/images/#revalidation)

**Added in:** `astro@5.1.0`

[Revalidation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#validation) reduces bandwidth usage and build time by checking with the remote server whether an expired cached image is still up-to-date. If the server indicates that the image is still fresh, the cached version is reused, otherwise the image is redownloaded.

Revalidation requires that the remote server send [Last-Modified](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified) and/or [Etag (entity tag)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) headers with its responses. This feature is available for remote servers that support the [If-Modified-Since](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since) and [If-None-Match](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) headers.

## Community Integrations

[Section titled Community Integrations](https://docs.astro.build/en/guides/images/#community-integrations)

There are several third-party [community image integrations](https://astro.build/integrations?search=images) for optimizing and working with images in your Astro project.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Middleware Guide
[Skip to content](https://docs.astro.build/en/guides/middleware/#_top)

# Middleware

**Middleware** allows you to intercept requests and responses and inject behaviors dynamically every time a page or endpoint is about to be rendered. This rendering occurs at build time for all prerendered pages, but occurs when the route is requested for pages rendered on demand, making [additional SSR features like cookies and headers](https://docs.astro.build/en/guides/on-demand-rendering/#on-demand-rendering-features) available.

Middleware also allows you to set and share request-specific information across endpoints and pages by mutating a `locals` object that is available in all Astro components and API endpoints. This object is available even when this middleware runs at build time.

## Basic Usage

[Section titled Basic Usage](https://docs.astro.build/en/guides/middleware/#basic-usage)

1. Create `src/middleware.js|ts` (Alternatively, you can create `src/middleware/index.js|ts`.)

2. Inside this file, export an [`onRequest()`](https://docs.astro.build/en/reference/modules/astro-middleware/#onrequest) function that can be passed a [`context` object](https://docs.astro.build/en/guides/middleware/#the-context-object) and `next()` function. This must not be a default export.



```


export function onRequest (context, next) {

       // intercept data from a request

       // optionally, modify the properties in `locals`

       context.locals.title = "New title";




       // return a Response or the result of calling `next()`

       return next();

};
```

3. Inside any `.astro` file, access response data using `Astro.locals`.



```


   ---

const data = Astro.locals;

   ---

<h1>{data.title}</h1>

<p>This {data.property} is from middleware.</p>
```


### The `context` object

[Section titled The context object](https://docs.astro.build/en/guides/middleware/#the-context-object)

The [`context`](https://docs.astro.build/en/reference/api-reference/) object includes information to be made available to other middleware, API routes and `.astro` routes during the rendering process.

This is an optional argument passed to `onRequest()` that may contain the `locals` object as well as any additional properties to be shared during rendering. For example, the `context` object may include cookies used in authentication.

### Storing data in `context.locals`

[Section titled Storing data in context.locals](https://docs.astro.build/en/guides/middleware/#storing-data-in-contextlocals)

`context.locals` is an object that can be manipulated inside the middleware.

This `locals` object is forwarded across the request handling process and is available as a property to [`APIContext`](https://docs.astro.build/en/reference/api-reference/#locals) and [`AstroGlobal`](https://docs.astro.build/en/reference/api-reference/#locals). This allows data to be shared between middlewares, API routes, and `.astro` pages. This is useful for storing request-specific data, such as user data, across the rendering step.

You can store any type of data inside `locals`: strings, numbers, and even complex data types such as functions and maps.

```

export function onRequest (context, next) {

    // intercept data from a request

    // optionally, modify the properties in `locals`

    context.locals.user.name = "John Wick";

    context.locals.welcomeTitle = () => {

        return "Welcome back " + locals.user.name;

    };

    // return a Response or the result of calling `next()`

    return next();

};
```

Then you can use this information inside any `.astro` file with `Astro.locals`.

```

---

const title = Astro.locals.welcomeTitle();

const orders = Array.from(Astro.locals.orders.entries());

const data = Astro.locals;

---

<h1>{title}</h1>

<p>This {data.property} is from middleware.</p>

<ul>

    {orders.map(order => {

        return <li>{/* do something with each order */}</li>;

    })}

</ul>
```

`locals` is an object that lives and dies within a single Astro route; when your route page is rendered, `locals` won’t exist anymore and a new one will be created. Information that needs to persist across multiple page requests must be stored elsewhere.

## Example: redacting sensitive information

[Section titled Example: redacting sensitive information](https://docs.astro.build/en/guides/middleware/#example-redacting-sensitive-information)

The example below uses middleware to replace “PRIVATE INFO” with the word “REDACTED” to allow you to render modified HTML on your page:

```

export const onRequest = async (context, next) => {

    const response = await next();

    const html = await response.text();

    const redactedHtml = html.replaceAll("PRIVATE INFO", "REDACTED");

    return new Response(redactedHtml, {

        status: 200,

        headers: response.headers

    });

};
```

## Middleware types

[Section titled Middleware types](https://docs.astro.build/en/guides/middleware/#middleware-types)

You can import and use the utility function `defineMiddleware()` to take advantage of type safety:

```

import { defineMiddleware } from "astro:middleware";

// `context` and `next` are automatically typed

export const onRequest = defineMiddleware((context, next) => {

});
```

Instead, if you’re using JsDoc to take advantage of type safety, you can use `MiddlewareHandler`:

```

/**

 * @type {import("astro").MiddlewareHandler}

 */

// `context` and `next` are automatically typed

export const onRequest = (context, next) => {

};
```

To type the information inside `Astro.locals`, which gives you autocompletion inside `.astro` files and middleware code, declare a global namespace in the `env.d.ts` file:

```

type User = {

  id: number;

  name: string;

};

declare namespace App {

  interface Locals {

    user: User;

    welcomeTitle: () => string;

    orders: Map<string, object>;

    session: import("./lib/server/session").Session | null;

  }

}
```

Then, inside the middleware file, you can take advantage of autocompletion and type safety.

## Chaining middleware

[Section titled Chaining middleware](https://docs.astro.build/en/guides/middleware/#chaining-middleware)

Multiple middlewares can be joined in a specified order using [`sequence()`](https://docs.astro.build/en/reference/modules/astro-middleware/#sequence):

```

import { sequence } from "astro:middleware";

async function validation(_, next) {

    console.log("validation request");

    const response = await next();

    console.log("validation response");

    return response;

}

async function auth(_, next) {

    console.log("auth request");

    const response = await next();

    console.log("auth response");

    return response;

}

async function greeting(_, next) {

    console.log("greeting request");

    const response = await next();

    console.log("greeting response");

    return response;

}

export const onRequest = sequence(validation, auth, greeting);
```

This will result in the following console order:

```

validation request

auth request

greeting request

greeting response

auth response

validation response
```

## Rewriting

[Section titled Rewriting](https://docs.astro.build/en/guides/middleware/#rewriting)

**Added in:** `astro@4.13.0`

The `APIContext` exposes a method called `rewrite()` which works the same way as [Astro.rewrite](https://docs.astro.build/en/guides/routing/#rewrites).

Use `context.rewrite()` inside middleware to display a different page’s content without [redirecting](https://docs.astro.build/en/guides/routing/#dynamic-redirects) your visitor to a new page. This will trigger a new rendering phase, causing any middleware to be re-executed.

```

import { isLoggedIn } from "~/auth.js"

export function onRequest (context, next) {

  if (!isLoggedIn(context)) {

    // If the user is not logged in, update the Request to render the `/login` route and

    // add header to indicate where the user should be sent after a successful login.

    // Re-execute middleware.

    return context.rewrite(new Request("/login", {

      headers: {

        "x-redirect-to": context.url.pathname

      }

    }));

  }

  return next();

};
```

You can also pass the `next()` function an optional URL path parameter to rewrite the current `Request` without retriggering a new rendering phase. The location of the rewrite path can be provided as a string, URL, or `Request`:

```

import { isLoggedIn } from "~/auth.js"

export function onRequest (context, next) {

  if (!isLoggedIn(context)) {

    // If the user is not logged in, update the Request to render the `/login` route and

    // add header to indicate where the user should be sent after a successful login.

    // Return a new `context` to any following middlewares.

    return next(new Request("/login", {

      headers: {

        "x-redirect-to": context.url.pathname

      }

    }));

  }

  return next();

};
```

The `next()` function accepts the same payload of [the `Astro.rewrite()` function](https://docs.astro.build/en/reference/api-reference/#rewrite). The location of the rewrite path can be provided as a string, URL, or `Request`.

When you have multiple middleware functions chained via [sequence()](https://docs.astro.build/en/guides/middleware/#chaining-middleware), submitting a path to `next()` will rewrite the `Request` in place and the middleware will not execute again. The next middleware function in the chain will receive the new `Request` with its updated `context`:

Calling `next()` with this signature will create a new `Request` object using the old `ctx.request`. This means that trying to consume `Request.body`, either before or after this rewrite, will throw a runtime error. This error is often raised with [Astro Actions that use HTML forms](https://docs.astro.build/en/guides/actions/#call-actions-from-an-html-form-action). In these cases, we recommend handling rewrites from your Astro templates using `Astro.rewrite()` instead of using middleware.

```

// Current URL is https://example.com/blog

// First middleware function

async function first(_, next) {

  console.log(context.url.pathname) // this will log "/blog"

  // Rewrite to a new route, the homepage

  // Return updated `context` which is passed to next function

  return next("/")

}

// Current URL is still https://example.com/blog

// Second middleware function

async function second(context, next) {

  // Receives updated `context`

  console.log(context.url.pathname) // this will log  "/"

  return next()

}

export const onRequest = sequence(first, second);
```

## Error pages

[Section titled Error pages](https://docs.astro.build/en/guides/middleware/#error-pages)

Middleware will attempt to run for all on-demand rendered pages, even when a matching route cannot be found. This includes Astro’s default (blank) 404 page and any custom 404 pages. However, it is up to the [adapter](https://docs.astro.build/en/guides/on-demand-rendering/) to decide whether that code runs. Some adapters may serve a platform-specific error page instead.

Middleware will also attempt to run before serving a 500 error page, including a custom 500 page, unless the server error occurred in the execution of the middleware itself. If your middleware does not run successfully, then you will not have access to `Astro.locals` to render your 500 page.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Editor Setup
[Skip to content](https://docs.astro.build/en/editor-setup/#_top)

# Editor setup

Customize your code editor to improve the Astro developer experience and unlock new features.

## VS Code

[Section titled VS Code](https://docs.astro.build/en/editor-setup/#vs-code)

[VS Code](https://code.visualstudio.com/) is a popular code editor for web developers, built by Microsoft. The VS Code engine also powers popular in-browser code editors like [GitHub Codespaces](https://github.com/features/codespaces) and [Gitpod](https://gitpod.io/).

Astro works with any code editor. However, VS Code is our recommended editor for Astro projects. We maintain an official [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) that unlocks several key features and developer experience improvements for Astro projects.

- Syntax highlighting for `.astro` files.
- TypeScript type information for `.astro` files.
- [VS Code Intellisense](https://code.visualstudio.com/docs/editor/intellisense) for code completion, hints and more.

To get started, install the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) today.

See how to [set up TypeScript](https://docs.astro.build/en/guides/typescript/) in your Astro project.

## Zed

[Section titled Zed](https://docs.astro.build/en/editor-setup/#zed)

[Zed](https://zed.dev/) is an open-source code editor that added support for Astro in version 0.123.2. You can install the [Astro extension](https://github.com/zed-extensions/astro) in the IDE’s Extensions tab. This extension includes features like syntax highlighting, code completion, and formatting.

## JetBrains IDEs

[Section titled JetBrains IDEs](https://docs.astro.build/en/editor-setup/#jetbrains-ides)

[Webstorm](https://www.jetbrains.com/webstorm/) is a JavaScript and TypeScript IDE that added support for the Astro Language Server in version 2024.2. This update brings features like syntax highlighting, code completion, and formatting.

Install the official plugin through [JetBrains Marketplace](https://plugins.jetbrains.com/plugin/20959-astro) or by searching for “Astro” in the IDE’s Plugins tab. You can toggle the language server in `Settings | Languages & Frameworks | TypeScript | Astro`.

For more information on Astro support in Webstorm, check out [the official Webstorm Astro Documentation](https://www.jetbrains.com/help/webstorm/astro.html).

## Other Code Editors

[Section titled Other Code Editors](https://docs.astro.build/en/editor-setup/#other-code-editors)

Our amazing community maintains several extensions for other popular editors, including:

- [VS Code Extension on Open VSX](https://open-vsx.org/extension/astro-build/astro-vscode) Official \- The official Astro VS Code Extension, available on the Open VSX registry for open platforms like [VSCodium](https://vscodium.com/)
- [Nova Extension](https://extensions.panic.com/extensions/sciencefidelity/sciencefidelity.astro/) Community \- Provides syntax highlighting and code completion for Astro inside of Nova
- [Vim Plugin](https://github.com/wuelnerdotexe/vim-astro) Community \- Provides syntax highlighting, indentation, and code folding support for Astro inside of Vim or Neovim
- Neovim [LSP](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#astro) and [TreeSitter](https://github.com/virchau13/tree-sitter-astro) Plugins Community \- Provides syntax highlighting, treesitter parsing, and code completion for Astro inside of Neovim
- Emacs - See instructions for [Configuring Emacs and Eglot](https://medium.com/@jrmjrm/configuring-emacs-and-eglot-to-work-with-astro-language-server-9408eb709ab0) Community to work with Astro
- [Astro syntax highlighting for Sublime Text](https://packagecontrol.io/packages/Astro) Community \- The Astro package for Sublime Text, available on the Sublime Text package manager.

## In-Browser Editors

[Section titled In-Browser Editors](https://docs.astro.build/en/editor-setup/#in-browser-editors)

In addition to local editors, Astro also runs well on in-browser hosted editors, including:

- [StackBlitz](https://stackblitz.com/) and [CodeSandbox](https://codesandbox.io/) \- online editors that run in your browser, with built-in syntax highlighting support for `.astro` files. No installation or configuration required!
- [GitHub.dev](https://github.dev/) \- allows you to install the Astro VS Code extension as a [web extension](https://code.visualstudio.com/api/extension-guides/web-extensions), which gives you access to only some of the full extension features. Currently, only syntax highlighting is supported.
- [IDX](https://idx.dev/) and [Gitpod](https://gitpod.io/) \- a full dev environment in the cloud that can install the official Astro VS Code Extension from Open VSX.

## Other tools

[Section titled Other tools](https://docs.astro.build/en/editor-setup/#other-tools)

### ESLint

[Section titled ESLint](https://docs.astro.build/en/editor-setup/#eslint)

[ESLint](https://eslint.org/) is a popular linter for JavaScript and JSX. For Astro support, [a community maintained plugin](https://github.com/ota-meshi/eslint-plugin-astro) can be installed.

See [the project’s User Guide](https://ota-meshi.github.io/eslint-plugin-astro/user-guide/) for more information on how to install and set up ESLint for your project.

### Stylelint

[Section titled Stylelint](https://docs.astro.build/en/editor-setup/#stylelint)

[Stylelint](https://stylelint.io/) is a popular linter for CSS. [A community maintained Stylelint configuration](https://github.com/ota-meshi/stylelint-config-html) provides Astro support.

Installation instructions, editor integration, and additional information can be found in the project’s README.

### Prettier

[Section titled Prettier](https://docs.astro.build/en/editor-setup/#prettier)

[Prettier](https://prettier.io/) is a popular formatter for JavaScript, HTML, CSS, and more. If you’re using the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) or [the Astro language server within another editor](https://docs.astro.build/en/editor-setup/#other-code-editors), code formatting with Prettier is included.

To add support for formatting `.astro` files outside of the editor (e.g. CLI) or inside editors that don’t support our editor tooling, install [the official Astro Prettier plugin](https://github.com/withastro/prettier-plugin-astro).

1. Install `prettier` and `prettier-plugin-astro`.




- [npm](https://docs.astro.build/en/editor-setup/#tab-panel-1277)
- [pnpm](https://docs.astro.build/en/editor-setup/#tab-panel-1278)
- [Yarn](https://docs.astro.build/en/editor-setup/#tab-panel-1279)

```

npm install --save-dev --save-exact prettier prettier-plugin-astro
```

```

pnpm add --save-dev --save-exact prettier prettier-plugin-astro
```

```

yarn add --dev --exact prettier prettier-plugin-astro
```

2. Create a `.prettierrc` configuration file (or `.prettierrc.json`, `.prettierrc.mjs`, or [other supported formats](https://prettier.io/docs/configuration)) in the root of your project and add `prettier-plugin-astro` to it.

In this file, also manually specify the parser for Astro files.



```


{

     "plugins": ["prettier-plugin-astro"],

     "overrides": [\
\
       {\
\
         "files": "*.astro",\
\
         "options": {\
\
           "parser": "astro",\
\
         }\
\
       }\
\
     ]

}
```

3. Run the following command in your terminal to format your files.




- [npm](https://docs.astro.build/en/editor-setup/#tab-panel-1280)
- [pnpm](https://docs.astro.build/en/editor-setup/#tab-panel-1281)
- [Yarn](https://docs.astro.build/en/editor-setup/#tab-panel-1282)

```

npx prettier . --write
```

```

pnpm exec prettier . --write
```

```

yarn exec prettier . --write
```

See the [Prettier plugin’s README](https://github.com/withastro/prettier-plugin-astro/blob/main/README.md) for more information about its supported options, how to set up Prettier inside VS Code, and more.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Feditor-setup%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=74862928)

## Astro Docker Setup
[Skip to content](https://docs.astro.build/en/recipes/docker/#_top)

# Build your Astro site with Docker

[Docker](https://docker.com/) is a tool to build, deploy, and run applications using containers.

Docker images and containers can be deployed to many different platforms, like AWS, Azure, and [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/#cloud-run-ssr-and-static). This recipe won’t cover how to deploy your site to a specific platform but will show you how to set up Docker for your project.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/recipes/docker/#prerequisites)

- Docker installed on your local machine. You can find [installation instructions for your operating system here](https://docs.docker.com/get-docker/).
- A Dockerfile in your project. You can [learn more about Dockerfiles here](https://docs.docker.com/engine/reference/builder/) and use the Dockerfiles in the following section as a starting point.

## Creating a Dockerfile

[Section titled Creating a Dockerfile](https://docs.astro.build/en/recipes/docker/#creating-a-dockerfile)

Create a file called `Dockerfile` in your project’s root directory. This file contains the instructions to build your site, which will differ depending on your needs. This guide can’t show all possible options but will give you starting points for SSR and static mode.

If you’re using another package manager than npm, you’ll need to adjust the commands accordingly.

### SSR

[Section titled SSR](https://docs.astro.build/en/recipes/docker/#ssr)

This Dockerfile will build your site and serve it using Node.js on port `4321` and therefore requires the [Node adapter](https://docs.astro.build/en/guides/integrations-guide/node/) installed in your Astro project.

```

FROM node:lts AS runtime

WORKDIR /app

COPY . .

RUN npm install

RUN npm run build

ENV HOST=0.0.0.0

ENV PORT=4321

EXPOSE 4321

CMD node ./dist/server/entry.mjs
```

### Adding a .dockerignore

[Section titled Adding a .dockerignore](https://docs.astro.build/en/recipes/docker/#adding-a-dockerignore)

Adding a `.dockerignore` file to your project is best practice. This file describes which files or folders should be ignored in the Docker `COPY` or `ADD` commands, very similar to how `.gitignore` works. This speeds up the build process and reduces the size of the final image.

```

.DS_Store

node_modules

dist
```

This file should go in the same directory as the `Dockerfile` itself. [Read the `.dockerignore` documentation for extra info](https://docs.docker.com/engine/reference/builder/#dockerignore-file)

### Static

[Section titled Static](https://docs.astro.build/en/recipes/docker/#static)

#### Apache (httpd)

[Section titled Apache (httpd)](https://docs.astro.build/en/recipes/docker/#apache-httpd)

The following Dockerfile will build your site and serve it using Apache httpd on port `80` with the default configuration.

```

FROM node:lts AS build

WORKDIR /app

COPY . .

RUN npm i

RUN npm run build

FROM httpd:2.4 AS runtime

COPY --from=build /app/dist /usr/local/apache2/htdocs/

EXPOSE 80
```

#### NGINX

[Section titled NGINX](https://docs.astro.build/en/recipes/docker/#nginx)

```

FROM node:lts AS build

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

RUN npm run build

FROM nginx:alpine AS runtime

COPY ./nginx/nginx.conf /etc/nginx/nginx.conf

COPY --from=build /app/dist /usr/share/nginx/html

EXPOSE 8080
```

In order to build the Dockerfile above, you’ll also need to create a configuration file for NGINX. Create a folder called `nginx` in your project’s root directory and create a file called `nginx.conf` inside.

```

worker_processes  1;

events {

  worker_connections  1024;

}

http {

  server {

    listen 8080;

    server_name   _;

    root   /usr/share/nginx/html;

    index  index.html index.htm;

    include /etc/nginx/mime.types;

    gzip on;

    gzip_min_length 1000;

    gzip_proxied expired no-cache no-store private auth;

    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    error_page 404 /404.html;

    location = /404.html {

            root /usr/share/nginx/html;

            internal;

    }

    location / {

            try_files $uri $uri/index.html =404;

    }

  }

}
```

### Multi-stage build (using SSR)

[Section titled Multi-stage build (using SSR)](https://docs.astro.build/en/recipes/docker/#multi-stage-build-using-ssr)

Here’s an example of a more advanced Dockerfile that, thanks to Docker’s [multi-stage builds](https://docs.docker.com/build/building/multi-stage/), optimizes the build process for your site by not reinstalling the npm dependencies when only the source code changes. This can reduce the build time even by minutes, depending on the size of your dependencies.

```

FROM node:lts AS base

WORKDIR /app

# By copying only the package.json and package-lock.json here, we ensure that the following `-deps` steps are independent of the source code.

# Therefore, the `-deps` steps will be skipped if only the source code changes.

COPY package.json package-lock.json ./

FROM base AS prod-deps

RUN npm install --omit=dev

FROM base AS build-deps

RUN npm install

FROM build-deps AS build

COPY . .

RUN npm run build

FROM base AS runtime

COPY --from=prod-deps /app/node_modules ./node_modules

COPY --from=build /app/dist ./dist

ENV HOST=0.0.0.0

ENV PORT=4321

EXPOSE 4321

CMD node ./dist/server/entry.mjs
```

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/docker/#recipe)

1. Build your container by running the following command in your project’s root directory. Use any name for `<your-astro-image-name>`:



```


docker build -t <your-astro-image-name> .
```









This will output an image, which you can run locally or deploy to a platform of your choice.

2. To run your image as a local container, use the following command.

Replace `<local-port>` with an open port on your machine. Replace `<container-port>` with the port exposed by your Docker container ( `4321`, `80`, or `8080` in the above examples.)



```


docker run -p <local-port>:<container-port> <your-astro-image-name>
```









You should be able to access your site at `http://localhost:<local-port>`.

3. Now that your website is successfully built and packaged in a container, you can deploy it to a cloud provider. See the [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/#cloud-run-ssr-and-static) deployment guide for one example, and the [Deploy your app](https://docs.docker.com/language/nodejs/deploy/) page in the Docker docs.


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fdocker%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=63214446)

## Astro Routing Guide
[Skip to content](https://docs.astro.build/en/guides/routing/#_top)

# Routing

Astro uses **file-based routing** to generate your build URLs based on the file layout of your project `src/pages/` directory.

## Navigating between pages

[Section titled Navigating between pages](https://docs.astro.build/en/guides/routing/#navigating-between-pages)

Astro uses standard HTML [`<a>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) to navigate between routes. There is no framework-specific `<Link>` component provided.

```

<p>Read more <a href="/about/">about</a> Astro!</p>

<!-- With `base: "/docs"` configured -->

<p>Learn more in our <a href="/docs/reference/">reference</a> section!</p>
```

## Static routes

[Section titled Static routes](https://docs.astro.build/en/guides/routing/#static-routes)

`.astro` [page components](https://docs.astro.build/en/basics/astro-pages/) as well as Markdown and MDX Files ( `.md`, `.mdx`) within the `src/pages/` directory **automatically become pages on your website**. Each page’s route corresponds to its path and filename within the `src/pages/` directory.

```

# Example: Static routes

src/pages/index.astro        -> mysite.com/

src/pages/about.astro        -> mysite.com/about

src/pages/about/index.astro  -> mysite.com/about

src/pages/about/me.astro     -> mysite.com/about/me

src/pages/posts/1.md         -> mysite.com/posts/1
```

## Dynamic routes

[Section titled Dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes)

An Astro page file can specify dynamic route parameters in its filename to generate multiple, matching pages. For example, `src/pages/authors/[author].astro` generates a bio page for every author on your blog. `author` becomes a _parameter_ that you can access from inside the page.

In Astro’s default static output mode, these pages are generated at build time, and so you must predetermine the list of `author` s that get a corresponding file. In SSR mode, a page will be generated on request for any route that matches.

### Static (SSG) Mode

[Section titled Static (SSG) Mode](https://docs.astro.build/en/guides/routing/#static-ssg-mode)

Because all routes must be determined at build time, a dynamic route must export a `getStaticPaths()` that returns an array of objects with a `params` property. Each of these objects will generate a corresponding route.

`[dog].astro` defines the dynamic `dog` parameter in its filename, so the objects returned by `getStaticPaths()` must include `dog` in their `params`. The page can then access this parameter using `Astro.params`.

```

---

export function getStaticPaths() {

  return [\
\
    { params: { dog: "clifford" }},\
\
    { params: { dog: "rover" }},\
\
    { params: { dog: "spot" }},\
\
  ];

}

const { dog } = Astro.params;

---

<div>Good dog, {dog}!</div>
```

This will generate three pages: `/dogs/clifford`, `/dogs/rover`, and `/dogs/spot`, each displaying the corresponding dog name.

The filename can include multiple parameters, which must all be included in the `params` objects in `getStaticPaths()`:

```

---

export function getStaticPaths() {

  return [\
\
    { params: { lang: "en", version: "v1" }},\
\
    { params: { lang: "fr", version: "v2" }},\
\
  ];

}

const { lang, version } = Astro.params;

---
```

This will generate `/en-v1/info` and `/fr-v2/info`.

Parameters can be included in separate parts of the path. For example, the file `src/pages/[lang]/[version]/info.astro` with the same `getStaticPaths()` above will generate the routes `/en/v1/info` and `/fr/v2/info`.

#### Decoding `params`

[Section titled Decoding params](https://docs.astro.build/en/guides/routing/#decoding-params)

The `params` provided to the function `getStaticPaths()` function are not decoded. Use the function [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) when you need to decode parameter values.

```

---

export function getStaticPaths() {

  return [\
\
    { params: { slug: decodeURI("%5Bpage%5D") }}, // decodes to "[page]"\
\
  ]

}

---
```

Learn more about [`getStaticPaths()`](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths).

![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Add i18n features](https://docs.astro.build/en/recipes/i18n/)

#### Rest parameters

[Section titled Rest parameters](https://docs.astro.build/en/guides/routing/#rest-parameters)

If you need more flexibility in your URL routing, you can use a [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) ( `[...path]`) in your `.astro` filename to match file paths of any depth:

```

---

export function getStaticPaths() {

  return [\
\
    { params: { path: "one/two/three" }},\
\
    { params: { path: "four" }},\
\
    { params: { path: undefined }}\
\
  ]

}

const { path } = Astro.params;

---
```

This will generate `/sequences/one/two/three`, `/sequences/four`, and `/sequences`. (Setting the rest parameter to `undefined` allows it to match the top level page.)

Rest parameters can be used with **other named parameters**. For example, GitHub’s file viewer can be represented with the following dynamic route:

```

/[org]/[repo]/tree/[branch]/[...file]
```

In this example, a request for `/withastro/astro/tree/main/docs/public/favicon.svg` would be split into the following named parameters:

```

{

  org: "withastro",

  repo: "astro",

  branch: "main",

  file: "docs/public/favicon.svg"

}
```

#### Example: Dynamic pages at multiple levels

[Section titled Example: Dynamic pages at multiple levels](https://docs.astro.build/en/guides/routing/#example-dynamic-pages-at-multiple-levels)

In the following example, a rest parameter ( `[...slug]`) and the [`props`](https://docs.astro.build/en/reference/routing-reference/#data-passing-with-props) feature of `getStaticPaths()` generate pages for slugs of different depths.

```

---

export function getStaticPaths() {

  const pages = [\
\
    {\
\
      slug: undefined,\
\
      title: "Astro Store",\
\
      text: "Welcome to the Astro store!",\
\
    },\
\
    {\
\
      slug: "products",\
\
      title: "Astro products",\
\
      text: "We have lots of products for you",\
\
    },\
\
    {\
\
      slug: "products/astro-handbook",\
\
      title: "The ultimate Astro handbook",\
\
      text: "If you want to learn Astro, you must read this book.",\
\
    },\
\
  ];

  return pages.map(({ slug, title, text }) => {

    return {

      params: { slug },

      props: { title, text },

    };

  });

}

const { title, text } = Astro.props;

---

<html>

  <head>

    <title>{title}</title>

  </head>

  <body>

    <h1>{title}</h1>

    <p>{text}</p>

  </body>

</html>
```

### On-demand dynamic routes

[Section titled On-demand dynamic routes](https://docs.astro.build/en/guides/routing/#on-demand-dynamic-routes)

For [on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/) with an adapter, dynamic routes are defined the same way: include `[param]` or `[...path]` brackets in your file names to match arbitrary strings or paths. But because the routes are no longer built ahead of time, the page will be served to any matching route. Since these are not “static” routes, `getStaticPaths` should not be used.

For on-demand rendered routes, only one rest parameter using the spread notation may be used in the file name (e.g. `src/pages/[locale]/[...slug].astro` or `src/pages/[...locale]/[slug].astro`, but not `src/pages/[...locale]/[...slug].astro`).

```

---

export const prerender = false; // Not needed in 'server' mode

const { resource, id } = Astro.params;

---

<h1>{resource}: {id}</h1>
```

This page will be served for any value of `resource` and `id`: `resources/users/1`, `resources/colors/blue`, etc.

#### Modifying the `[...slug]` example for SSR

[Section titled Modifying the \[...slug\] example for SSR](https://docs.astro.build/en/guides/routing/#modifying-the-slug-example-for-ssr)

Because SSR pages can’t use `getStaticPaths()`, they can’t receive props. The [previous example](https://docs.astro.build/en/guides/routing/#example-dynamic-pages-at-multiple-levels) can be adapted for SSR mode by looking up the value of the `slug` param in an object. If the route is at the root (”/”), the `slug` param will be `undefined`. If the value doesn’t exist in the object, we redirect to a 404 page.

```

---

const pages = [\
\
  {\
\
    slug: undefined,\
\
    title: 'Astro Store',\
\
    text: 'Welcome to the Astro store!',\
\
  },\
\
  {\
\
    slug: 'products',\
\
    title: 'Astro products',\
\
    text: 'We have lots of products for you',\
\
  },\
\
  {\
\
    slug: 'products/astro-handbook',\
\
    title: 'The ultimate Astro handbook',\
\
    text: 'If you want to learn Astro, you must read this book.',\
\
  }\
\
];

const { slug } = Astro.params;

const page = pages.find((page) => page.slug === slug);

if (!page) return Astro.redirect("/404");

const { title, text } = page;

---

<html>

  <head>

    <title>{title}</title>

  </head>

  <body>

    <h1>{title}</h1>

    <p>{text}</p>

  </body>

</html>
```

## Redirects

[Section titled Redirects](https://docs.astro.build/en/guides/routing/#redirects)

Sometimes you will need to redirect your readers to a new page, either permanently because your site structure has changed or in response to an action such as logging in to an authenticated route.

You can define rules to [redirect users to permanently-moved pages](https://docs.astro.build/en/guides/routing/#configured-redirects) in your Astro config. Or, [redirect users dynamically](https://docs.astro.build/en/guides/routing/#dynamic-redirects) as they use your site.

### Configured Redirects

[Section titled Configured Redirects](https://docs.astro.build/en/guides/routing/#configured-redirects)

**Added in:** `astro@2.9.0`

You can specify a mapping of permanent redirects in your Astro config with the [`redirects`](https://docs.astro.build/en/reference/configuration-reference/#redirects) value.

For internal redirects, this is a mapping of an old route path to the new route. As of Astro v5.2.0, it is also possible to redirect to external URLs that start with `http` or `https` and [can be parsed](https://developer.mozilla.org/en-US/docs/Web/API/URL/canParse_static):

```

import { defineConfig } from "astro/config";

export default defineConfig({

  redirects: {

    "/old-page": "/new-page",

    "/blog": "https://example.com/blog"

  }

});
```

These redirects follow [the same priority rules as file-based routes](https://docs.astro.build/en/guides/routing/#route-priority-order) and will always take lower precedence than an existing page file of the same name in your project. For example, `/old-page` will not redirect to `/new-page` if your project contains the file `src/pages/old-page.astro`.

Dynamic routes are allowed as long as both the new and old routes contain the same parameters, for example:

```

{

  "/blog/[...slug]": "/articles/[...slug]"

}
```

Using SSR or a static adapter, you can also provide an object as the value, allowing you to specify the `status` code in addition to the new `destination`:

```

import { defineConfig } from "astro/config";

export default defineConfig({

  redirects: {

    "/old-page": {

      status: 302,

      destination: "/new-page"

    },

    "/news": {

      status: 302,

      destination: "https://example.com/news"

    }

  }

});
```

When running `astro build`, Astro will output HTML files with the [meta refresh](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#examples) tag by default. Supported adapters will instead write out the host’s configuration file with the redirects.

The status code is `301` by default. If building to HTML files the status code is not used by the server.

### Dynamic redirects

[Section titled Dynamic redirects](https://docs.astro.build/en/guides/routing/#dynamic-redirects)

On the `Astro` global, the `Astro.redirect` method allows you to redirect to another page dynamically. You might do this after checking if the user is logged in by getting their session from a cookie.

```

---

import { isLoggedIn } from "../utils";

const cookie = Astro.request.headers.get("cookie");

// If the user is not logged in, redirect them to the login page

if (!isLoggedIn(cookie)) {

  return Astro.redirect("/login");

}

---
```

## Rewrites

[Section titled Rewrites](https://docs.astro.build/en/guides/routing/#rewrites)

**Added in:** `astro@4.13.0`

A rewrite allows you to serve a different route without redirecting the browser to a different page. The browser will show the original address in the URL bar, but will instead display the content of the URL provided to [`Astro.rewrite()`](https://docs.astro.build/en/reference/api-reference/#rewrite).

Rewrites can be useful for showing the same content at multiple paths (e.g. `/products/shoes/men/` and `/products/men/shoes/`) without needing to maintain two different source files.

Rewrites are also useful for SEO purposes and user experience. They allow you to display content that otherwise would require redirecting your visitor to a different page or would return a 404 status. One common use of rewrites is to show the same localized content for different variants of a language.

The following example uses a rewrite to render the `/es/` version of a page when the `/es-CU/` (Cuban Spanish) URL path is visited. When a visitor navigates to the URL `/es-cu/articles/introduction`, Astro will render the content generated by the file `src/pages/es/articles/introduction.astro`.

```

---

return Astro.rewrite("/es/articles/introduction");

---
```

Use `context.rewrite()` in your endpoint files to reroute to a different page:

```

export function GET(context) {

  if (!context.locals.allowed) {

    return context.rewrite("/");

  }

}
```

If the URL passed to `Astro.rewrite()` emits a runtime error, Astro will show the overlay error in development and return a 500 status code in production. If the URL does not exist in your project, a 404 status code will be returned.

You can intentionally create a rewrite to render your `/404` page, for example to indicate that a product in your e-commerce shop is no longer available:

```

---

const { item } = Astro.params;

if (!itemExists(item)) {

  return Astro.rewrite("/404");

}

---
```

You can also conditionally rewrite based on an HTTP response status, for example to display a certain page on your site when visiting a URL that doesn’t exist:

```

export const onRequest = async (context, next) => {

  const response = await next();

  if (response.status === 404) {

    return context.rewrite("/");

  }

  return response;

}
```

Before displaying the content from the specified rewrite path, the function `Astro.rewrite()` will trigger a new, complete rendering phase. This re-executes any middleware for the new route/request.

See the [`Astro.rewrite()` API reference](https://docs.astro.build/en/reference/api-reference/#rewrite) for more information.

## Route Priority Order

[Section titled Route Priority Order](https://docs.astro.build/en/guides/routing/#route-priority-order)

It’s possible for multiple defined routes to attempt to build the same URL path. For example, all of these routes could build `/posts/create`:

- Directorysrc/pages/


- \[…slug\].astro
- Directoryposts/


- create.astro
- \[page\].astro
- \[pid\].ts
- \[…slug\].astro

Astro needs to know which route should be used to build the page. To do so, it sorts them according to the following rules in order:

- Astro [reserved routes](https://docs.astro.build/en/guides/routing/#reserved-routes)
- Routes with more path segments will take precedence over less specific routes. In the example above, all routes under `/posts/` take precedence over `/[...slug].astro` at the root.
- Static routes without path parameters will take precedence over dynamic routes. E.g. `/posts/create.astro` takes precedence over all the other routes in the example.
- Dynamic routes using named parameters take precedence over rest parameters. E.g. `/posts/[page].astro` takes precedence over `/posts/[...slug].astro`.
- Pre-rendered dynamic routes take precedence over server dynamic routes.
- Endpoints take precedence over pages.
- File-based routes take precedence over redirects.
- If none of the rules above decide the order, routes are sorted alphabetically based on the default locale of your Node installation.

Given the example above, here are a few examples of how the rules will match a requested URL to the route used to build the HTML:

- `pages/posts/create.astro` \- Will build only `/posts/create`
- `pages/posts/[pid].ts` \- Will build `/posts/abc`, `/posts/xyz`, etc. But not `/posts/create`
- `pages/posts/[page].astro` \- Will build `/posts/1`, `/posts/2`, etc. But not `/posts/create`, `/posts/abc` nor `/posts/xyz`
- `pages/posts/[...slug].astro` \- Will build `/posts/1/2`, `/posts/a/b/c`, etc. But not `/posts/create`, `/posts/1`, `/posts/abc`, etc.
- `pages/[...slug].astro` \- Will build `/abc`, `/xyz`, `/abc/xyz`, etc. But not `/posts/create`, `/posts/1`, `/posts/abc`, etc.

### Reserved routes

[Section titled Reserved routes](https://docs.astro.build/en/guides/routing/#reserved-routes)

Internal routes take priority over any user-defined or integration-defined routes as they are required for Astro features to work. The following are Astro’s reserved routes:

- `_astro/`: Serves all of the static assets to the client, including CSS documents, bundled client scripts, optimized images, and any Vite assets.
- `_server_islands/`: Serves the dynamic components deferred into a [server island](https://docs.astro.build/en/guides/server-islands/).
- `_actions/`: Serves any defined [actions](https://docs.astro.build/en/guides/actions/).

## Pagination

[Section titled Pagination](https://docs.astro.build/en/guides/routing/#pagination)

Astro supports built-in pagination for large collections of data that need to be split into multiple pages. Astro will generate common pagination properties, including previous/next page URLs, total number of pages, and more.

Paginated route names should use the same `[bracket]` syntax as a standard dynamic route. For instance, the file name `/astronauts/[page].astro` will generate routes for `/astronauts/1`, `/astronauts/2`, etc, where `[page]` is the generated page number.

You can use the `paginate()` function to generate these pages for an array of values like so:

```

---

export function getStaticPaths({ paginate }) {

  const astronautPages = [\
\
    { astronaut: "Neil Armstrong" },\
\
    { astronaut: "Buzz Aldrin" },\
\
    { astronaut: "Sally Ride" },\
\
    { astronaut: "John Glenn" },\
\
  ];

  // Generate pages from our array of astronauts, with 2 to a page

  return paginate(astronautPages, { pageSize: 2 });

}

// All paginated data is passed on the "page" prop

const { page } = Astro.props;

---

<!-- Display the current page number. `Astro.params.page` can also be used! -->

<h1>Page {page.currentPage}</h1>

<ul>

  <!-- List the array of astronaut info -->

  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}

</ul>
```

This generates the following pages, with 2 items to a page:

- `/astronauts/1` \- Page 1: Displays “Neil Armstrong” and “Buzz Aldrin”
- `/astronauts/2` \- Page 2: Displays “Sally Ride” and “John Glenn”

### The `page` prop

[Section titled The page prop](https://docs.astro.build/en/guides/routing/#the-page-prop)

When you use the `paginate()` function, each page will be passed its data via a `page` prop. The `page` prop has many useful properties that you can use to build pages and links between them:

```

interface Page<T = any> {

  /** array containing the page’s slice of data that you passed to the paginate() function */

  data: T[];

  /** metadata */

  /** the count of the first item on the page, starting from 0 */

  start: number;

  /** the count of the last item on the page, starting from 0 */

  end: number;

  /** total number of results */

  total: number;

  /** the current page number, starting from 1 */

  currentPage: number;

  /** number of items per page (default: 10) */

  size: number;

  /** number of last page */

  lastPage: number;

  url: {

    /** url of the current page */

    current: string;

    /** url of the previous page (if there is one) */

    prev: string | undefined;

    /** url of the next page (if there is one) */

    next: string | undefined;

    /** url of the first page (if the current page is not the first page) */

    first: string | undefined;

    /** url of the last page (if the current page in not the last page) */

    last: string | undefined;

  };

}
```

The following example displays current information for the page along with links to navigate between pages:

```

---

// Paginate same list of `{ astronaut }` objects as the previous example

export function getStaticPaths({ paginate }) { /* ... */ }

const { page } = Astro.props;

---

<h1>Page {page.currentPage}</h1>

<ul>

  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}

</ul>

{page.url.first ? <a href={page.url.first}>First</a> : null}

{page.url.prev ? <a href={page.url.prev}>Previous</a> : null}

{page.url.next ? <a href={page.url.next}>Next</a> : null}

{page.url.last ? <a href={page.url.last}>Last</a> : null}
```

Learn more about [the pagination `page` prop](https://docs.astro.build/en/reference/routing-reference/#the-pagination-page-prop).

### Nested Pagination

[Section titled Nested Pagination](https://docs.astro.build/en/guides/routing/#nested-pagination)

A more advanced use-case for pagination is **nested pagination.** This is when pagination is combined with other dynamic route params. You can use nested pagination to group your paginated collection by some property or tag.

For example, if you want to group your paginated Markdown posts by some tag, you would use nested pagination by creating a `/src/pages/[tag]/[page].astro` page that would match the following URLS:

- `/red/1` (tag=red)
- `/red/2` (tag=red)
- `/blue/1` (tag=blue)
- `/green/1` (tag=green)

Nested pagination works by returning an array of `paginate()` results from `getStaticPaths()`, one for each grouping.

In the following example, we will implement nested pagination to build the URLs listed above:

```

---

export function getStaticPaths({ paginate }) {

  const allTags = ["red", "blue", "green"];

  const allPosts = Object.values(import.meta.glob("../pages/post/*.md", { eager: true }));

  // For every tag, return a `paginate()` result.

  // Make sure that you pass `{ params: { tag }}` to `paginate()`

  // so that Astro knows which tag grouping the result is for.

  return allTags.flatMap((tag) => {

    const filteredPosts = allPosts.filter((post) => post.frontmatter.tag === tag);

    return paginate(filteredPosts, {

      params: { tag },

      pageSize: 10

    });

  });

}

const { page } = Astro.props;

const params = Astro.params;
```

## Excluding pages

[Section titled Excluding pages](https://docs.astro.build/en/guides/routing/#excluding-pages)

You can exclude pages or directories within `src/pages` from being built by prefixing their names with an underscore ( `_`). Files with the `_` prefix won’t be recognized by the router and won’t be placed into the `dist/` directory.

You can use this to temporarily disable pages, and also to put tests, utilities, and components in the same folder as their related pages.

In this example, only `src/pages/index.astro` and `src/pages/projects/project1.md` will be built as page routes and HTML files.

- Directorysrc/pages/


- Directory\_hidden-directory/


- page1.md
- page2.md

- \_hidden-page.astro
- **index.astro**
- Directoryprojects/


- \_SomeComponent.astro
- \_utils.js
- **project1.md**

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Endpoints Guide
[Skip to content](https://docs.astro.build/en/guides/endpoints/#_top)

# Endpoints

Astro lets you create custom endpoints to serve any kind of data. You can use this to generate images, expose an RSS document, or use them as API Routes to build a full API for your site.

In statically-generated sites, your custom endpoints are called at build time to produce static files. If you opt in to [SSR](https://docs.astro.build/en/guides/on-demand-rendering/) mode, custom endpoints turn into live server endpoints that are called on request. Static and SSR endpoints are defined similarly, but SSR endpoints support additional features.

## Static File Endpoints

[Section titled Static File Endpoints](https://docs.astro.build/en/guides/endpoints/#static-file-endpoints)

To create a custom endpoint, add a `.js` or `.ts` file to the `/pages` directory. The `.js` or `.ts` extension will be removed during the build process, so the name of the file should include the extension of the data you want to create. For example, `src/pages/data.json.ts` will build a `/data.json` endpoint.

Endpoints export a `GET` function (optionally `async`) that receives a [context object](https://docs.astro.build/en/reference/api-reference/) with properties similar to the `Astro` global. Here, it returns a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object with a `name` and `url`, and Astro will call this at build time and use the contents of the body to generate the file.

```

// Outputs: /builtwith.json

export function GET({ params, request }) {

  return new Response(

    JSON.stringify({

      name: "Astro",

      url: "https://astro.build/",

    }),

  );

}
```

Since Astro v3.0, the returned `Response` object doesn’t have to include the `encoding` property anymore. For example, to produce a binary `.png` image:

```

export async function GET({ params, request }) {

  const response = await fetch(

    "https://docs.astro.build/assets/full-logo-light.png",

  );

  return new Response(await response.arrayBuffer());

}
```

You can also type your endpoint functions using the `APIRoute` type:

```

import type { APIRoute } from "astro";

export const GET: APIRoute = async ({ params, request }) => {...}
```

### `params` and Dynamic routing

[Section titled params and Dynamic routing](https://docs.astro.build/en/guides/endpoints/#params-and-dynamic-routing)

Endpoints support the same [dynamic routing](https://docs.astro.build/en/guides/routing/#dynamic-routes) features that pages do. Name your file with a bracketed parameter name and export a [`getStaticPaths()` function](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths). Then, you can access the parameter using the `params` property passed to the endpoint function:

```

import type { APIRoute } from "astro";

const usernames = ["Sarah", "Chris", "Yan", "Elian"];

export const GET: APIRoute = ({ params, request }) => {

  const id = params.id;

  return new Response(

    JSON.stringify({

      name: usernames[id],

    }),

  );

};

export function getStaticPaths() {

  return [\
\
    { params: { id: "0" } },\
\
    { params: { id: "1" } },\
\
    { params: { id: "2" } },\
\
    { params: { id: "3" } },\
\
  ];

}
```

This will generate four JSON endpoints at build time: `/api/0.json`, `/api/1.json`, `/api/2.json` and `/api/3.json`. Dynamic routing with endpoints works the same as it does with pages, but because the endpoint is a function and not a component, [props](https://docs.astro.build/en/reference/routing-reference/#data-passing-with-props) aren’t supported.

### `request`

[Section titled request](https://docs.astro.build/en/guides/endpoints/#request)

All endpoints receive a `request` property, but in static mode, you only have access to `request.url`. This returns the full URL of the current endpoint and works the same as [Astro.request.url](https://docs.astro.build/en/reference/api-reference/#request) does for pages.

```

import type { APIRoute } from "astro";

export const GET: APIRoute = ({ params, request }) => {

  return new Response(

    JSON.stringify({

      path: new URL(request.url).pathname,

    }),

  );

};
```

## Server Endpoints (API Routes)

[Section titled Server Endpoints (API Routes)](https://docs.astro.build/en/guides/endpoints/#server-endpoints-api-routes)

Everything described in the static file endpoints section can also be used in SSR mode: files can export a `GET` function which receives a [context object](https://docs.astro.build/en/reference/api-reference/) with properties similar to the `Astro` global.

But, unlike in `static` mode, when you enable on-demand rendering for a route, the endpoint will be built when it is requested. This unlocks new features that are unavailable at build time, and allows you to build API routes that listen for requests and securely execute code on the server at runtime.

Your routes will be rendered on demand by default in `server` mode. In `static` mode, you must opt out of prerendering for each custom endpoint with `export const prerender = false`.

![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Call endpoints from the server](https://docs.astro.build/en/recipes/call-endpoints/)

Server endpoints can access `params` without exporting `getStaticPaths`, and they can return a `Response` object, allowing you to set status codes and headers:

```

import { getProduct } from "../db";

export async function GET({ params }) {

  const id = params.id;

  const product = await getProduct(id);

  if (!product) {

    return new Response(null, {

      status: 404,

      statusText: "Not found",

    });

  }

  return new Response(JSON.stringify(product), {

    status: 200,

    headers: {

      "Content-Type": "application/json",

    },

  });

}
```

This will respond to any request that matches the dynamic route. For example, if we navigate to `/helmet.json`, `params.id` will be set to `helmet`. If `helmet` exists in the mock product database, the endpoint will use a `Response` object to respond with JSON and return a successful [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/API/Response/status). If not, it will use a `Response` object to respond with a `404`.

In SSR mode, certain providers require the `Content-Type` header to return an image. In this case, use a `Response` object to specify a `headers` property. For example, to produce a binary `.png` image:

```

export async function GET({ params, request }) {

  const response = await fetch(

    "https://docs.astro.build/assets/full-logo-light.png",

  );

  const buffer = Buffer.from(await response.arrayBuffer());

  return new Response(buffer, {

    headers: { "Content-Type": "image/png" },

  });

}
```

### HTTP methods

[Section titled HTTP methods](https://docs.astro.build/en/guides/endpoints/#http-methods)

In addition to the `GET` function, you can export a function with the name of any [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods). When a request comes in, Astro will check the method and call the corresponding function.

You can also export an `ALL` function to match any method that doesn’t have a corresponding exported function. If there is a request with no matching method, it will redirect to your site’s [404 page](https://docs.astro.build/en/basics/astro-pages/#custom-404-error-page).

```

export const GET: APIRoute = ({ params, request }) => {

  return new Response(

    JSON.stringify({

      message: "This was a GET!",

    }),

  );

};

export const POST: APIRoute = ({ request }) => {

  return new Response(

    JSON.stringify({

      message: "This was a POST!",

    }),

  );

};

export const DELETE: APIRoute = ({ request }) => {

  return new Response(

    JSON.stringify({

      message: "This was a DELETE!",

    }),

  );

};

export const ALL: APIRoute = ({ request }) => {

  return new Response(

    JSON.stringify({

      message: `This was a ${request.method}!`,

    }),

  );

};
```

If you define a `GET` function but no `HEAD` function, Astro will automatically handle `HEAD` requests by calling the `GET` function and stripping the body from the response.

![](https://docs.astro.build/houston_chef.webp)**Related recipes**

- [Verify a Captcha](https://docs.astro.build/en/recipes/captcha/)
- [Build forms with API routes](https://docs.astro.build/en/recipes/build-forms-api/)

### `request`

[Section titled request](https://docs.astro.build/en/guides/endpoints/#request-1)

In SSR mode, the `request` property returns a fully usable [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) object that refers to the current request. This allows you to accept data and check headers:

```

export const POST: APIRoute = async ({ request }) => {

  if (request.headers.get("Content-Type") === "application/json") {

    const body = await request.json();

    const name = body.name;

    return new Response(

      JSON.stringify({

        message: "Your name was: " + name,

      }),

      {

        status: 200,

      },

    );

  }

  return new Response(null, { status: 400 });

};
```

### Redirects

[Section titled Redirects](https://docs.astro.build/en/guides/endpoints/#redirects)

The endpoint context exports a `redirect()` utility similar to `Astro.redirect`:

```

import { getLinkUrl } from "../db";

export async function GET({ params, redirect }) {

  const { id } = params;

  const link = await getLinkUrl(id);

  if (!link) {

    return new Response(null, {

      status: 404,

      statusText: "Not found",

    });

  }

  return redirect(link, 307);

}
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fendpoints%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=79835266)

## CMS Integration with Astro
[Skip to content](https://docs.astro.build/en/guides/cms/#_top)

# Use a CMS with Astro

**Ready to connect a Headless CMS to your Astro project?** Follow one of our guides to integrate a CMS.

## CMS Guides

[Section titled CMS Guides](https://docs.astro.build/en/guides/cms/#cms-guides)

Note that many of these pages are **stubs**: they’re collections of resources waiting for your contribution!

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


## Why use a CMS?

[Section titled Why use a CMS?](https://docs.astro.build/en/guides/cms/#why-use-a-cms)

A Content Management System lets you write content and manage assets outside of your Astro project.

This unlocks new features for working with content. Most CMSes give you a visual content editor, the ability to specify standard types of content, and a way to collaborate with others.

A CMS can be useful for content that follows a particular structure, often giving you a dashboard-like experience and WYSIWYG editing tools. You might use a CMS to write blog posts using a CMS’s rich text editor instead of Markdown files. Or you might use a CMS to maintain product listings for an eCommerce shop, making certain fields required to avoid incomplete listings.

Your Astro project can then fetch your content from your CMS and display it, wherever and however you want on your site.

## Which CMSes work well with Astro?

[Section titled Which CMSes work well with Astro?](https://docs.astro.build/en/guides/cms/#which-cmses-work-well-with-astro)

Because Astro takes care of the _presentation_ of your content, you’ll want to choose a _headless_ CMS, like those in the list above. This means that the CMS helps you write your content, but doesn’t generate a site that displays it. Instead, you fetch the content data and use in your Astro project.

Some headless CMSes, like Storyblok, provide an Astro [integration](https://docs.astro.build/en/guides/integrations-guide/) that helps fetch the content specifically for an Astro site. Others provide a JavaScript SDK, a library that you install and use to fetch your remote content.

Explore a [list of over 100 headless content management systems](https://jamstack.org/headless-cms/) External where you can filter by type (e.g. Git-based, API driven) and license (open-source or closed-source).

## Can I use Astro without a CMS?

[Section titled Can I use Astro without a CMS?](https://docs.astro.build/en/guides/cms/#can-i-use-astro-without-a-cms)

Yes! Astro provides built-in support for [Markdown](https://docs.astro.build/en/guides/markdown-content/).

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=17524067)

## Custom Fonts Guide
[Skip to content](https://docs.astro.build/en/guides/fonts/#_top)

# Using custom fonts

This guide will show you how to add web fonts to your project and use them in your components.

## Using a local font file

[Section titled Using a local font file](https://docs.astro.build/en/guides/fonts/#using-a-local-font-file)

This example will demonstrate adding a custom font using the font file `DistantGalaxy.woff`.

1. Add your font file to `public/fonts/`.

2. Add the following `@font-face` statement to your CSS. This could be in a global `.css` file you import, a `<style is:global>` block, or a `<style>` block in a specific layout or component where you want to use this font.



```


/* Register your custom font family and tell the browser where to find it. */

@font-face {

     font-family: 'DistantGalaxy';

     src: url('/fonts/DistantGalaxy.woff') format('woff');

     font-weight: normal;

     font-style: normal;

     font-display: swap;

}
```

3. Use the `font-family` value from the `@font-face` statement to style elements in your component or layout. In this example, the `<h1>` heading will have the custom font applied, while the paragraph `<p>` will not.



```


   ---

   ---




<h1>In a galaxy far, far away...</h1>




<p>Custom fonts make my headings much cooler!</p>




<style>

h1 {

     font-family: 'DistantGalaxy', sans-serif;

}

</style>
```


## Using Fontsource

[Section titled Using Fontsource](https://docs.astro.build/en/guides/fonts/#using-fontsource)

The [Fontsource](https://fontsource.org/) project simplifies using Google Fonts and other open-source fonts. It provides npm modules you can install for the fonts you want to use.

1. Find the font you want to use in [Fontsource’s catalog](https://fontsource.org/). This example will use [Twinkle Star](https://fontsource.org/fonts/twinkle-star).

2. Install the package for your chosen font.




- [npm](https://docs.astro.build/en/guides/fonts/#tab-panel-1798)
- [pnpm](https://docs.astro.build/en/guides/fonts/#tab-panel-1799)
- [Yarn](https://docs.astro.build/en/guides/fonts/#tab-panel-1800)

```

npm install @fontsource/twinkle-star
```

```

pnpm add @fontsource/twinkle-star
```

```

yarn add @fontsource/twinkle-star
```

3. Import the font package in the component where you want to use the font. Usually, you will want to do this in a common layout component to make sure the font is available across your site.

The import will automatically add the necessary `@font-face` rules needed to set up the font.



```


   ---

import '@fontsource/twinkle-star';

   ---
```

4. Use the font’s name as shown in the `body` example on its Fontsource page as the `font-family` value. This will work anywhere you can write CSS in your Astro project.



```


h1 {

     font-family: "Twinkle Star", cursive;

}
```


To optimize your website’s rendering times, you may want to preload fonts that are essential for the initial page display.
See the [Fontsource guide to preloading fonts](https://fontsource.org/docs/getting-started/preload) for more information and usage.

## Register fonts in Tailwind

[Section titled Register fonts in Tailwind](https://docs.astro.build/en/guides/fonts/#register-fonts-in-tailwind)

If you are using [Tailwind](https://docs.astro.build/en/guides/styling/#tailwind), you can use either of the previous methods on this page to install your font, with some modifications. You can either add an [`@font-face` statement for a local font](https://docs.astro.build/en/guides/fonts/#using-a-local-font-file) or use [Fontsource’s `import` strategy](https://docs.astro.build/en/guides/fonts/#using-fontsource) to install your font.

To register your font in Tailwind:

1. Follow either of the guides above, but skip the final step of adding `font-family` to your CSS.

2. Add the typeface name to `src/styles/global.css`.

This example adds `Inter` to the sans-serif font stack.



```


@import 'tailwindcss';




@theme {

     --font-sans: 'Inter', 'sans-serif';

}
```









Now, all sans-serif text (the default with Tailwind) in your project will use your chosen font and the `font-sans` class will also apply the Inter font.


See [Tailwind’s docs on adding custom font families](https://tailwindcss.com/docs/font-family#using-custom-values) for more information.

## More resources

[Section titled More resources](https://docs.astro.build/en/guides/fonts/#more-resources)

- Learn how web fonts work in [MDN’s web fonts guide](https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts).
- Generate CSS for your font with [Font Squirrel’s Webfont Generator](https://www.fontsquirrel.com/tools/webfont-generator).

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Ffonts%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=71737845)

## Astro Troubleshooting Guide
[Skip to content](https://docs.astro.build/en/guides/troubleshooting/#_top)

# Troubleshooting

Astro provides several different tools to help you troubleshoot and debug your code.

## Tips and tricks

[Section titled Tips and tricks](https://docs.astro.build/en/guides/troubleshooting/#tips-and-tricks)

### Debugging with `console.log()`

[Section titled Debugging with console.log()](https://docs.astro.build/en/guides/troubleshooting/#debugging-with-consolelog)

`console.log()` is a simple-but-popular method of debugging your Astro code. Where you write your `console.log()` statement will determine where your debugging output is printed:

```

---

console.log('Hi! I’m the server. This is logged in the terminal where Astro is running.');

---

<script>

console.log('Hi! I’m the client. This is logged in browser dev console.');

</script>
```

A `console.log()` statement in Astro frontmatter will always output to the **terminal** running the Astro CLI. This is because Astro runs on the server, and never in the browser.

Code that is written or imported inside of an Astro `<script>` tag is run in the browser. Any `console.log()` statements or other debug output will be printed to the **console in your browser**.

### Debugging framework components

[Section titled Debugging framework components](https://docs.astro.build/en/guides/troubleshooting/#debugging-framework-components)

[Framework components](https://docs.astro.build/en/guides/framework-components/) (like React and Svelte) are unique: They render server-side by default, meaning that `console.log()` debug output will be visible in the terminal. However, they can also be hydrated for the browser, which may cause your debug logs to also appear in the browser.

This can be useful for debugging differences between the server output and the hydrated components in the browser.

### Astro `<Debug />` component

[Section titled Astro &lt;Debug /&gt; component](https://docs.astro.build/en/guides/troubleshooting/#astro-debug--component)

To help you debug your Astro components, Astro provides a built-in `<Debug />` component which renders any value directly into your component HTML template.

This component provides a way to inspect values on the client-side, without any JavaScript. It can be useful for quick debugging in the browser without having to flip back-and-forth between your terminal and your browser.

```

---

import { Debug } from 'astro:components';

const sum = (a, b) => a + b;

---

<!-- Example: Outputs {answer: 6} to the browser -->

<Debug answer={sum(2, 4)} />
```

The Debug component supports a variety of syntax options for even more flexible and concise debugging:

```

---

import { Debug } from 'astro:components';

const sum = (a, b) => a + b;

const answer = sum(2, 4);

---

<!-- Example: All three examples are equivalent. -->

<Debug answer={sum(2, 4)} />

<Debug {{answer: sum(2, 4)}} />

<Debug {answer} />
```

## Common Error Messages

[Section titled Common Error Messages](https://docs.astro.build/en/guides/troubleshooting/#common-error-messages)

Here are some common error messages you might see in the terminal, what they might mean, and what to do about them. See our [full error reference guide](https://docs.astro.build/en/reference/error-reference/) for a complete list of Astro errors you may encounter.

### Cannot use import statement outside a module

[Section titled Cannot use import statement outside a module](https://docs.astro.build/en/guides/troubleshooting/#cannot-use-import-statement-outside-a-module)

In Astro components, `<script>` tags are loaded as [JS modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) by default. If you have included the [`is:inline` directive](https://docs.astro.build/en/reference/directives-reference/#isinline) or any other attribute in your tag, this default behavior is removed.

**Solution**: If you have added any attributes to your `<script>` tag, you must also add the `type="module"` attribute to be able to use import statements.

**Status**: Expected Astro behavior, as intended.

**Not sure that this is your problem?**

Check to see if anyone else has reported [this issue](https://github.com/withastro/astro/issues?q=is%3Aissue+is%3Aopen+Cannot+use+import+statement)!

### `document` (or `window`) is not defined

[Section titled document (or window) is not defined](https://docs.astro.build/en/guides/troubleshooting/#document-or-window-is-not-defined)

This error occurs when trying to access `document` or `window` on the server.

Astro components run on the server, so you can’t access these browser-specific objects within the frontmatter.

Framework components run on the server by default, so this error can occur when accessing `document` or `window` during rendering.

**Solution**: Determine the code that calls `document` or `window`. If you aren’t using `document` or `window` directly and still getting this error, check to see if any packages you’re importing are meant to run on the client.

- If the code is in an Astro component, move it to a `<script>` tag outside of the frontmatter. This tells Astro to run this code on the client, where `document` and `window` are available.

- If the code is in a framework component, try to access these objects after rendering using lifecycle methods (e.g. [`useEffect()`](https://react.dev/reference/react/useEffect) in React, [`onMounted()`](https://vuejs.org/api/composition-api-lifecycle.html#onmounted) in Vue, and [`onMount()`](https://svelte.dev/docs#run-time-svelte-onmount) in Svelte). Tell the framework component to hydrate client-side by using a [client:](https://docs.astro.build/en/reference/directives-reference/#client-directives) directive, like `client:load`, to run these lifecycle methods. You can also prevent the component from rendering on the server at all by adding the [`client:only`](https://docs.astro.build/en/reference/directives-reference/#clientonly) directive.


**Status**: Expected Astro behavior, as intended.

### Expected a default export

[Section titled Expected a default export](https://docs.astro.build/en/guides/troubleshooting/#expected-a-default-export)

This error can be thrown when trying to import or render an invalid component, or one that is not working properly. (This particular message occurs because of the way importing a UI component works in Astro.)

**Solution**: Try looking for errors in any component you are importing and rendering, and make sure it’s working correctly. Consider opening an Astro starter template from [astro.new](https://astro.new/) and troubleshooting just your component in a minimal Astro project.

**Status**: Expected Astro behavior, as intended.

### Refused to execute inline script

[Section titled Refused to execute inline script](https://docs.astro.build/en/guides/troubleshooting/#refused-to-execute-inline-script)

You may see the following error logged in the browser console:

> Refused to execute inline script because it violates the following Content Security Policy directive: …

This means that your site’s [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) (CSP) disallows running inline `<script>` tags, which Astro outputs by default.

**Solution:** Update your CSP to include `script-src: 'unsafe-inline'` to allow inline scripts to run. Alternatively, you can use a third-party integration such as [`astro-shield`](https://github.com/KindSpells/astro-shield) to generate the CSP headers for you.

## Common gotchas

[Section titled Common gotchas](https://docs.astro.build/en/guides/troubleshooting/#common-gotchas)

### My component is not rendering

[Section titled My component is not rendering](https://docs.astro.build/en/guides/troubleshooting/#my-component-is-not-rendering)

First, check to see that you have **imported the component** in your [`.astro` component script](https://docs.astro.build/en/basics/astro-components/#the-component-script) or [`.mdx` file](https://docs.astro.build/en/guides/integrations-guide/mdx/#using-components-in-mdx).

Then check your import statement:

- Is your import linking to the wrong place? (Check your import path.)

- Does your import have the same name as the imported component? (Check your component name and that it [follows the `.astro` syntax](https://docs.astro.build/en/reference/astro-syntax/#differences-between-astro-and-jsx).)

- Have you included the extension in the import? (Check that your imported file contains an extension. e.g. `.astro`, `.md`, `.vue`, `.svelte`. Note: File extensions are **not** required for `.js(x)` and `.ts(x)` files only.)


### My component is not interactive

[Section titled My component is not interactive](https://docs.astro.build/en/guides/troubleshooting/#my-component-is-not-interactive)

If your component is rendering (see above) but is not responding to user interaction, then you may be missing a [`client:*` directive](https://docs.astro.build/en/reference/directives-reference/#client-directives) to hydrate your component.

By default, a [UI Framework component is not hydrated in the client](https://docs.astro.build/en/guides/framework-components/#hydrating-interactive-components). If no `client:*` directive is provided, its HTML is rendered onto the page without JavaScript.

### Cannot find package ‘X’

[Section titled Cannot find package ‘X’](https://docs.astro.build/en/guides/troubleshooting/#cannot-find-package-x)

If you see a `"Cannot find package 'react'"` (or similar) warning when you start up Astro, that means that you need to install that package into your project. Not all package managers will install peer dependencies for you automatically. If you are on Node v16+ and using npm, you should not need to worry about this section.

React, for example, is a peer dependency of the `@astrojs/react` integration. That means that you should install the official `react` and `react-dom` packages alongside your integration. The integration will then pull from these packages automatically.

```

# Example: Install integrations and frameworks together

npm install @astrojs/react react react-dom
```

See [Astro’s integration guide](https://docs.astro.build/en/guides/integrations-guide/) for instructions on adding framework renderers, CSS tools and other packages to Astro.

### Using Astro with Yarn 2+ (Berry)

[Section titled Using Astro with Yarn 2+ (Berry)](https://docs.astro.build/en/guides/troubleshooting/#using-astro-with-yarn-2-berry)

Yarn 2+, a.k.a. Berry, uses a technique called [Plug’n’Play (PnP)](https://yarnpkg.com/features/pnp) to store and manage Node modules, which can [cause problems](https://github.com/withastro/astro/issues/3450) while initializing a new Astro project using `create astro` or while working with Astro. A workaround is to set the [`nodeLinker` property](https://yarnpkg.com/configuration/yarnrc#nodeLinker) in `.yarnrc.yml` to `node-modules`:

```

nodeLinker: "node-modules"
```

### Adding dependencies to Astro in a monorepo

[Section titled Adding dependencies to Astro in a monorepo](https://docs.astro.build/en/guides/troubleshooting/#adding-dependencies-to-astro-in-a-monorepo)

When working with Astro in a monorepo setup, project dependencies should be added in each project’s own `package.json` file.

However, you may also want to use Astro in the root of the monorepo (e.g. [Nx projects recommend installing dependencies at the root](https://github.com/nrwl/nx/issues/3023#issuecomment-630558318)). In this case, manually add Astro-related dependencies (e.g. `@astrojs/vue`, `astro-component-lib`) to the `vite.ssr.noExternal` part of Astro’s config to ensure that these dependencies are properly installed and bundled:

```

import { defineConfig } from 'astro/config'

export default defineConfig({

  vite: {

    ssr: {

      noExternal: [\
\
        '@astrojs/vue',\
\
        'astro-component-lib',\
\
      ]

    }

  }

})
```

### Using `<head>` in a component

[Section titled Using &lt;head&gt; in a component](https://docs.astro.build/en/guides/troubleshooting/#using-head-in-a-component)

In Astro, using a `<head>` tag works like any other HTML tag: it does not get moved to the top of the page or merged with the existing `<head>`. Because of this, you usually only want to include one `<head>` tag throughout a page. We recommend writing that single `<head>` and its contents in a [layout component](https://docs.astro.build/en/basics/layouts/).

### An unexpected `<style>` is included

[Section titled An unexpected &lt;style&gt; is included](https://docs.astro.build/en/guides/troubleshooting/#an-unexpected-style-is-included)

You may notice an imported component’s `<style>` tag included in your HTML source even if that component doesn’t appear in the final output. For example, this will occur with [conditionally rendered](https://docs.astro.build/en/reference/astro-syntax/#dynamic-html) components that are not displayed.

Astro’s build process works on the module graph: once a component is included in the template, its `<style>` tag is processed, optimized, and bundled, whether it appears in the final output or not.

## Escaping special characters in Markdown

[Section titled Escaping special characters in Markdown](https://docs.astro.build/en/guides/troubleshooting/#escaping-special-characters-in-markdown)

Certain characters have a special meaning in Markdown. You may need to use a different syntax if you want to display them. To do this, you can use [HTML entities](https://developer.mozilla.org/en-US/docs/Glossary/Entity) for these characters instead.

For example, to prevent `<` being interpreted as the beginning of an HTML element, write `&lt;`.

## Creating minimal reproductions

[Section titled Creating minimal reproductions](https://docs.astro.build/en/guides/troubleshooting/#creating-minimal-reproductions)

When troubleshooting your code, it can be helpful to create a **minimal reproduction** of the issue that you can share. This is a smaller, simplified Astro project that demonstrates your issue. Having a working reproduction in a new project helps to confirm that this is a repeatable problem, and is not caused by something else in your personal environment or existing project.

Sharing a minimal reproduction is helpful when asking for help in our support threads and is often required when filing a bug report to Astro.

### Create a StackBlitz via [astro.new](https://astro.new/repro)

[Section titled Create a StackBlitz via astro.new](https://docs.astro.build/en/guides/troubleshooting/#create-a-stackblitz-via-astronew)

You can use [astro.new](https://astro.new/repro) to create a new Astro project with a single click. For minimal reproductions, we strongly recommend starting from the minimal (empty) example running in [StackBlitz](https://stackblitz.com/), with as little extra code as possible.

StackBlitz will run this Astro project in the browser, outside of your local environment. It will also provide you with a shareable link so that any Astro maintainer or support squad member can view your minimal reproduction outside of their own local environment. This means that everyone is viewing the exact same project, with the same configuration and dependencies. This makes it easy for someone else to help troubleshoot your code. If the issue is reproducible, it allows you to verify that the issue lies within the Astro code itself and you can feel confident submitting a bug report.

Note that not every issue is reproducible in StackBlitz. For example, your issue might be dependent on a specific environment or package manager, or it may involve HTML Streaming, which isn’t supported in StackBlitz. In this case, create a new minimal (empty) Astro project using the CLI, reproduce the issue, and upload it to a GitHub repository. Instead of sharing a StackBlitz URL, provide a link to the GitHub repository of your minimal reproduction.

### Minimal code

[Section titled Minimal code](https://docs.astro.build/en/guides/troubleshooting/#minimal-code)

Once your empty project is set up, go through the steps to reproduce the issue. This can include adding packages, changing configuration, and writing code.

You should only add the minimum amount of code necessary to reproduce the issue. Do not reproduce other elements of your existing project, and remove all code that is not directly related to the issue.

### Create an issue

[Section titled Create an issue](https://docs.astro.build/en/guides/troubleshooting/#create-an-issue)

If your issue can be reproduced, then it is time to create an issue and file a bug report!

Go to the appropriate Astro repository on GitHub and open a new issue. Most repositories have an issue template that will ask questions or require information in order to submit. It’s important that you follow these templates because if you don’t provide the information we need, then we have to ask you for it… and no one is working on your issue!

Include the link to your minimal reproduction on StackBlitz (or GitHub repository, if necessary). Start with a description of the expected versus actual behavior to provide context for the issue. Then, include clear, step-by-step instructions on how to replicate the issue in an Astro project.

## Need more?

[Section titled Need more?](https://docs.astro.build/en/guides/troubleshooting/#need-more)

Come and chat with us on [Discord](https://astro.build/chat) and explain your issue in the `#support` forum channel. We’re always happy to help!

Visit the current [open Issues in Astro](https://github.com/withastro/astro/issues/) to see if you are encountering a known problem or file a bug report.

You can also visit [RFC Discussions](https://github.com/withastro/rfcs/discussions/) to see whether you’ve found a known limitation of Astro, and check to see whether there are current proposals related to your use case.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Ftroubleshooting%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=17382177)

## Islands Architecture Overview
[Skip to content](https://docs.astro.build/en/concepts/islands/#_top)

# Islands architecture

Astro helped pioneer and popularize a new frontend architecture pattern called **Islands Architecture.** Islands architecture works by rendering the majority of your page to fast, static HTML with smaller “islands” of JavaScript added when interactivity or personalization is needed on the page (an image carousel, for example). This avoids the monolithic JavaScript payloads that slow down the responsiveness of many other, modern JavaScript web frameworks.

## A brief history

[Section titled A brief history](https://docs.astro.build/en/concepts/islands/#a-brief-history)

The term “component island” was first coined by Etsy’s frontend architect [Katie Sylor-Miller](https://sylormiller.com/) in 2019. This idea was then expanded on and documented in [this post](https://jasonformat.com/islands-architecture/) by Preact creator Jason Miller on August 11, 2020.

> The general idea of an “Islands” architecture is deceptively simple: render HTML pages on the server, and inject placeholders or slots around highly dynamic regions \[…\] that can then be “hydrated” on the client into small self-contained widgets, reusing their server-rendered initial HTML.
>
> — Jason Miller, Creator of Preact

The technique that this architectural pattern builds on is also known as **partial** or **selective hydration.**

In contrast, most JavaScript-based web frameworks hydrate & render an entire website as one large JavaScript application (also known as a single-page application, or SPA). SPAs provide simplicity and power but suffer from page-load performance problems due to heavy client-side JavaScript usage.

SPAs have their place, even [embedded inside an Astro page](https://docs.astro.build/en/guides/migrate-to-astro/from-create-react-app/). But, SPAs lack the native ability to selectively and strategically hydrate, making them a heavy-handed choice for most projects on the web today.

Astro became popular as the first mainstream JavaScript web framework with selective hydration built-in, using that same component islands pattern first coined by Sylor-Miller. We’ve since expanded and evolved on Sylor-Miller’s original work, which helped to inspire a similar component island approach to dynamically server-rendered content.

## What is an island?

[Section titled What is an island?](https://docs.astro.build/en/concepts/islands/#what-is-an-island)

In Astro, an island is an enhanced UI component on an otherwise static page of HTML.

A [**client island**](https://docs.astro.build/en/concepts/islands/#client-islands) is an interactive JavaScript UI component that is hydrated separately from the rest of the page, while a [**server island**](https://docs.astro.build/en/concepts/islands/#server-islands) is a UI component that server-renders its dynamic content separately from the rest of the page.

Both islands run expensive or slower processes independently, on a per-component basis, for optimized page loads.

## Island components

[Section titled Island components](https://docs.astro.build/en/concepts/islands/#island-components)

Astro components are the building blocks of your page template. They render to static HTML with no client-side runtime.

Think of a client island as an interactive widget floating in a sea of otherwise static, lightweight, server-rendered HTML. Server islands can be added for personalized or dynamic server-rendered elements, such as a logged in visitor’s profile picture.

Static content like text, images, etc.

Image carousel (interactive island)

Source: [Islands Architecture: Jason Miller](https://jasonformat.com/islands-architecture/)

An island always runs in isolation from other islands on the page, and multiple islands can exist on a page. Client islands can still share state and communicate with each other, even though they run in different component contexts.

This flexibility allows Astro to support multiple UI frameworks like [React](https://react.dev/), [Preact](https://preactjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), and [SolidJS](https://www.solidjs.com/). Because they are independent, you can even mix several frameworks on each page.

## Client Islands

[Section titled Client Islands](https://docs.astro.build/en/concepts/islands/#client-islands)

By default, Astro will automatically render every UI component to just HTML & CSS, **stripping out all client-side JavaScript automatically.**

```

<MyReactComponent />
```

This may sound strict, but this behavior is what keeps Astro websites fast by default and protects developers from accidentally sending unnecessary or unwanted JavaScript that might slow down their website.

Turning any static UI component into an interactive island requires only a `client:*` directive. Astro then automatically builds and bundles your client-side JavaScript for optimized performance.

```

<!-- This component is now interactive on the page!

     The rest of your website remains static. -->

<MyReactComponent client:load />
```

With islands, client-side JavaScript is only loaded for the explicit interactive components that you mark using `client:*` directives.

And because interaction is configured at the component-level, you can handle different loading priorities for each component based on its usage. For example, `client:idle` tells a component to load when the browser becomes idle, and `client:visible` tells a component to load only once it enters the viewport.

### Benefits of client islands

The most obvious benefit of building with Astro Islands is performance: the majority of your website is converted to fast, static HTML and JavaScript is only loaded for the individual components that need it. JavaScript is one of the slowest assets that you can load per-byte, so every byte counts.

Another benefit is parallel loading. In the example illustration above, the low-priority “image carousel” island doesn’t need to block the high-priority “header” island. The two load in parallel and hydrate in isolation, meaning that the header becomes interactive immediately without having to wait for the heavier carousel lower down the page.

Even better, you can tell Astro exactly how and when to render each component. If that image carousel is really expensive to load, you can attach a special [client directive](https://docs.astro.build/en/reference/directives-reference/#client-directives) that tells Astro to only load the carousel when it becomes visible on the page. If the user never sees it, it never loads.

In Astro, it’s up to you as the developer to explicitly tell Astro which components on the page need to also run in the browser. Astro will only hydrate exactly what’s needed on the page and leave the rest of your site as static HTML.

**Client islands are the secret to Astro’s fast-by-default performance story!**

Read more about [using JavaScript framework components](https://docs.astro.build/en/guides/framework-components/) in your project.

## Server islands

[Section titled Server islands](https://docs.astro.build/en/concepts/islands/#server-islands)

Server islands are a way to move expensive or slow server-side code out of the way of the main rendering process, making it easy to combine high-performance static HTML and dynamic server-generated components.

Add the [`server:defer` directive](https://docs.astro.build/en/reference/directives-reference/#server-directives) to any Astro component on your page to turn it into its own server island:

```

---

import Avatar from "../components/Avatar.astro";

---

<Avatar server:defer />
```

This breaks up your page with smaller areas of server-rendered content that each load in parallel.

Your page’s main content can be rendered immediately with placeholder content, such as a generic avatar until your island’s own content is available. With server islands, having small components of personalized content does not delay the rendering of an otherwise static page.

This rendering pattern was built to be portable. It does not depend on any server infrastructure so it will work with any host, from a Node.js server in a Docker container to the serverless provider of your choice.

### Benefits of server islands

One benefit of server islands is the ability to render the more highly dynamic parts of your page on the fly. This allows the outer shell and main content to be more aggressively cached, providing faster performance.

Another benefit is providing a great visitor experience. Server islands are optimized and load quickly, often even before the browser has even painted the page. But in the short time it takes for your islands to render, you can display custom fallback content and prevent any layout shift.

An example of a site that benefits from Astro’s server islands is an e-commerce storefront. Although the main content of product pages change infrequently, these pages typically have some dynamic pieces:

- The user’s avatar in the header.
- Special deals and sales for the product.
- User reviews.

Using server islands for these elements, your visitor will see the most important part of the page, your product, immediately. Generic avatars, loading spinners, and store announcements can be displayed as fallback content until the personalized parts are available.

Read more about [using server islands](https://docs.astro.build/en/guides/server-islands/) in your project.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fconcepts%2Fislands%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=94110734)

## Bun with Astro Guide
[Skip to content](https://docs.astro.build/en/recipes/bun/#_top)

# Use Bun with Astro

[Bun](https://bun.sh/) is an all-in-one JavaScript runtime & toolkit. See [Bun’s documentation](https://bun.sh/docs) for more information.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/recipes/bun/#prerequisites)

- Bun installed locally on your machine. See the [installation instructions](https://bun.sh/docs/installation) in Bun’s official documentation.

## Create a new Astro project with Bun

[Section titled Create a new Astro project with Bun](https://docs.astro.build/en/recipes/bun/#create-a-new-astro-project-with-bun)

Create a new Astro project with Bun using the following `create-astro` command:

```

bunx create-astro@latest my-astro-project-using-bun
```

## Install dependencies

[Section titled Install dependencies](https://docs.astro.build/en/recipes/bun/#install-dependencies)

If you’re starting a new project using `bunx create-astro`, the CLI will automatically use Bun to install dependencies and you can skip this step.

Otherwise, you’ll need to install your dependencies with Bun:

```

bun install
```

## Add Types

[Section titled Add Types](https://docs.astro.build/en/recipes/bun/#add-types)

Bun publishes the [`@types/bun`](https://www.npmjs.com/package/@types/bun) package, containing the runtime types for Bun.

Install `@types/bun` using the following command:

```

bun add -d @types/bun
```

## Using Astro integrations

[Section titled Using Astro integrations](https://docs.astro.build/en/recipes/bun/#using-astro-integrations)

You can also use any of the official Astro integrations with the `astro add` command:

```

bunx astro add react
```

## Run Astro with Bun

[Section titled Run Astro with Bun](https://docs.astro.build/en/recipes/bun/#run-astro-with-bun)

### Run the development server

[Section titled Run the development server](https://docs.astro.build/en/recipes/bun/#run-the-development-server)

To run the development server using Bun as the runtime, use the following command:

```

bunx --bun astro dev
```

### Building your site with Bun

[Section titled Building your site with Bun](https://docs.astro.build/en/recipes/bun/#building-your-site-with-bun)

To build your site using Bun as the runtime, use the following command:

```

bunx --bun astro build
```

Astro will output your site to the `dist/` directory. Then, you can serve your site using the `preview` command:

```

bunx --bun astro preview
```

## Add SSR with Bun

[Section titled Add SSR with Bun](https://docs.astro.build/en/recipes/bun/#add-ssr-with-bun)

Since Bun features [Node.js API compatibility](https://bun.sh/docs/runtime/nodejs-apis), you can use any Astro adapter for [on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/) with your Astro project:

```

bunx astro add vercel
```

## Testing in Bun

[Section titled Testing in Bun](https://docs.astro.build/en/recipes/bun/#testing-in-bun)

Bun ships with a fast, built-in, Jest-compatible test runner through the `bun test` command. If you like to use that read [`bun test` documentation](https://bun.sh/docs/cli/test).

However, it is also possible to use Cypress or Playwright for a modern approach to testing web apps.

### Cypress

[Section titled Cypress](https://docs.astro.build/en/recipes/bun/#cypress)

Cypress is a front-end testing tool and is on a mission to “make the testing experience enjoyable and generate developer happiness”. This enables you to write end-to-end tests for your Astro site.

Install Cypress with the following command:

```

bun add cypress --dev
```

For the rest of the configuration and to start your first test, follow the rest of Cypress process in the [Astro Testing Guide](https://docs.astro.build/en/guides/testing/#configuration).

### Playwright

[Section titled Playwright](https://docs.astro.build/en/recipes/bun/#playwright)

Playwright is an end-to-end testing framework that allows you to test your Astro code on all modern rendering engines including Chromium, WebKit, and Firefox.

Install Playwright using the following command:

```

bun create playwright
```

To create your first Playwright test, follow the instructions for the rest of the Playwright process in the [Astro Testing Guide](https://docs.astro.build/en/guides/testing/#create-your-first-playwright-test).

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/recipes/bun/#official-resources)

- [Build an app with Astro and Bun](https://bun.sh/guides/ecosystem/astro)

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/recipes/bun/#community-resources)

Using Bun with Astro? Add your blog post or video to this page!

- [Building a Cloudflare Pages site with Bun](https://blog.otterlord.dev/posts/hello-from-bun/) \- blog post
- [Using Bun with Astro and Cloudflare Pages](https://handerson.hashnode.dev/using-bun-with-astro-and-cloudflare-pages) \- blog post

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fbun%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=50575109)

## Astro E-commerce Guide
[Skip to content](https://docs.astro.build/en/guides/ecommerce/#_top)

# E-commerce

With Astro, you can build several e-commerce options, from checkout links to hosted payment pages to building an entire storefront using a payment service API.

## Payment processing overlays

[Section titled Payment processing overlays](https://docs.astro.build/en/guides/ecommerce/#payment-processing-overlays)

Some payment processing services (e.g. [Lemon Squeezy](https://docs.astro.build/en/guides/ecommerce/#lemon-squeezy), [Paddle](https://docs.astro.build/en/guides/ecommerce/#paddle)) add a payment form to allow your customer to purchase from your site. These can be hosted overlays or embedded in a page on your site. These may offer some basic customization or site branding, and may be added to your Astro project as scripts, buttons, or external links.

### Lemon Squeezy

[Section titled Lemon Squeezy](https://docs.astro.build/en/guides/ecommerce/#lemon-squeezy)

[Lemon Squeezy](https://www.lemonsqueezy.com/) is an all-in-one platform for payments and subscriptions with multi-currency support, global tax compliance, PayPal integration and more. It allows you to create and manage digital products and services through your account dashboard and provides product URLs for the checkout process.

The basic [Lemon.js JavaScript library](https://docs.lemonsqueezy.com/help/lemonjs/what-is-lemonjs) allows you to sell your Lemon Squeezy products with a checkout link.

#### Basic Usage

[Section titled Basic Usage](https://docs.astro.build/en/guides/ecommerce/#basic-usage)

The following is an example of adding a Lemon Squeezy “Buy now” element to an Astro page. Clicking this link will open a checkout and allow the visitor to complete a single purchase.

1. Add the following `<script>` tag to your page `head` or `body`:



```


<script src="https://app.lemonsqueezy.com/js/lemon.js" defer></script>
```

2. Create an anchor tag on the page linking to your product URL. Include the class `lemonsqueezy-button` to open a checkout overlay when clicked.



```


<a class="lemonsqueezy-button" href="https://demo.lemonsqueezy.com/checkout/...">

     Buy Now

</a>
```


#### Lemon.js

[Section titled Lemon.js](https://docs.astro.build/en/guides/ecommerce/#lemonjs)

Lemon.js also provides additional behavior such as [programmatically opening overlays](https://docs.lemonsqueezy.com/help/lemonjs/opening-overlays) and [handling overlay events](https://docs.lemonsqueezy.com/help/lemonjs/handling-events).

Read the [Lemon Squeezy developer getting started guide](https://docs.lemonsqueezy.com/guides/developer-guide) for more information.

### Paddle

[Section titled Paddle](https://docs.astro.build/en/guides/ecommerce/#paddle)

[Paddle](https://www.paddle.com/) is a billing solution for digital products and services. It handles payments, taxes, and subscription management through an overlay or inline checkout.

[Paddle.js](https://developer.paddle.com/paddlejs/overview) is a lightweight JavaScript library that lets you build rich, integrated subscription billing experiences using Paddle.

#### Basic Usage

[Section titled Basic Usage](https://docs.astro.build/en/guides/ecommerce/#basic-usage-1)

The following is an example of adding a Paddle “Buy Now” element to an Astro page. Clicking this link will open a checkout and allow the visitor to complete a single purchase.

After your default payment link domain (your own website) is approved by Paddle, you can turn any element on your page into a trigger for a checkout overlay using HTML data attributes.

1. Add the following two `<script>` tags to your page `head` or `body`:



```


<script src="https://cdn.paddle.com/paddle/v2/paddle.js"></script>

<script type="text/javascript">

     Paddle.Setup({

       token: '7d279f61a3499fed520f7cd8c08' // replace with a client-side token

     });

</script>
```

2. Turn any element on your page into a Paddle Checkout button by adding the `paddle_button` class:



```


<a href="#" class="paddle_button">Buy Now</a>
```

3. Add a `data-items` attribute to specify your product’s Paddle `priceId` and `quantity`. You can also optionally pass additional [supported HTML data attributes](https://developer.paddle.com/paddlejs/html-data-attributes) to prefill data, handle checkout success, or style your button and checkout overlay:



```


<a

     href="#"

     class="paddle_button"

     data-display-mode="overlay"

     data-theme="light"

     data-locale="en"

     data-success-url="https://example.com/thankyou"

     data-items='[\
\
       {\
\
         "priceId": "pri_01gs59hve0hrz6nyybj56z04eq",\
\
         "quantity": 1\
\
       }\
\
     ]'

>

     Buy now

</a>
```


#### Paddle.js

[Section titled Paddle.js](https://docs.astro.build/en/guides/ecommerce/#paddlejs)

Instead of passing HTML data attributes, you can send data to the checkout overlay using JavaScript for passing multiple attributes and even greater customization. You can also create upgrade workflows using an inline checkout.

Read more about [using Paddle.js to build an inline checkout](https://developer.paddle.com/build/checkout/build-branded-inline-checkout).

## Full-featured e-commerce solutions

[Section titled Full-featured e-commerce solutions](https://docs.astro.build/en/guides/ecommerce/#full-featured-e-commerce-solutions)

For more customization over your site’s shopping cart and checkout process, you can connect a more fully-featured financial service provider (e.g. [Snipcart](https://docs.astro.build/en/guides/ecommerce/#snipcart)) to your Astro project. These e-commerce platforms may also integrate with other third-party services for user account management, personalization, inventory and analytics.

### Snipcart

[Section titled Snipcart](https://docs.astro.build/en/guides/ecommerce/#snipcart)

[Snipcart](https://snipcart.com/) is a powerful, developer-first HTML/JavaScript shopping cart platform.

Snipcart also allows you to integrate with third-party services such as shipping providers, enable webhooks for an advanced e-commerce integration between your shopping cart and other systems, choose from several payment gateways (e.g. Stripe, Paypal, and Square), customize email templates, and even provides live testing environments.

#### Basic Usage

[Section titled Basic Usage](https://docs.astro.build/en/guides/ecommerce/#basic-usage-2)

The following is an example of configuring a Snipcart checkout and adding button elements for “Add to cart” and “Check out now” to an Astro page. This will allow your visitors to add products to a cart without being immediately sent to a checkout page.

For complete instructions, including setting up your Snipcart store, please see [the Snipcart installation documentation](https://docs.snipcart.com/v3/setup/installation).

1. Add the script [as shown in the Snipcart installation instructions](https://docs.snipcart.com/v3/setup/installation) on your page after the `<body>` element.



```


<body></body>

<script>

     window.SnipcartSettings = {

       publicApiKey: "YOUR_API_KEY",

       loadStrategy: "on-user-interaction",

     };




     (function()...); // available from the Snipcart documentation

</script>
```

2. Customize `window.SnipcartSettings` with any of the [available Snipcart settings](https://docs.snipcart.com/v3/setup/installation#settings) to control the behavior and appearance of your cart.



```


<script>

     window.SnipcartSettings = {

       publicApiKey: "YOUR_API_KEY",

       loadStrategy: "manual",

       version: "3.7.1",

       addProductBehavior: "none",

       modalStyle: "side",

     };




     (function()...); // available from the Snipcart documentation

</script>
```

3. Add `class="snipcart-add-item"` to any HTML element, such as a `<button>`, to add an item to the cart when clicked on. Also include any other data elements for [common Snipcart product attributes](https://docs.snipcart.com/v3/setup/products) such as price and description, and any optional fields.



```


<button

     class="snipcart-add-item"

     data-item-id="astro-print"

     data-item-price="39.99"

     data-item-description="A framed print of the Astro logo."

     data-item-image="/assets/images/astro-print.jpg"

     data-item-name="Astro Print"

     data-item-custom1-name="Frame color"

     data-item-custom1-options="Brown|Silver[+10.00]|Gold[+20.00]"

     data-item-custom2-name="Delivery instructions"

     data-item-custom2-type="textarea"

>

     Add to cart

</button>
```

4. Add a Snipcart checkout button with the `snipcart-checkout` class to open the cart and allow guests to complete their purchase with a checkout modal.



```


<button class="snipcart-checkout">Click here to checkout</button>
```


#### Snipcart JavaScript SDK

[Section titled Snipcart JavaScript SDK](https://docs.astro.build/en/guides/ecommerce/#snipcart-javascript-sdk)

The [Snipcart JavaScript SDK](https://docs.snipcart.com/v3/sdk/basics) lets you configure, customize and manage your Snipcart cart programmatically.

This allows you to perform actions such as:

- Retrieve relevant information about the current Snipcart session and apply certain operations to the cart.
- Listen to incoming events and trigger callbacks dynamically.
- Listen to state changes and receive a full snapshot of the state of the cart.

See the [Snipcart documentation](https://docs.snipcart.com/v3/) for more information about all the options to integrate Snipcart with your Astro Project.

#### `astro-snipcart`

[Section titled astro-snipcart](https://docs.astro.build/en/guides/ecommerce/#astro-snipcart)

There are two `astro-snipcart` community packages that can simplify using Snipcart.

- [`@lloydjatkinson/astro-snipcart` Astro template](https://astro-snipcart.vercel.app/): This Astro template includes an optional design system for a complete e-commerce solution out of the box. Learn more on its own extensive documentation site, including [the motivation behind building `astro-snipcart`](https://astro-snipcart.vercel.app/motivation) as providing a convenient, Astro-native way for you to interact with the Snipcart API.

- [`@Adammatthiesen/astro-snipcart` integration](https://github.com/Adammatthiesen/astro-snipcart): This integration was heavily inspired by the `astro-snipcart` theme and provides Astro components (or Vue components) that you can add to your existing Astro project for creating products, controlling the cart, and more. See the [full tutorial](https://matthiesen.xyz/blog/getting-started-with-my-astro-snipcart-addon) for more information.


## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/ecommerce/#community-resources)

- [Hands-On Experience: eCommerce Store with Astro?](https://crystallize.com/blog/building-ecommerce-with-astro)
- [Collecting Payments with Stripe using Astro](https://zellwk.com/blog/stripe-astro-recipe/)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Testing Guide
[Skip to content](https://docs.astro.build/en/guides/testing/#_top)

# Testing

Testing helps you write and maintain working Astro code. Astro supports many popular tools for unit tests, component tests, and end-to-end tests including Jest, Mocha, Jasmine, [Cypress](https://cypress.io/) and [Playwright](https://playwright.dev/). You can even install framework-specific testing libraries such as React Testing Library to test your UI framework components.

Testing frameworks allow you to state **assertions** or **expectations** about how your code should behave in specific situations, then compare these to the actual behavior of your current code.

## Unit and integration tests

[Section titled Unit and integration tests](https://docs.astro.build/en/guides/testing/#unit-and-integration-tests)

### Vitest

[Section titled Vitest](https://docs.astro.build/en/guides/testing/#vitest)

A Vite-native unit test framework with ESM, TypeScript and JSX support powered by esbuild.

Use Astro’s `getViteConfig()` helper in your [`vitest.config.ts` configuration file](https://vitest.dev/config/) to set up Vitest with your Astro project’s settings:

```

/// <reference types="vitest" />

import { getViteConfig } from 'astro/config';

export default getViteConfig({

  test: {

    // Vitest configuration options

  },

});
```

By default, `getViteConfig()` will try to load an Astro config file in your project and apply it to the test environment.
As of Astro 4.8, if you need to customize the Astro configuration applied in your tests, pass a second argument to `getViteConfig()`:

```

export default getViteConfig(

  { test: { /* Vitest configuration options */ } },

  {

    site: 'https://example.com/',

    trailingSlash: 'always',

  },

);
```

See the [Astro + Vitest starter template](https://github.com/withastro/astro/tree/latest/examples/with-vitest) on GitHub.

#### Vitest and Container API

[Section titled Vitest and Container API](https://docs.astro.build/en/guides/testing/#vitest-and-container-api)

**Added in:** `astro@4.9.0`

You can natively test Astro components using the [container API](https://docs.astro.build/en/reference/container-reference/). First, setup [`vitest` as explained above](https://docs.astro.build/en/guides/testing/#vitest), then create a `.test.js` file to test your component:

```

import { experimental_AstroContainer as AstroContainer } from 'astro/container';

import { expect, test } from 'vitest';

import Card from '../src/components/Card.astro';

test('Card with slots', async () => {

  const container = await AstroContainer.create();

  const result = await container.renderToString(Card, {

    slots: {

      default: 'Card content',

    },

  });

  expect(result).toContain('This is a card');

  expect(result).toContain('Card content');

});
```

## End-to-end tests

[Section titled End-to-end tests](https://docs.astro.build/en/guides/testing/#end-to-end-tests)

### Playwright

[Section titled Playwright](https://docs.astro.build/en/guides/testing/#playwright)

Playwright is an end-to-end testing framework for modern web apps. Use the Playwright API in JavaScript or TypeScript to test your Astro code on all modern rendering engines including Chromium, WebKit, and Firefox.

#### Installation

[Section titled Installation](https://docs.astro.build/en/guides/testing/#installation)

You can get started and run your tests using the [VS Code Extension](https://playwright.dev/docs/getting-started-vscode).

Alternatively, you can install Playwright within your Astro project using the package manager of your choice. Follow the CLI steps to choose JavaScript/TypeScript, name your test folder, and add an optional GitHub Actions workflow.

- [npm](https://docs.astro.build/en/guides/testing/#tab-panel-1819)
- [pnpm](https://docs.astro.build/en/guides/testing/#tab-panel-1820)
- [Yarn](https://docs.astro.build/en/guides/testing/#tab-panel-1821)

```

npm init playwright@latest
```

```

pnpm create playwright
```

```

yarn create playwright
```

#### Create your first Playwright test

[Section titled Create your first Playwright test](https://docs.astro.build/en/guides/testing/#create-your-first-playwright-test)

1. Choose a page to test. This example will test the example page `index.astro` below.



```


   ---

   ---

<html lang="en">

     <head>

       <title>Astro is awesome!</title>

       <meta name="description" content="Pull content from anywhere and serve it fast with Astro's next-gen islands architecture." />

     </head>

     <body></body>

</html>
```

2. Create a new folder and add the following test file in `src/test`. Copy and paste the following test into the file to verify that the page meta information is correct. Update the value of the page `<title>` to match the page you are testing.



```


import { test, expect } from '@playwright/test';




test('meta is correct', async ({ page }) => {

     await page.goto("http://localhost:4321/");




     await expect(page).toHaveTitle('Astro is awesome!');

});
```


#### Running your Playwright tests

[Section titled Running your Playwright tests](https://docs.astro.build/en/guides/testing/#running-your-playwright-tests)

You can run a single test or several tests at once, testing one or multiple browsers. By default, your test results will be shown in the terminal. Optionally, you can open the HTML Test Reporter to show a full report and filter test results.

1. To run our test from the previous example using the command line, use the `test` command. Optionally, include the file name to run just the single test:



```


npx playwright test index.spec.ts
```

2. To see the full HTML Test Report, open it using the following command:



```


npx playwright show-report
```


##### Advanced: Launching a development web server during the tests

[Section titled Advanced: Launching a development web server during the tests](https://docs.astro.build/en/guides/testing/#advanced-launching-a-development-web-server-during-the-tests)

You can also have Playwright start your server when you run your testing script by using the [`webServer`](https://playwright.dev/docs/test-advanced#launching-a-development-web-server-during-the-tests) option in the Playwright configuration file.

Here is an example of the configuration and commands required when using npm:

1. Add a test script to your `package.json` file in the project root, such as `"test:e2e": "playwright test"`.

2. In `playwright.config.ts`, add the `webServer` object and update the command value to `npm run preview`.



```


import { defineConfig } from '@playwright/test';




export default defineConfig({

     webServer: {

       command: 'npm run preview',

       url: 'http://localhost:4321/',

       timeout: 120 * 1000,

       reuseExistingServer: !process.env.CI,

     },

     use: {

       baseURL: 'http://localhost:4321/',

     },

});
```

3. Run `npm run build`, then run `npm run test:e2e` to run the Playwright tests.


More information about Playwright can be found in the links below:

- [Getting started with Playwright](https://playwright.dev/docs/intro)
- [Use a development server](https://playwright.dev/docs/test-webserver#configuring-a-web-server)

### Cypress

[Section titled Cypress](https://docs.astro.build/en/guides/testing/#cypress)

Cypress is a front-end testing tool built for the modern web. Cypress enables you to write end-to-end tests for your Astro site.

#### Installation

[Section titled Installation](https://docs.astro.build/en/guides/testing/#installation-1)

You can install Cypress using the package manager of your choice. This will install Cypress locally as a dev dependency for your project.

- [npm](https://docs.astro.build/en/guides/testing/#tab-panel-1822)
- [pnpm](https://docs.astro.build/en/guides/testing/#tab-panel-1823)
- [Yarn](https://docs.astro.build/en/guides/testing/#tab-panel-1824)

```

npm install cypress --save-dev
```

```

pnpm add --save-dev cypress
```

```

yarn add cypress --dev
```

#### Configuration

[Section titled Configuration](https://docs.astro.build/en/guides/testing/#configuration)

In the root of your project, create a `cypress.config.js` file with the following content:

```

import { defineConfig } from 'cypress'

export default defineConfig({

  e2e: {

    supportFile: false

  }

})
```

#### Create your first Cypress test

[Section titled Create your first Cypress test](https://docs.astro.build/en/guides/testing/#create-your-first-cypress-test)

1. Choose a page to test. This example will test the example page `index.astro` below.



```


   ---

   ---

<html lang="en">

     <head>

       <title>Astro is awesome!</title>

       <meta name="description" content="Pull content from anywhere and serve it fast with Astro's next-gen islands architecture." />

     </head>

     <body>

     <h1>Hello world from Astro</h1>

     </body>

</html>
```

2. Create an `index.cy.js` file in the `cypress/e2e` folder. Use the following test in the file to verify that the page title and header are correct.



```


it('titles are correct', () => {

     const page = cy.visit('http://localhost:4321');




     page.get('title').should('have.text', 'Astro is awesome!')

     page.get('h1').should('have.text', 'Hello world from Astro');

});
```


#### Running your Cypress tests

[Section titled Running your Cypress tests](https://docs.astro.build/en/guides/testing/#running-your-cypress-tests)

Cypress can be run from the command line or from the Cypress App. The App provides a visual interface for running and debugging your tests.

First, start the dev server so Cypress can access your live site.

To run our test from the previous example using the command line, execute the following command:

```

npx cypress run
```

Alternatively, to run the test using the Cypress App, execute the following command:

```

npx cypress open
```

Once the Cypress App is launched, choose **E2E Testing**, then select the browser to be used to run tests.

Once the test run is finished, you should see green check marks in the output confirming that your test passed:

```

Running:  index.cy.js                                                                     (1 of 1)

✓ titles are correct (107ms)

1 passing (1s)
```

#### Next steps

[Section titled Next steps](https://docs.astro.build/en/guides/testing/#next-steps)

More information about Cypress can be found in the links below:

- [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress)
- [Testing Your App](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app)

### NightwatchJS

[Section titled NightwatchJS](https://docs.astro.build/en/guides/testing/#nightwatchjs)

Nightwatch.js is a test automation framework with a powerful set of tools to write, run, and debug your tests across the web with built-in support for all major browsers and their mobile equivalents, as well as native mobile applications.

#### Installation

[Section titled Installation](https://docs.astro.build/en/guides/testing/#installation-2)

You can install NightwatchJS within your Astro project using the package manager of your choice. Follow the CLI steps to choose JavaScript/TypeScript, name your test folder, and select whether or not to include component testing and testing on mobile browsers.

- [npm](https://docs.astro.build/en/guides/testing/#tab-panel-1825)
- [pnpm](https://docs.astro.build/en/guides/testing/#tab-panel-1826)
- [Yarn](https://docs.astro.build/en/guides/testing/#tab-panel-1827)

```

npm init nightwatch@latest
```

```

pnpm create nightwatch
```

```

yarn create nightwatch
```

#### Create your first Nightwatch test

[Section titled Create your first Nightwatch test](https://docs.astro.build/en/guides/testing/#create-your-first-nightwatch-test)

1. Choose a page to test. This example will test the example page `index.astro` below.



```


   ---

   ---

<html lang="en">

     <head>

       <title>Astro is awesome!</title>

       <meta name="description" content="Pull content from anywhere and serve it fast with Astro's next-gen islands architecture." />

     </head>

     <body></body>

</html>
```

2. Create a new folder `src/test/` and add the following test file:



```


describe('Astro testing with Nightwatch', function () {

       before(browser => browser.navigateTo('http://localhost:4321/'));




       it("check that the title is correct", function (browser) {

           browser.assert.titleEquals('Astro is awesome!')

       });




       after(browser => browser.end());

});
```


#### Running your NightwatchJS tests

[Section titled Running your NightwatchJS tests](https://docs.astro.build/en/guides/testing/#running-your-nightwatchjs-tests)

You can run a single test or several tests at once, testing one or multiple browsers. By default, your test results will be shown in the terminal. Optionally, you can open the HTML Test Reporter to show a full report and filter test results.

You can run the tests with the [NightwatchJS VSCode Extension](https://marketplace.visualstudio.com/items?itemName=browserstackcom.nightwatch) or using the CLI steps below:

1. To run all tests, enter the following command in the terminal. Optionally, include the file name to run just the single test:



```


npx nightwatch test/index.js
```









Additionally, you can run the tests against a specific browser using the `--environment` or `-e` CLI argument. If you don’t have the relevant browser installed, Nightwatch will attempt to set it up for you using [Selenium Manager](https://www.selenium.dev/blog/2022/introducing-selenium-manager/):



```


npx nightwatch test/index.ts -e firefox
```

2. To see the full HTML Test Report, open it using the following command:



```


npx nightwatch test/index.ts --open
```


More information about NightwatchJS can be found in the links below:

- [Intro to Nightwatch](https://nightwatchjs.org/guide/overview/what-is-nightwatch.html)
- [Testing with Nightwatch](https://nightwatchjs.org/guide/writing-tests/introduction.html)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Ftesting%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=76969525)

## Internationalization in Astro
[Skip to content](https://docs.astro.build/en/recipes/i18n/#_top)

# Add i18n features

In this recipe, you will learn how to use content collections and dynamic routing to build your own internationalization (i18n) solution and serve your content in different languages.

This example serves each language at its own subpath, e.g. `example.com/en/blog` for English and `example.com/fr/blog` for French.

If you prefer the default language to not be visible in the URL unlike other languages, there are [instructions to hide the default language](https://docs.astro.build/en/recipes/i18n/#hide-default-language-in-the-url) below.

See the [resources section](https://docs.astro.build/en/recipes/i18n/#resources) for external links to related topics such as right-to-left (RTL) styling and choosing language tags.

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/i18n/#recipe)

### Set up pages for each language

[Section titled Set up pages for each language](https://docs.astro.build/en/recipes/i18n/#set-up-pages-for-each-language)

1. Create a directory for each language you want to support. For example, `en/` and `fr/` if you are supporting English and French:


- Directorysrc/


- Directorypages/


- Directory **en/**

- about.astro
- index.astro

- Directory **fr/**

- about.astro
- index.astro

- index.astro

2. Set up `src/pages/index.astro` to redirect to your default language.




- [Static](https://docs.astro.build/en/recipes/i18n/#tab-panel-1713)
- [On demand](https://docs.astro.build/en/recipes/i18n/#tab-panel-1714)

```

<meta http-equiv="refresh" content="0;url=/en/" />
```

This approach uses a [meta refresh](https://en.wikipedia.org/wiki/Meta_refresh) and will work however you deploy your site. Some static hosts also let you configure server redirects with a custom configuration file. See your deploy platform’s documentation for more details.

If you are using an SSR adapter, you can use [`Astro.redirect`](https://docs.astro.build/en/guides/routing/#dynamic-redirects) to redirect to the default language on the server.

```

---

return Astro.redirect('/en/');

---
```

### Use collections for translated content

[Section titled Use collections for translated content](https://docs.astro.build/en/recipes/i18n/#use-collections-for-translated-content)

1. Create a folder in `src/content/` for each type of content you want to include and add subdirectories for each supported language. For example, to support English and French blog posts:


- Directorysrc/


- Directorycontent/


- Directoryblog/


- Directory **en/** Blog posts in English


- post-1.md
- post-2.md

- Directory **fr/** Blog posts in French


- post-1.md
- post-2.md

2. Create a `src/content.config.ts` file and export a collection for each type of content.



```


import { defineCollection, z } from 'astro:content';




const blogCollection = defineCollection({

     schema: z.object({

       title: z.string(),

       author: z.string(),

       date: z.date()

     })

});




export const collections = {

     'blog': blogCollection

};
```









Read more about [Content Collections](https://docs.astro.build/en/guides/content-collections/).

3. Use [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes) to fetch and render content based on a `lang` and a `slug` parameter.




- [Static](https://docs.astro.build/en/recipes/i18n/#tab-panel-1715)
- [On demand](https://docs.astro.build/en/recipes/i18n/#tab-panel-1716)

In static rendering mode, use `getStaticPaths` to map each content entry to a page:

```

---

import { getCollection, render } from 'astro:content';

export async function getStaticPaths() {

  const pages = await getCollection('blog');

  const paths = pages.map(page => {

    const [lang, ...slug] = page.id.split('/');

    return { params: { lang, slug: slug.join('/') || undefined }, props: page };

  });

  return paths;

}

const { lang, slug } = Astro.params;

const page = Astro.props;

const formattedDate = page.data.date.toLocaleString(lang);

const { Content } = await render(page);

---

<h1>{page.data.title}</h1>

<p>by {page.data.author} • {formattedDate}</p>

<Content/>
```

In [SSR mode](https://docs.astro.build/en/guides/on-demand-rendering/), fetch the requested entry directly:

```

---

import { getEntry, render } from 'astro:content';

const { lang, slug } = Astro.params;

const page = await getEntry('blog', `${lang}/${slug}`);

if (!page) {

  return Astro.redirect('/404');

}

const formattedDate = page.data.date.toLocaleString(lang);

const { Content, headings } = await render(page);

---

<h1>{page.data.title}</h1>

<p>by {page.data.author} • {formattedDate}</p>

<Content/>
```

Read more about [dynamic routing](https://docs.astro.build/en/guides/routing/#dynamic-routes).

### Translate UI strings

[Section titled Translate UI strings](https://docs.astro.build/en/recipes/i18n/#translate-ui-strings)

Create dictionaries of terms to translate the labels for UI elements around your site. This allows your visitors to experience your site fully in their language.

1. Create a `src/i18n/ui.ts` file to store your translation strings:



```


export const languages = {

     en: 'English',

     fr: 'Français',

};




export const defaultLang = 'en';




export const ui = {

     en: {

       'nav.home': 'Home',

       'nav.about': 'About',

       'nav.twitter': 'Twitter',

     },

     fr: {

       'nav.home': 'Accueil',

       'nav.about': 'À propos',

     },

} as const;
```

2. Create two helper functions: one to detect the page language based on the current URL, and one to get translations strings for different parts of the UI in `src/i18n/utils.ts`:



```


import { ui, defaultLang } from './ui';




export function getLangFromUrl(url: URL) {

     const [, lang] = url.pathname.split('/');

     if (lang in ui) return lang as keyof typeof ui;

     return defaultLang;

}




export function useTranslations(lang: keyof typeof ui) {

     return function t(key: keyof typeof ui[typeof defaultLang]) {

       return ui[lang][key] || ui[defaultLang][key];

     }

}
```

3. Import the helpers where needed and use them to choose the UI string that corresponds to the current language. For example, a nav component might look like:



```


   ---

import { getLangFromUrl, useTranslations } from '../i18n/utils';




const lang = getLangFromUrl(Astro.url);

const t = useTranslations(lang);

   ---

<ul>

       <li>

           <a href={`/${lang}/home/`}>

             {t('nav.home')}

           </a>

       </li>

       <li>

           <a href={`/${lang}/about/`}>

             {t('nav.about')}

           </a>

       </li>

       <li>

           <a href="https://twitter.com/astrodotbuild">

             {t('nav.twitter')}

           </a>

       </li>

</ul>
```

4. Each page must have a `lang` attribute on the `<html>` element that matches the language on the page. In this example, a [reusable layout](https://docs.astro.build/en/basics/layouts/) extracts the language from the current route:



```


   ---

import { getLangFromUrl } from '../i18n/utils';




const lang = getLangFromUrl(Astro.url);

   ---

<html lang={lang}>

       <head>

           <meta charset="utf-8" />

           <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

           <meta name="viewport" content="width=device-width" />

           <title>Astro</title>

       </head>

       <body>

           <slot />

       </body>

</html>
```









You can then use this base layout to ensure that pages use the correct `lang` attribute automatically.



```


   ---

import Base from '../../layouts/Base.astro';

   ---

<Base>

       <h1>About me</h1>

       ...

</Base>
```


### Let users switch between languages

[Section titled Let users switch between languages](https://docs.astro.build/en/recipes/i18n/#let-users-switch-between-languages)

Create links to the different languages you support so users can choose the language they want to read your site in.

1. Create a component to show a link for each language:



```


   ---

import { languages } from '../i18n/ui';

   ---

<ul>

     {Object.entries(languages).map(([lang, label]) => (

       <li>

         <a href={`/${lang}/`}>{label}</a>

       </li>

     ))}

</ul>
```

2. Add `<LanguagePicker />` to your site so it is shown on every page. The example below adds it to the site footer in a base layout:



```


   ---

import LanguagePicker from '../components/LanguagePicker.astro';

import { getLangFromUrl } from '../i18n/utils';




const lang = getLangFromUrl(Astro.url);

   ---

<html lang={lang}>

       <head>

           <meta charset="utf-8" />

           <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

           <meta name="viewport" content="width=device-width" />

           <title>Astro</title>

       </head>

       <body>

           <slot />

           <footer>

             <LanguagePicker />

           </footer>

       </body>

</html>
```


### Hide default language in the URL

[Section titled Hide default language in the URL](https://docs.astro.build/en/recipes/i18n/#hide-default-language-in-the-url)

1. Create a directory for each language except the default language. For example, store your default language pages directly in `pages/`, and your translated pages in `fr/`:


- Directorysrc/


- Directorypages/


- about.astro
- index.astro
- Directory **fr/**

- about.astro
- index.astro

2. Add another line to the `src/i18n/ui.ts` file to toggle the feature:



```


export const showDefaultLang = false;
```

3. Add a helper function to `src/i18n/utils.ts`, to translate paths based on the current language:



```


import { ui, defaultLang, showDefaultLang } from './ui';




export function useTranslatedPath(lang: keyof typeof ui) {

     return function translatePath(path: string, l: string = lang) {

       return !showDefaultLang && l === defaultLang ? path : `/${l}${path}`

     }

}
```

4. Import the helper where needed. For example, a `nav` component might look like:



```


   ---

import { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';




const lang = getLangFromUrl(Astro.url);

const t = useTranslations(lang);

const translatePath = useTranslatedPath(lang);

   ---

<ul>

       <li>

           <a href={translatePath('/home/')}>

             {t('nav.home')}

           </a>

       </li>

       <li>

           <a href={translatePath('/about/')}>

             {t('nav.about')}

           </a>

       </li>

       <li>

           <a href="https://twitter.com/astrodotbuild">

             {t('nav.twitter')}

           </a>

       </li>

</ul>
```

5. The helper function can also be used to translate paths for a specific language. For example, when users switch between languages:



```


   ---

import { languages } from '../i18n/ui';

import { getLangFromUrl, useTranslatedPath } from '../i18n/utils';




const lang = getLangFromUrl(Astro.url);

const translatePath = useTranslatedPath(lang);

   ---

<ul>

     {Object.entries(languages).map(([lang, label]) => (

       <li>

         <a href={translatePath('/', lang)}>{label}</a>

       </li>

     ))}

</ul>
```


### Translate Routes

[Section titled Translate Routes](https://docs.astro.build/en/recipes/i18n/#translate-routes)

Translate the routes of your pages for each language.

1. Add route mappings to `src/i18n/ui.ts`:



```


export const routes = {

     de: {

       'services': 'leistungen',

     },

     fr: {

       'services': 'prestations-de-service',

     },

}
```

2. Update the `useTranslatedPath` helper function in `src/i18n/utils.ts` to add router translation logic.



```


import { ui, defaultLang, showDefaultLang, routes } from './ui';




export function useTranslatedPath(lang: keyof typeof ui) {

     return function translatePath(path: string, l: string = lang) {

       const pathName = path.replaceAll('/', '')

       const hasTranslation = defaultLang !== l && routes[l] !== undefined && routes[l][pathName] !== undefined

       const translatedPath = hasTranslation ? '/' + routes[l][pathName] : path




       return !showDefaultLang && l === defaultLang ? translatedPath : `/${l}${translatedPath}`

     }

}
```

3. Create a helper function to get the route, if it exists based on the current URL, in `src/i18n/utils.ts`:



```


import { ui, defaultLang, showDefaultLang, routes } from './ui';




export function getRouteFromUrl(url: URL): string | undefined {

     const pathname = new URL(url).pathname;

     const parts = pathname?.split('/');

     const path = parts.pop() || parts.pop();




     if (path === undefined) {

       return undefined;

     }




     const currentLang = getLangFromUrl(url);




     if (defaultLang === currentLang) {

       const route = Object.values(routes)[0];

       return route[path] !== undefined ? route[path] : undefined;

     }




     const getKeyByValue = (obj: Record<string, string>, value: string): string | undefined  => {

         return Object.keys(obj).find((key) => obj[key] === value);

     }




     const reversedKey = getKeyByValue(routes[currentLang], path);




     if (reversedKey !== undefined) {

       return reversedKey;

     }




     return undefined;

}
```

4. The helper function can be used to get a translated route. For example, when no translated route is defined, the user will be redirected to the home page:



```


   ---

import { languages } from '../i18n/ui';

import { getRouteFromUrl, useTranslatedPath } from '../i18n/utils';




const route = getRouteFromUrl(Astro.url);

   ---

<ul>

     {Object.entries(languages).map(([lang, label]) => {

       const translatePath = useTranslatedPath(lang);

       return (

         <li>

           <a href={translatePath(`/${route ? route : ''}`)}>{label}</a>

         </li>

       )

     })}

</ul>
```


## Resources

[Section titled Resources](https://docs.astro.build/en/recipes/i18n/#resources)

- [Choosing a Language Tag](https://www.w3.org/International/questions/qa-choosing-language-tags)
- [Right-to-left (RTL) Styling 101](https://rtlstyling.com/)

## Community libraries

[Section titled Community libraries](https://docs.astro.build/en/recipes/i18n/#community-libraries)

- [astro-i18next](https://github.com/yassinedoghri/astro-i18next) — An Astro integration for i18next including some utility components.
- [astro-i18n](https://github.com/alexandre-fernandez/astro-i18n) — A TypeScript-first internationalization library for Astro.
- [astro-i18n-aut](https://github.com/jlarmstrongiv/astro-i18n-aut) — An Astro integration for i18n that supports the `defaultLocale` without page generation. The integration is adapter agnostic and UI framework agnostic.
- [astro-react-i18next](https://github.com/jeremyxgo/astro-react-i18next) — An Astro integration that seamlessly enables the use of i18next and react-i18next in React components on Astro websites.
- [paraglide](https://inlang.com/c/astro) — A fully type-safe i18n library specifically designed for partial hydration patterns like Astro islands.
- [astro-loader-i18n](https://github.com/openscript/astro-loader-i18n) — An Astro glob content loader for i18n files and folder structures supporting the translation of routes.

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Actions Guide
[Skip to content](https://docs.astro.build/en/guides/actions/#_top)

# Actions

**Added in:** `astro@4.15`

Astro Actions allow you to define and call backend functions with type-safety. Actions perform data fetching, JSON parsing, and input validation for you. This can greatly reduce the amount of boilerplate needed compared to using an [API endpoint](https://docs.astro.build/en/guides/endpoints/).

Use actions instead of API endpoints for seamless communication between your client and server code and to:

- Automatically validate JSON and form data inputs using [Zod validation](https://zod.dev/?id=primitives).
- Generate type-safe functions to call your backend from the client and even [from HTML form actions](https://docs.astro.build/en/guides/actions/#call-actions-from-an-html-form-action). No need for manual `fetch()` calls.
- Standardize backend errors with the [`ActionError`](https://docs.astro.build/en/reference/modules/astro-actions/#actionerror) object.

## Basic usage

[Section titled Basic usage](https://docs.astro.build/en/guides/actions/#basic-usage)

Actions are defined in a `server` object exported from `src/actions/index.ts`:

```

import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';

export const server = {

  myAction: defineAction({ /* ... */ })

}
```

Your actions are available as functions from the `astro:actions` module. Import `actions` and call them client-side within a [UI framework component](https://docs.astro.build/en/guides/framework-components/), [a form POST request](https://docs.astro.build/en/guides/actions/#call-actions-from-an-html-form-action), or by using a `<script>` tag in an Astro component.

When you call an action, it returns an object with either `data` containing the JSON-serialized result, or `error` containing thrown errors.

```

---

---

<script>

import { actions } from 'astro:actions';

async () => {

  const { data, error } = await actions.myAction({ /* ... */ });

}

</script>
```

### Write your first action

[Section titled Write your first action](https://docs.astro.build/en/guides/actions/#write-your-first-action)

Follow these steps to define an action and call it in a `script` tag in your Astro page.

1. Create a `src/actions/index.ts` file and export a `server` object.



```


export const server = {

     // action declarations

}
```

2. Import the `defineAction()` utility from `astro:actions`, and the `z` object from `astro:schema`.



```


import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';




export const server = {

     // action declarations

}
```

3. Use the `defineAction()` utility to define a `getGreeting` action. The `input` property will be used to validate input parameters with a [Zod](https://zod.dev/) schema and the `handler()` function includes the backend logic to run on the server.



```


import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';




export const server = {

     getGreeting: defineAction({

       input: z.object({

         name: z.string(),

       }),

       handler: async (input) => {

         return `Hello, ${input.name}!`

       }

     })

}
```

4. Create an Astro component with a button that will fetch a greeting using your `getGreeting` action when clicked.



```


   ---

   ---




<button>Get greeting</button>




<script>

const button = document.querySelector('button');

button?.addEventListener('click', async () => {

     // Show alert pop-up with greeting from action

});

</script>
```

5. To use your action, import `actions` from `astro:actions` and then call `actions.getGreeting()` in the click handler. The `name` option will be sent to your action’s `handler()` on the server and, if there are no errors, the result will be available as the `data` property.



```


   ---

   ---




<button>Get greeting</button>




<script>

import { actions } from 'astro:actions';




const button = document.querySelector('button');

button?.addEventListener('click', async () => {

     // Show alert pop-up with greeting from action

     const { data, error } = await actions.getGreeting({ name: "Houston" });

     if (!error) alert(data);

})

</script>
```


See the full Actions API documentation for details on [`defineAction()`](https://docs.astro.build/en/reference/modules/astro-actions/#defineaction) and its properties.

## Organizing actions

[Section titled Organizing actions](https://docs.astro.build/en/guides/actions/#organizing-actions)

All actions in your project must be exported from the `server` object in the `src/actions/index.ts` file. You can define actions inline or you can move action definitions to separate files and import them. You can even group related functions in nested objects.

For example, to colocate all of your user actions, you can create a `src/actions/user.ts` file and nest the definitions of both `getUser` and `createUser` inside a single `user` object.

```

import { defineAction } from 'astro:actions';

export const user = {

  getUser: defineAction(/* ... */),

  createUser: defineAction(/* ... */),

}
```

Then, you can import this `user` object into your `src/actions/index.ts` file and add it as a top-level key to the `server` object alongside any other actions:

```

import { user } from './user';

export const server = {

  myAction: defineAction({ /* ... */ }),

  user,

}
```

Now, all of your user actions are callable from the `actions.user` object:

- `actions.user.getUser()`
- `actions.user.createUser()`

## Handling returned data

[Section titled Handling returned data](https://docs.astro.build/en/guides/actions/#handling-returned-data)

Actions return an object containing either `data` with the type-safe return value of your `handler()`, or an `error` with any backend errors. Errors may come from validation errors on the `input` property or thrown errors within the `handler()`.

Actions return a custom data format that can handle Dates, Maps, Sets, and URLs [using the Devalue library](https://github.com/Rich-Harris/devalue). Therefore, you can’t easily inspect the response from the network like you can with regular JSON. For debugging, you can instead inspect the `data` object returned by actions.

[See the `handler()` API reference](https://docs.astro.build/en/reference/modules/astro-actions/#handler-property) for full details.

### Checking for errors

[Section titled Checking for errors](https://docs.astro.build/en/guides/actions/#checking-for-errors)

It’s best to check if an `error` is present before using the `data` property. This allows you to handle errors in advance and ensures `data` is defined without an `undefined` check.

```

const { data, error } = await actions.example();

if (error) {

  // handle error cases

  return;

}

// use `data`
```

### Accessing `data` directly without an error check

[Section titled Accessing data directly without an error check](https://docs.astro.build/en/guides/actions/#accessing-data-directly-without-an-error-check)

To skip error handling, for example while prototyping or using a library that will catch errors for you, use the `.orThrow()` property on your action call to throw errors instead of returning an `error`. This will return the action’s `data` directly.

This example calls a `likePost()` action that returns the updated number of likes as a `number` from the action `handler`:

```

const updatedLikes = await actions.likePost.orThrow({ postId: 'example' });

//    ^ type: number
```

### Handling backend errors in your action

[Section titled Handling backend errors in your action](https://docs.astro.build/en/guides/actions/#handling-backend-errors-in-your-action)

You can use the provided `ActionError` to throw an error from your action `handler()`, such as “not found” when a database entry is missing, or “unauthorized” when a user is not logged in. This has two main benefits over returning `undefined`:

- You can set a status code like `404 - Not found` or `401 - Unauthorized`. This improves debugging errors in both development and in production by letting you see the status code of each request.

- In your application code, all errors are passed to the `error` object on an action result. This avoids the need for `undefined` checks on data, and allows you to display targeted feedback to the user depending on what went wrong.


#### Creating an `ActionError`

[Section titled Creating an ActionError](https://docs.astro.build/en/guides/actions/#creating-an-actionerror)

To throw an error, import the `ActionError()` class from the `astro:actions` module. Pass it a human-readable status `code` (e.g. `"NOT_FOUND"` or `"BAD_REQUEST"`), and an optional `message` to provide further information about the error.

This example throws an error from a `likePost` action when a user is not logged in, after checking a hypothetical “user-session” cookie for authentication:

```

import { defineAction, ActionError } from "astro:actions";

import { z } from "astro:schema";

export const server = {

  likePost: defineAction({

    input: z.object({ postId: z.string() }),

    handler: async (input, ctx) => {

      if (!ctx.cookies.has('user-session')) {

        throw new ActionError({

          code: "UNAUTHORIZED",

          message: "User must be logged in.",

        });

      }

      // Otherwise, like the post

    },

  }),

};
```

#### Handling an `ActionError`

[Section titled Handling an ActionError](https://docs.astro.build/en/guides/actions/#handling-an-actionerror)

To handle this error, you can call the action from your application and check whether an `error` property is present. This property will be of type `ActionError` and will contain your `code` and `message`.

In the following example, a `LikeButton.tsx` component calls the `likePost()` action when clicked. If an authentication error occurs, the `error.code` attribute is used to determine whether to display a login link:

```

import { actions } from 'astro:actions';

import { useState } from 'preact/hooks';

export function LikeButton({ postId }: { postId: string }) {

  const [showLogin, setShowLogin] = useState(false);

  return (

    <>

      {

        showLogin && <a href="/signin">Log in to like a post.</a>

      }

      <button onClick={async () => {

        const { data, error } = await actions.likePost({ postId });

        if (error?.code === 'UNAUTHORIZED') setShowLogin(true);

        // Early return for unexpected errors

        else if (error) return;

        // update likes

      }}>

        Like

      </button>

    </>

  )

}
```

### Handling client redirects

[Section titled Handling client redirects](https://docs.astro.build/en/guides/actions/#handling-client-redirects)

When calling actions from the client, you can integrate with a client-side library like `react-router`, or you can use Astro’s [`navigate()` function](https://docs.astro.build/en/guides/view-transitions/#trigger-navigation) to redirect to a new page when an action succeeds.

This example navigates to the homepage after a `logout` action returns successfully:

```

import { actions } from 'astro:actions';

import { navigate } from 'astro:transitions/client';

export function LogoutButton() {

  return (

    <button onClick={async () => {

      const { error } = await actions.logout();

      if (!error) navigate('/');

    }}>

      Logout

    </button>

  );

}
```

## Accepting form data from an action

[Section titled Accepting form data from an action](https://docs.astro.build/en/guides/actions/#accepting-form-data-from-an-action)

Actions accept JSON data by default. To accept form data from an HTML form, set `accept: 'form'` in your `defineAction()` call:

```

import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';

export const server = {

  comment: defineAction({

    accept: 'form',

    input: z.object(/* ... */),

    handler: async (input) => { /* ... */ },

  })

}
```

### Validating form data

[Section titled Validating form data](https://docs.astro.build/en/guides/actions/#validating-form-data)

Actions will parse submitted form data to an object, using the value of each input’s `name` attribute as the object keys. For example, a form containing `<input name="search">` will be parsed to an object like `{ search: 'user input' }`. Your action’s `input` schema will be used to validate this object.

To receive the raw `FormData` object in your action handler instead of a parsed object, omit the `input` property in your action definition.

The following example shows a validated newsletter registration form that accepts a user’s email and requires a “terms of service” agreement checkbox.

1. Create an HTML form component with unique `name` attributes on each input:



```


<form>

     <label for="email">E-mail</label>

     <input id="email" required type="email" name="email" />

     <label>

       <input required type="checkbox" name="terms">

       I agree to the terms of service

     </label>

     <button>Sign up</button>

</form>
```

2. Define a `newsletter` action to handle the submitted form. Validate the `email` field using the `z.string().email()` validator, and the `terms` checkbox using `z.boolean()`:



```


import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';




export const server = {

     newsletter: defineAction({

       accept: 'form',

       input: z.object({

         email: z.string().email(),

         terms: z.boolean(),

       }),

       handler: async ({ email, terms }) => { /* ... */ },

     })

}
```









See the [`input` API reference](https://docs.astro.build/en/reference/modules/astro-actions/#input-validator) for all available form validators.

3. Add a `<script>` to the HTML form to submit the user input. This example overrides the form’s default submit behavior to call `actions.newsletter()`, and redirects to `/confirmation` using the `navigate()` function:



```


<form>

7 collapsed lines

     <label for="email">E-mail</label>

     <input id="email" required type="email" name="email" />

     <label>

       <input required type="checkbox" name="terms">

       I agree to the terms of service

     </label>

     <button>Sign up</button>

</form>




<script>

     import { actions } from 'astro:actions';

     import { navigate } from 'astro:transitions/client';




     const form = document.querySelector('form');

     form?.addEventListener('submit', async (event) => {

       event.preventDefault();

       const formData = new FormData(form);

       const { error } = await actions.newsletter(formData);

       if (!error) navigate('/confirmation');

     })

</script>
```









See [“Call actions from an HTML form action”](https://docs.astro.build/en/guides/actions/#call-actions-from-an-html-form-action) for an alternative way to submit form data.


### Displaying form input errors

[Section titled Displaying form input errors](https://docs.astro.build/en/guides/actions/#displaying-form-input-errors)

You can validate form inputs before submission using [native HTML form validation attributes](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation) like `required`, `type="email"`, and `pattern`. For more complex `input` validation on the backend, you can use the provided [`isInputError()`](https://docs.astro.build/en/reference/modules/astro-actions/#isinputerror) utility function.

To retrieve input errors, use the `isInputError()` utility to check whether an error was caused by invalid input. Input errors contain a `fields` object with messages for each input name that failed to validate. You can use these messages to prompt your user to correct their submission.

The following example checks the error with `isInputError()`, then checks whether the error is in the email field, before finally creating a message from the errors. You can use JavaScript DOM manipulation or your preferred UI framework to display this message to users.

```

import { actions, isInputError } from 'astro:actions';

const form = document.querySelector('form');

const formData = new FormData(form);

const { error } = await actions.newsletter(formData);

if (isInputError(error)) {

  // Handle input errors.

  if (error.fields.email) {

    const message = error.fields.email.join(', ');

  }

}
```

## Call actions from an HTML form action

[Section titled Call actions from an HTML form action](https://docs.astro.build/en/guides/actions/#call-actions-from-an-html-form-action)

You can enable zero-JS form submissions with standard attributes on any `<form>` element. Form submissions without client-side JavaScript may be useful both as a fallback for when JavaScript fails to load, or if you prefer to handle forms entirely from the server.

Calling [Astro.getActionResult()](https://docs.astro.build/en/reference/api-reference/#getactionresult) on the server returns the result of your form submission ( `data` or `error`), and can be used to dynamically redirect, handle form errors, update the UI, and more.

To call an action from an HTML form, add `method="POST"` to your `<form>`, then set the form’s `action` attribute using your action, for example `action={actions.logout}`. This will set the `action` attribute to use a query string that is handled by the server automatically.

For example, this Astro component calls the `logout` action when the button is clicked and reloads the current page:

```

---

import { actions } from 'astro:actions';

---

<form method="POST" action={actions.logout}>

  <button>Log out</button>

</form>
```

Additional attributes on the `<form>` element may be necessary for proper schema validation with Zod. For example, to include file uploads, add `enctype="multipart/form-data"` to ensure that files are sent in a format correctly recognized by `z.instanceof(File)`:

```

---

import { actions } from 'astro:actions';

---

<form method="POST" action={actions.upload} enctype="multipart/form-data" >

  <label for="file">Upload File</label>

  <input type="file" id="file" name="file" />

  <button type="submit">Submit</button>

</form>
```

### Redirect on action success

[Section titled Redirect on action success](https://docs.astro.build/en/guides/actions/#redirect-on-action-success)

If you need to redirect to a new route on success, you can use an action’s result on the server. A common example is creating a product record and redirecting to the new product’s page, e.g. `/products/[id]`.

For example, say you have a `createProduct` action that returns the generated product id:

```

import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';

export const server = {

  createProduct: defineAction({

    accept: 'form',

    input: z.object({ /* ... */ }),

    handler: async (input) => {

      const product = await persistToDatabase(input);

      return { id: product.id };

    },

  })

}
```

You can retrieve the action result from your Astro component by calling `Astro.getActionResult()`. This returns an object containing `data` or `error` properties when an action is called, or `undefined` if the action was not called during this request.

Use the `data` property to construct a URL to use with `Astro.redirect()`:

```

---

import { actions } from 'astro:actions';

const result = Astro.getActionResult(actions.createProduct);

if (result && !result.error) {

  return Astro.redirect(`/products/${result.data.id}`);

}

---

<form method="POST" action={actions.createProduct}>

  <!--...-->

</form>
```

### Handle form action errors

[Section titled Handle form action errors](https://docs.astro.build/en/guides/actions/#handle-form-action-errors)

Calling `Astro.getActionResult()` in the Astro component containing your form gives you access to the `data` and `error` objects for custom error handling.

The following example displays a general failure message when a `newsletter` action fails:

```

---

import { actions } from 'astro:actions';

const result = Astro.getActionResult(actions.newsletter);

---

{result?.error && (

  <p class="error">Unable to sign up. Please try again later.</p>

)}

<form method="POST" action={actions.newsletter}>

  <label>

    E-mail

    <input required type="email" name="email" />

  </label>

  <button>Sign up</button>

</form>
```

For more customization, you can [use the `isInputError()` utility](https://docs.astro.build/en/guides/actions/#displaying-form-input-errors) to check whether an error is caused by invalid input.

The following example renders an error banner under the `email` input field when an invalid email is submitted:

```

---

import { actions, isInputError } from 'astro:actions';

const result = Astro.getActionResult(actions.newsletter);

const inputErrors = isInputError(result?.error) ? result.error.fields : {};

---

<form method="POST" action={actions.newsletter}>

  <label>

    E-mail

    <input required type="email" name="email" aria-describedby="error" />

  </label>

  {inputErrors.email && <p id="error">{inputErrors.email.join(',')}</p>}

  <button>Sign up</button>

</form>
```

#### Preserve input values on error

[Section titled Preserve input values on error](https://docs.astro.build/en/guides/actions/#preserve-input-values-on-error)

Inputs will be cleared whenever a form is submitted. To persist input values, you can [enable view transitions](https://docs.astro.build/en/guides/view-transitions/#adding-view-transitions-to-a-page) on the page and apply the `transition:persist` directive to each input:

```

<input transition:persist required type="email" name="email" />
```

### Update the UI with a form action result

[Section titled Update the UI with a form action result](https://docs.astro.build/en/guides/actions/#update-the-ui-with-a-form-action-result)

To use an action’s return value to display a notification to the user on success, pass the action to `Astro.getActionResult()`. Use the returned `data` property to render the UI you want to display.

This example uses the `productName` property returned by an `addToCart` action to show a success message.

```

---

import { actions } from 'astro:actions';

const result = Astro.getActionResult(actions.addToCart);

---

{result && !result.error && (

  <p class="success">Added {result.data.productName} to cart</p>

)}

<!--...-->
```

### Advanced: Persist action results with a session

[Section titled Advanced: Persist action results with a session](https://docs.astro.build/en/guides/actions/#advanced-persist-action-results-with-a-session)

**Added in:** `astro@5.0.0`

Action results are displayed as a POST submission. This means that the result will be reset to `undefined` when a user closes and revisits the page. The user will also see a “confirm form resubmission?” dialog if they attempt to refresh the page.

To customize this behavior, you can add middleware to handle the result of the action manually. You may choose to persist the action result using a cookie or session storage.

Start by [creating a middleware file](https://docs.astro.build/en/guides/middleware/) and importing [the `getActionContext()` utility](https://docs.astro.build/en/reference/modules/astro-actions/#getactioncontext) from `astro:actions`. This function returns an `action` object with information about the incoming action request, including the action handler and whether the action was called from an HTML form. `getActionContext()` also returns the `setActionResult()` and `serializeActionResult()` functions to programmatically set the value returned by `Astro.getActionResult()`:

```

import { defineMiddleware } from 'astro:middleware';

import { getActionContext } from 'astro:actions';

export const onRequest = defineMiddleware(async (context, next) => {

  const { action, setActionResult, serializeActionResult } = getActionContext(context);

  if (action?.calledFrom === 'form') {

    const result = await action.handler();

    // ... handle the action result

    setActionResult(action.name, serializeActionResult(result));

  }

  return next();

});
```

A common practice to persist HTML form results is the [POST / Redirect / GET pattern](https://en.wikipedia.org/wiki/Post/Redirect/Get). This redirect removes the “confirm form resubmission?” dialog when the page is refreshed, and allows action results to be persisted throughout the user’s session.

This example applies the POST / Redirect / GET pattern to all form submissions using session storage with the [Netlify server adapter](https://docs.astro.build/en/guides/integrations-guide/netlify/) installed. Action results are written to a session store using [Netlify Blob](https://docs.netlify.com/blobs/overview/), and retrieved after a redirect using a session ID:

```

import { defineMiddleware } from 'astro:middleware';

import { getActionContext } from 'astro:actions';

import { randomUUID } from "node:crypto";

import { getStore } from "@netlify/blobs";

export const onRequest = defineMiddleware(async (context, next) => {

  // Skip requests for prerendered pages

  if (context.isPrerendered) return next();

  const { action, setActionResult, serializeActionResult } =

    getActionContext(context);

  // Create a Blob store to persist action results with Netlify Blob

  const actionStore = getStore("action-session");

  // If an action result was forwarded as a cookie, set the result

  // to be accessible from `Astro.getActionResult()`

  const sessionId = context.cookies.get("action-session-id")?.value;

  const session = sessionId

    ? await actionStore.get(sessionId, {

        type: "json",

      })

    : undefined;

  if (session) {

    setActionResult(session.actionName, session.actionResult);

    // Optional: delete the session after the page is rendered.

    // Feel free to implement your own persistence strategy

    await actionStore.delete(sessionId);

    context.cookies.delete("action-session-id");

    return next();

  }

  // If an action was called from an HTML form action,

  // call the action handler and redirect to the destination page

  if (action?.calledFrom === "form") {

    const actionResult = await action.handler();

    // Persist the action result using session storage

    const sessionId = randomUUID();

    await actionStore.setJSON(sessionId, {

      actionName: action.name,

      actionResult: serializeActionResult(actionResult),

    });

    // Pass the session ID as a cookie

    // to be retrieved after redirecting to the page

    context.cookies.set("action-session-id", sessionId);

    // Redirect back to the previous page on error

    if (actionResult.error) {

      const referer = context.request.headers.get("Referer");

      if (!referer) {

        throw new Error(

          "Internal: Referer unexpectedly missing from Action POST request.",

        );

      }

      return context.redirect(referer);

    }

    // Redirect to the destination page on success

    return context.redirect(context.originPathname);

  }

  return next();

});
```

## Security when using actions

[Section titled Security when using actions](https://docs.astro.build/en/guides/actions/#security-when-using-actions)

Actions are accessible as public endpoints based on the name of the action. For example, the action `blog.like()` will be accessible from `/_actions/blog.like`. This is useful for unit testing action results and debugging production errors. However, this means you **must** use same authorization checks that you would consider for API endpoints and on-demand rendered pages.

### Authorize users from an action handler

[Section titled Authorize users from an action handler](https://docs.astro.build/en/guides/actions/#authorize-users-from-an-action-handler)

To authorize action requests, add an authentication check to your action handler. You may want to use [an authentication library](https://docs.astro.build/en/guides/authentication/) to handle session management and user information.

Actions expose the full `APIContext` object to access properties passed from middleware using `context.locals`. When a user is not authorized, you can raise an `ActionError` with the `UNAUTHORIZED` code:

```

import { defineAction, ActionError } from 'astro:actions';

export const server = {

  getUserSettings: defineAction({

    handler: async (_input, context) => {

      if (!context.locals.user) {

        throw new ActionError({ code: 'UNAUTHORIZED' });

      }

      return { /* data on success */ };

    }

  })

}
```

### Gate actions from middleware

[Section titled Gate actions from middleware](https://docs.astro.build/en/guides/actions/#gate-actions-from-middleware)

**Added in:** `astro@5.0.0`

Astro recommends authorizing user sessions from your action handler to respect permission levels and rate-limiting on a per-action basis. However, you can also gate requests to all actions (or a subset of actions) from middleware.

Use the `getActionContext()` function from your middleware to retrieve information about any inbound action requests. This includes the action name and whether that action was called using a client-side remote procedure call (RPC) function (e.g. `actions.blog.like()`) or an HTML form.

The following example rejects all action requests that do not have a valid session token. If the check fails, a “Forbidden” response is returned. Note: this method ensures that actions are only accessible when a session is present, but is _not_ a substitute for secure authorization.

```

import { defineMiddleware } from 'astro:middleware';

import { getActionContext } from 'astro:actions';

export const onRequest = defineMiddleware(async (context, next) => {

  const { action } = getActionContext(context);

  // Check if the action was called from a client-side function

  if (action?.calledFrom === 'rpc') {

    // If so, check for a user session token

    if (!context.cookies.has('user-session')) {

      return new Response('Forbidden', { status: 403 });

    }

  }

  context.cookies.set('user-session', /* session token */);

  return next();

});
```

## Call actions from Astro components and server endpoints

[Section titled Call actions from Astro components and server endpoints](https://docs.astro.build/en/guides/actions/#call-actions-from-astro-components-and-server-endpoints)

You can call actions directly from Astro component scripts using the `Astro.callAction()` wrapper (or `context.callAction()` when using a [server endpoint](https://docs.astro.build/en/guides/endpoints/#server-endpoints-api-routes)). This is common to reuse logic from your actions in other server code.

Pass the action as the first argument and any input parameters as the second argument. This returns the same `data` and `error` objects you receive when calling actions on the client:

```

---

import { actions } from 'astro:actions';

const searchQuery = Astro.url.searchParams.get('search');

if (searchQuery) {

  const { data, error } = await Astro.callAction(actions.findProduct, { query: searchQuery });

  // handle result

}

---
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Internationalization Routing
[Skip to content](https://docs.astro.build/en/guides/internationalization/#_top)

# Internationalization (i18n) Routing

Astro’s internationalization (i18n) features allow you to adapt your project for an international audience. This routing API helps you generate, use, and verify the URLs that your multi-language site produces.

Astro’s i18n routing allows you to bring your multilingual content with support for configuring a default language, computing relative page URLs, and accepting preferred languages provided by your visitor’s browser. You can also specify fallback languages on a per-language basis so that your visitors can always be directed to existing content on your site.

## Routing Logic

[Section titled Routing Logic](https://docs.astro.build/en/guides/internationalization/#routing-logic)

Astro uses a [middleware](https://docs.astro.build/en/guides/middleware/) to implement its routing logic. This middleware function is placed in the [first position](https://docs.astro.build/en/guides/middleware/#chaining-middleware) where it awaits every `Response` coming from any additional middleware and each page route before finally executing its own logic.

This means that operations (e.g. redirects) from your own middleware and your page logic are run first, your routes are rendered, and then the i18n middleware performs its own actions such as verifying that a localized URL corresponds to a valid route.

You can also choose to [add your own i18n logic in addition to or instead of Astro’s i18n middleware](https://docs.astro.build/en/guides/internationalization/#manual), giving you even more control over your routes while still having access to the `astro:i18n` helper functions.

## Configure i18n routing

[Section titled Configure i18n routing](https://docs.astro.build/en/guides/internationalization/#configure-i18n-routing)

Both a list of all supported languages ( [`locales`](https://docs.astro.build/en/reference/configuration-reference/#i18nlocales)) and a default language ( [`defaultLocale`](https://docs.astro.build/en/reference/configuration-reference/#i18ndefaultlocale)), which must be one of the languages listed in `locales`, need to be specified in an `i18n` configuration object. Additionally, you can configure more specific routing and fallback behavior to match your desired URLs.

```

import { defineConfig } from "astro/config"

export default defineConfig({

  i18n: {

    locales: ["es", "en", "pt-br"],

    defaultLocale: "en",

  }

})
```

### Create localized folders

[Section titled Create localized folders](https://docs.astro.build/en/guides/internationalization/#create-localized-folders)

Organize your content folders with localized content by language. Create individual `/[locale]/` folders anywhere within `src/pages/` and Astro’s [file-based routing](https://docs.astro.build/en/guides/routing/) will create your pages at corresponding URL paths.

Your folder names must match the items in `locales` exactly. Include a localized folder for your `defaultLocale` only if you configure `prefixDefaultLocale: true` to show a localized URL path for your default language (e.g. `/en/about/`).

- Directorysrc


- Directorypages


- about.astro
- index.astro
- Directoryes


- about.astro
- index.astro

- Directorypt-br


- about.astro
- index.astro

### Create links

[Section titled Create links](https://docs.astro.build/en/guides/internationalization/#create-links)

With i18n routing configured, you can now compute links to pages within your site using the helper functions such as [`getRelativeLocaleUrl()`](https://docs.astro.build/en/reference/modules/astro-i18n/#getrelativelocaleurl) available from the [`astro:i18n` module](https://docs.astro.build/en/reference/modules/astro-i18n/). These generated links will always provide the correct, localized route and can help you correctly use, or check, URLs on your site.

You can also still write the links manually.

```

---

import { getRelativeLocaleUrl } from 'astro:i18n';

// defaultLocale is "es"

const aboutURL = getRelativeLocaleUrl("es", "about");

---

<a href="/get-started/">¡Vamos!</a>

<a href={getRelativeLocaleUrl('es', 'blog')}>Blog</a>

<a href={aboutURL}>Acerca</a>
```

## `routing`

[Section titled routing](https://docs.astro.build/en/guides/internationalization/#routing)

Astro’s built-in file-based routing automatically creates URL routes for you based on your file structure within `src/pages/`.

When you configure i18n routing, information about this file structure (and the corresponding URL paths generated) is available to the i18n helper functions so they can generate, use, and verify the routes in your project. Many of these options can be used together for even more customization and per-language flexibility.

You can even choose to [implement your own routing logic manually](https://docs.astro.build/en/guides/internationalization/#manual) for even greater control.

### `prefixDefaultLocale`

[Section titled prefixDefaultLocale](https://docs.astro.build/en/guides/internationalization/#prefixdefaultlocale)

**Added in:** `astro@3.5.0`

This routing option defines whether or not your default language’s URLs should use a language prefix (e.g. `/en/about/`).

All non-default supported languages **will** use a localized prefix (e.g. `/fr/` or `/french/`) and content files must be located in appropriate folders. This configuration option allows you to specify whether your default language should also follow a localized URL structure.

This setting also determines where the page files for your default language must exist (e.g. `src/pages/about/` or `src/pages/en/about`) as the file structure and URL structure must match for all languages.

- `"prefixDefaultLocale: false"` (default): URLs in your default language will **not** have a `/[locale]/` prefix. All other locales will.

- `"prefixDefaultLocale: true"`: All URLs, including your default language, will have a `/[locale]/` prefix.


#### `prefixDefaultLocale: false`

[Section titled prefixDefaultLocale: false](https://docs.astro.build/en/guides/internationalization/#prefixdefaultlocale-false)

```

import { defineConfig } from "astro/config"

export default defineConfig({

  i18n: {

    locales: ["es", "en", "fr"],

    defaultLocale: "en",

    routing: {

        prefixDefaultLocale: false

    }

  }

})
```

This is the **default** value. Set this option when URLs in your default language will **not** have a `/[locale]/` prefix and files in your default language exist at the root of `src/pages/`:

- Directorysrc


- Directorypages


- about.astro
- index.astro
- Directoryes


- about.astro
- index.astro

- Directoryfr


- about.astro
- index.astro

- `src/pages/about.astro` will produce the route `example.com/about/`
- `src/pages/fr/about.astro` will produce the route `example.com/fr/about/`

#### `prefixDefaultLocale: true`

[Section titled prefixDefaultLocale: true](https://docs.astro.build/en/guides/internationalization/#prefixdefaultlocale-true)

```

import { defineConfig } from "astro/config"

export default defineConfig({

  i18n: {

    locales: ["es", "en", "fr"],

    defaultLocale: "en",

    routing: {

        prefixDefaultLocale: true

    }

  }

})
```

Set this option when all routes will have their `/locale/` prefix in their URL and when all page content files, including those for your `defaultLocale`, exist in a localized folder:

- Directorysrc


- Directorypages


- **index.astro** // Note: this file is always required
- Directoryen


- index.astro
- about.astro

- Directoryes


- about.astro
- index.astro

- Directorypt-br


- about.astro
- index.astro

- URLs without a locale prefix, (e.g. `example.com/about/`) will return a 404 (not found) status code unless you specify a [fallback strategy](https://docs.astro.build/en/guides/internationalization/#fallback).

### `redirectToDefaultLocale`

[Section titled redirectToDefaultLocale](https://docs.astro.build/en/guides/internationalization/#redirecttodefaultlocale)

**Added in:** `astro@4.2.0`

Configures whether or not the home URL ( `/`) generated by `src/pages/index.astro` will redirect to `/<defaultLocale>`.

Setting `prefixDefaultLocale: true` will also automatically set `redirectToDefaultLocale: true` in your `routing` config object. By default, the required `src/pages/index.astro` file will automatically redirect to the index page of your default locale.

You can opt out of this behavior by [setting `redirectToDefaultLocale: false`](https://docs.astro.build/en/reference/configuration-reference/#i18nroutingredirecttodefaultlocale). This allows you to have a site home page that exists outside of your configured locale folder structure.

### `manual`

[Section titled manual](https://docs.astro.build/en/guides/internationalization/#manual)

**Added in:** `astro@4.6.0`

When this option is enabled, Astro will **disable** its i18n middleware so that you can implement your own custom logic. No other `routing` options (e.g. `prefixDefaultLocale`) may be configured with `routing: "manual"`.

You will be responsible for writing your own routing logic, or [executing Astro’s i18n middleware manually](https://docs.astro.build/en/guides/internationalization/#middleware-function) alongside your own.

```

import { defineConfig } from "astro/config"

export default defineConfig({

  i18n: {

    locales: ["es", "en", "fr"],

    defaultLocale: "en",

    routing: "manual"

  }

})
```

Astro provides helper functions for your middleware so you can control your own default routing, exceptions, fallback behavior, error catching, etc: [`redirectToDefaultLocale()`](https://docs.astro.build/en/reference/modules/astro-i18n/#redirecttodefaultlocale), [`notFound()`](https://docs.astro.build/en/reference/modules/astro-i18n/#notfound), and [`redirectToFallback()`](https://docs.astro.build/en/reference/modules/astro-i18n/#redirecttofallback):

```

import { defineMiddleware } from "astro:middleware";

import { redirectToDefaultLocale } from "astro:i18n"; // function available with `manual` routing

export const onRequest = defineMiddleware(async (ctx, next) => {

  if (ctx.url.startsWith("/about")) {

    return next();

  } else {

    return redirectToDefaultLocale(302);

  }

})
```

#### middleware function

[Section titled middleware function](https://docs.astro.build/en/guides/internationalization/#middleware-function)

The [`middleware`](https://docs.astro.build/en/guides/internationalization/#middleware-function) function manually creates Astro’s i18n middleware. This allows you to extend Astro’s i18n routing instead of completely replacing it.

You can run `middleware` with [routing options](https://docs.astro.build/en/guides/internationalization/#routing) in combination with your own middleware, using the [`sequence`](https://docs.astro.build/en/reference/modules/astro-middleware/#sequence) utility to determine the order:

```

import {defineMiddleware, sequence} from "astro:middleware";

import { middleware } from "astro:i18n"; // Astro's own i18n routing config

export const userMiddleware = defineMiddleware(async (ctx, next) => {

  // this response might come from Astro's i18n middleware, and it might return a 404

  const response = await next();

  // the /about page is an exception and we want to render it

  if (ctx.url.startsWith("/about")) {

    return new Response("About page", {

      status: 200

    });

  } else {

    return response;

  }

});

export const onRequest = sequence(

  userMiddleware,

  middleware({

    redirectToDefaultLocale: false,

    prefixDefaultLocale: true

  })

)
```

## `domains`

[Section titled domains](https://docs.astro.build/en/guides/internationalization/#domains)

**Added in:** `astro@4.9.0`

This routing option allows you to customize your domains on a per-language basis for `server` rendered projects using the [`@astrojs/node`](https://docs.astro.build/en/guides/integrations-guide/node/) or [`@astrojs/vercel`](https://docs.astro.build/en/guides/integrations-guide/vercel/) adapter with a `site` configured.

Add `i18n.domains` to map any of your supported `locales` to custom URLs:

```

import { defineConfig } from "astro/config"

export default defineConfig({

  site: "https://example.com",

  output: "server", // required, with no prerendered pages

  adapter: node({

    mode: 'standalone',

  }),

  i18n: {

    locales: ["es", "en", "fr", "ja"],

    defaultLocale: "en",

    routing: {

      prefixDefaultLocale: false

    },

    domains: {

      fr: "https://fr.example.com",

      es: "https://example.es"

    }

  }

})
```

All non-mapped `locales` will follow your `prefixDefaultLocales` configuration. However, even if this value is `false`, page files for your `defaultLocale` must also exist within a localized folder. For the configuration above, an `/en/` folder is required.

With the above configuration:

- The file `/fr/about.astro` will create the URL `https://fr.example.com/about`.
- The file `/es/about.astro` will create the URL `https://example.es/about`.
- The file `/ja/about.astro` will create the URL `https://example.com/ja/about`.
- The file `/en/about.astro` will create the URL `https://example.com/about`.

The above URLs will also be returned by the `getAbsoluteLocaleUrl()` and `getAbsoluteLocaleUrlList()` functions.

## Fallback

[Section titled Fallback](https://docs.astro.build/en/guides/internationalization/#fallback)

When a page in one language doesn’t exist (e.g. a page that is not yet translated), instead of displaying a 404 page, you can choose to display fallback content from another `locale` on a per-language basis. This is useful when you do not yet have a page for every route, but you want to still provide some content to your visitors.

Your fallback strategy consists of two parts: choosing which languages should fallback to which other languages ( [`i18n.fallback`](https://docs.astro.build/en/reference/configuration-reference/#i18nfallback)) and choosing whether to perform a [redirect](https://docs.astro.build/en/guides/routing/#redirects) or a [rewrite](https://docs.astro.build/en/guides/routing/#rewrites) to show the fallback content ( [`i18n.routing.fallbackType`](https://docs.astro.build/en/reference/configuration-reference/#i18nroutingfallbacktype) added in Astro v4.15.0).

For example, when you configure `i18n.fallback: { fr: "es" }`, Astro will ensure that a page is built in `src/pages/fr/` for every page that exists in `src/pages/es/`.

If any page does not already exist, then a page will be created depending on your `fallbackType`:

- With a redirect to the corresponding `es` route (default behavior).
- With the content of the `/es/` page ( `i18n.routing.fallbackType: "rewrite"`).

For example, the configuration below sets `es` as the fallback locale for any missing `fr` routes. This means that a user visiting `example.com/fr/my-page/` will be shown the content for `example.com/es/my-page/` (without being redirected) instead of being taken to a 404 page when `src/pages/fr/my-page.astro` does not exist.

```

import { defineConfig } from "astro/config"

export default defineConfig({

  i18n: {

    locales: ["es", "en", "fr"],

    defaultLocale: "en",

    fallback: {

      fr: "es"

    },

    routing: {

      fallbackType: "rewrite"

    }

  }

})
```

## Custom locale paths

[Section titled Custom locale paths](https://docs.astro.build/en/guides/internationalization/#custom-locale-paths)

In addition to defining your site’s supported `locales` as strings (e.g. “en”, “pt-br”), Astro also allows you to map an arbitrary number of [browser-recognized language `codes`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language#syntax) to a custom URL `path`. While locales can be strings of any format as long as they correspond to your project folder structure, `codes` must follow the browser’s accepted syntax.

Pass an object to the `locales` array with a `path` key to define a custom URL prefix, and `codes` to indicate the languages mapped to this URL. In this case, your `/[locale]/` folder name must match exactly the value of the `path` and your URLs will be generated using the `path` value.

This is useful if you support multiple variations of a language (e.g. `"fr"`, `"fr-BR"`, and `"fr-CA"`) and you want to have all these variations mapped under the same URL `/fr/`, or even customize it entirely (e.g. `/french/`):

```

import { defineConfig } from "astro/config"

export default defineConfig({

  i18n: {

    locales: ["es", "en", "fr"],

    locales: ["es", "en", {\
\
      path: "french", // no slashes included\
\
      codes: ["fr", "fr-BR", "fr-CA"]\
\
    }],

    defaultLocale: "en",

    routing: {

        prefixDefaultLocale: true

    }

  }

})
```

When using functions from the [`astro:i18n` virtual module](https://docs.astro.build/en/reference/modules/astro-i18n/) to compute valid URL paths based on your configuration (e.g. `getRelativeLocaleUrl()`), [use the `path` as the value for `locale`](https://docs.astro.build/en/reference/modules/astro-i18n/#getlocalebypath).

#### Limitations

[Section titled Limitations](https://docs.astro.build/en/guides/internationalization/#limitations)

This feature has some restrictions:

- The `site` option is mandatory.
- The `output` option must be set to `"server"`.
- There cannot be any individual prerendered pages.

Astro relies on the following headers in order to support the feature:

- [`X-Forwarded-Host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host) and [`Host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host). Astro will use the former, and if not present, will try the latter.
- [`X-Forwarded-Proto`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto) and [`URL#protocol`](https://developer.mozilla.org/en-US/docs/Web/API/URL/protocol) of the server request.

Make sure that your server proxy/hosting platform is able to provide this information. Failing to retrieve these headers will result in a 404 (status code) page.

## Browser language detection

[Section titled Browser language detection](https://docs.astro.build/en/guides/internationalization/#browser-language-detection)

Astro’s i18n routing allows you to access two properties for browser language detection in pages rendered on demand: `Astro.preferredLocale` and `Astro.preferredLocaleList`. All pages, including static prerendered pages, have access to `Astro.currentLocale`.

These combine the browser’s `Accept-Language` header, and your `locales` (strings or `codes`) to automatically respect your visitor’s preferred languages.

- [`Astro.preferredLocale`](https://docs.astro.build/en/reference/api-reference/#preferredlocale): Astro can compute a **preferred locale** for your visitor if their browser’s preferred locale is included in your `locales` array. This value is undefined if no such match exists.

- [`Astro.preferredLocaleList`](https://docs.astro.build/en/reference/api-reference/#preferredlocalelist): An array of all locales that are both requested by the browser and supported by your website. This produces a list of all compatible languages between your site and your visitor. The value is `[]` if none of the browser’s requested languages are found in your `locales` array. If the browser does not specify any preferred languages, then this value will be [`i18n.locales`](https://docs.astro.build/en/reference/configuration-reference/#i18nlocales).

- [`Astro.currentLocale`](https://docs.astro.build/en/reference/api-reference/#currentlocale): The locale computed from the current URL, using the syntax specified in your `locales` configuration. If the URL does not contain a `/[locale]/` prefix, then the value will default to [`i18n.defaultLocale`](https://docs.astro.build/en/reference/configuration-reference/#i18ndefaultlocale).


In order to successfully match your visitors’ preferences, provide your `codes` using the same pattern [used by the browser](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language#syntax).

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Finternationalization%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=23831840)

## Astro Site Deployment
[Skip to content](https://docs.astro.build/en/guides/deploy/#_top)

# Deploy your Astro Site

**Ready to build and deploy your Astro site?** Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.

## Deployment Guides

[Section titled Deployment Guides](https://docs.astro.build/en/guides/deploy/#deployment-guides)

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)



On demandStatic

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)



On demandStatic

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)



On demandStatic

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)



Static

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)



Static

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)



On demandStatic

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)



On demandStatic

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)



On demandStatic

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)



On demandStatic

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)



On demandStatic

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)



On demandStatic

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)



On demandStatic

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)



On demandStatic

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)



Static

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)



Static

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)



Static

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)



Static

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)



On demandStatic

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)



Static

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)



Static

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)



Static

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)



On demandStatic

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)



On demandStatic

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)



On demandStatic

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)



On demandStatic


## Quick Deploy Options

[Section titled Quick Deploy Options](https://docs.astro.build/en/guides/deploy/#quick-deploy-options)

You can build and deploy an Astro site to a number of hosts quickly using either their website’s dashboard UI or a CLI.

### Website UI

[Section titled Website UI](https://docs.astro.build/en/guides/deploy/#website-ui)

A quick way to deploy your website is to connect your Astro project’s online Git repository (e.g. GitHub, GitLab, Bitbucket) to a host provider and take advantage of continuous deployment using Git.

These host platforms automatically detect pushes to your Astro project’s source repository, build your site and deploy it to the web at a custom URL or your personal domain. Often, setting up a deployment on these platforms will follow steps something like the following:

1. Add your repository to an online Git provider (e.g. in GitHub, GitLab, Bitbucket)

2. Choose a host that supports **continuous deployment** (e.g. [Netlify](https://docs.astro.build/en/guides/deploy/netlify/) or [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)) and import your Git repository as a new site/project.

Many common hosts will recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy your site as shown below. (If not, these settings can be changed.)

3. Click “Deploy” and your new website will be created at a unique URL for that host (e.g. `new-astro-site.netlify.app`).


The host will be automatically configured to watch your Git provider’s main branch for changes, and to rebuild and republish your site at each new commit. These settings can typically be configured in your host provider’s dashboard UI.

### CLI Deployment

[Section titled CLI Deployment](https://docs.astro.build/en/guides/deploy/#cli-deployment)

Some hosts will have their own command line interface (CLI) you can install globally to your machine using npm. Often, using a CLI to deploy looks something like the following:

1. Install your host’s CLI globally, for example:




- [npm](https://docs.astro.build/en/guides/deploy/#tab-panel-3165)
- [pnpm](https://docs.astro.build/en/guides/deploy/#tab-panel-3166)
- [Yarn](https://docs.astro.build/en/guides/deploy/#tab-panel-3167)

```

npm install --global netlify-cli
```

```

pnpm add --global netlify-cli
```

```

yarn global add netlify-cli
```

2. Run the CLI and follow any instructions for authorization, setup etc.

3. Build your site and deploy to your host

Many common hosts will build and deploy your site for you. They will usually recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy as shown below. (If not, these settings can be changed.)

Other hosts will require you to [build your site locally](https://docs.astro.build/en/guides/deploy/#building-your-site-locally) and deploy using the command line.


## Building Your Site Locally

[Section titled Building Your Site Locally](https://docs.astro.build/en/guides/deploy/#building-your-site-locally)

Many hosts like Netlify and Vercel will build your site for you and then publish that build output to the web. But, some sites will require you to build locally and then run a deploy command or upload your build output.

You may also wish to build locally to preview your site, or to catch any potential errors and warnings in your own environment.

Run the command `npm run build` to build your Astro site.

- [npm](https://docs.astro.build/en/guides/deploy/#tab-panel-3168)
- [pnpm](https://docs.astro.build/en/guides/deploy/#tab-panel-3169)
- [Yarn](https://docs.astro.build/en/guides/deploy/#tab-panel-3170)

```

npm run build
```

```

pnpm run build
```

```

yarn run build
```

By default, the build output will be placed at `dist/`. This location can be changed using the [`outDir` configuration option](https://docs.astro.build/en/reference/configuration-reference/#outdir).

## Adding an Adapter for on-demand rendering

[Section titled Adding an Adapter for on-demand rendering](https://docs.astro.build/en/guides/deploy/#adding-an-adapter-for-on-demand-rendering)

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=89746328)

## Verify Google reCAPTCHA
[Skip to content](https://docs.astro.build/en/recipes/captcha/#_top)

# Verify a Captcha

[Server endpoints](https://docs.astro.build/en/guides/endpoints/#server-endpoints-api-routes) can be used as REST API endpoints to run functions such as authentications, database access, and verifications without exposing sensitive data to the client.

In this recipe, an API route is used to verify Google reCAPTCHA v3 without exposing the secret to clients.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/recipes/captcha/#prerequisites)

- A project with [SSR](https://docs.astro.build/en/guides/on-demand-rendering/) ( `output: 'server'`) enabled

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/captcha/#recipe)

1. Create a `POST` endpoint that accepts recaptcha data, then verifies it with reCAPTCHA’s API. Here, you can safely define secret values or read environment variables.



```


export async function POST({ request }) {

     const data = await request.json();




     const recaptchaURL = 'https://www.google.com/recaptcha/api/siteverify';

     const requestHeaders = {

       'Content-Type': 'application/x-www-form-urlencoded'

     };

     const requestBody = new URLSearchParams({

       secret: "YOUR_SITE_SECRET_KEY",   // This can be an environment variable

       response: data.recaptcha          // The token passed in from the client

     });




     const response = await fetch(recaptchaURL, {

       method: "POST",

       headers: requestHeaders,

       body: requestBody.toString()

     });




     const responseData = await response.json();




     return new Response(JSON.stringify(responseData), { status: 200 });

}
```

2. Access your endpoint using `fetch` from a client script:



```


<html>

     <head>

       <script is:inline src="https://www.google.com/recaptcha/api.js"></script>

     </head>




     <body>

       <button class="g-recaptcha"

         data-sitekey="PUBLIC_SITE_KEY"

         data-callback="onSubmit"

         data-action="submit"> Click me to verify the captcha challenge! </button>




       <script is:inline>

         function onSubmit(token) {

           fetch("/recaptcha", {

             method: "POST",

             body: JSON.stringify({ recaptcha: token })

           })

           .then((response) => response.json())

           .then((gResponse) => {

             if (gResponse.success) {

               // Captcha verification was a success

             } else {

               // Captcha verification failed

             }

           })

         }

       </script>

     </body>

</html>
```


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fcaptcha%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=57904034)

## Astro Authentication Guide
[Skip to content](https://docs.astro.build/en/guides/authentication/#_top)

# Authentication

Authentication and authorization are two security processes that manage access to your website or app. Authentication verifies a visitor’s identity, while authorization grants access to protected areas and resources.

Authentication allows you to customize areas of your site for logged-in individuals and provides the greatest protection for personal or private information. Authentication libraries (e.g. [Auth.js](https://authjs.dev/), [Clerk](https://clerk.com/)) provide utilities for multiple authentication methods such as email sign-in and OAuth providers.

See how to [add authentication with Supabase](https://docs.astro.build/en/guides/backend/supabase/#adding-authentication-with-supabase) or [add authentication with Firebase](https://docs.astro.build/en/guides/backend/google-firebase/#adding-authentication-with-firebase) in our dedicated guides for these backend services.

## Auth.js

[Section titled Auth.js](https://docs.astro.build/en/guides/authentication/#authjs)

Auth.js is a framework agnostic solution for authentication. A community framework adapter [`auth-astro`](https://www.npmjs.com/package/auth-astro) is available for Astro.

### Installation

[Section titled Installation](https://docs.astro.build/en/guides/authentication/#installation)

Use the `astro add` command for your preferred package manager to add the `auth-astro` integration.

- [npm](https://docs.astro.build/en/guides/authentication/#tab-panel-1776)
- [pnpm](https://docs.astro.build/en/guides/authentication/#tab-panel-1777)
- [Yarn](https://docs.astro.build/en/guides/authentication/#tab-panel-1778)

```

npx astro add auth-astro
```

```

pnpm astro add auth-astro
```

```

yarn astro add auth-astro
```

#### Manual installation

[Section titled Manual installation](https://docs.astro.build/en/guides/authentication/#manual-installation)

To install `auth-astro` manually, install the required package for your package manager:

- [npm](https://docs.astro.build/en/guides/authentication/#tab-panel-1779)
- [pnpm](https://docs.astro.build/en/guides/authentication/#tab-panel-1780)
- [Yarn](https://docs.astro.build/en/guides/authentication/#tab-panel-1781)

```

npm install auth-astro @auth/core@^0.18.6
```

```

pnpm add auth-astro @auth/core@^0.18.6
```

```

yarn add auth-astro @auth/core@^0.18.6
```

Then, apply the integration to your `astro.config.*` file using the `integrations` property:

```

import { defineConfig } from 'astro/config';

import auth from 'auth-astro';

export default defineConfig({

  // ...

  integrations: [auth()],

});
```

### Configuration

[Section titled Configuration](https://docs.astro.build/en/guides/authentication/#configuration)

Create an `auth.config.ts` file in your project’s root directory. Add any auth [providers](https://authjs.dev/getting-started/providers) or methods you wish to support, along with any environment variables they require.

```

import GitHub from '@auth/core/providers/github';

import { defineConfig } from 'auth-astro';

export default defineConfig({

  providers: [\
\
    GitHub({\
\
      clientId: import.meta.env.GITHUB_CLIENT_ID,\
\
      clientSecret: import.meta.env.GITHUB_CLIENT_SECRET,\
\
    }),\
\
  ],

});
```

Create a `.env` file in the root of your project if it does not already exist. Add the following two environment variables. `AUTH_SECRET` should be a private string with a minimum of 32 characters.

```

AUTH_TRUST_HOST=true

AUTH_SECRET=<my-auth-secret>
```

### Usage

[Section titled Usage](https://docs.astro.build/en/guides/authentication/#usage)

You can add sign-in and sign-out buttons using the `auth-astro/client` module in a script tag or client-side framework component.

```

---

import Layout from 'src/layouts/Base.astro';

---

<Layout>

  <button id="login">Login</button>

  <button id="logout">Logout</button>

  <script>

    const { signIn, signOut } = await import("auth-astro/client")

    document.querySelector("#login").onclick = () => signIn("github")

    document.querySelector("#logout").onclick = () => signOut()

  </script>

</Layout>
```

You can fetch the user’s session using the `getSession` method.

```

---

import Layout from 'src/layouts/Base.astro';

import { getSession } from 'auth-astro/server';

const session = await getSession(Astro.request);

---

<Layout>

  {

    session ? (

      <p>Welcome {session.user?.name}</p>

    ) : (

      <p>Not logged in</p>

    )

  }

</Layout>
```

### Next Steps

[Section titled Next Steps](https://docs.astro.build/en/guides/authentication/#next-steps)

- [`auth-astro` on GitHub](https://github.com/nowaythatworked/auth-astro?tab=readme-ov-file#auth-astro)
- [Auth.js documentation](https://authjs.dev/)

## Better Auth

[Section titled Better Auth](https://docs.astro.build/en/guides/authentication/#better-auth)

Better Auth is a framework-agnostic authentication (and authorization) framework for TypeScript. It provides a comprehensive set of features out of the box and includes a plugin ecosystem that simplifies adding advanced functionalities.

It supports Astro out of the box, and you can use it to add authentication to your astro project.

### Installation

[Section titled Installation](https://docs.astro.build/en/guides/authentication/#installation-1)

- [npm](https://docs.astro.build/en/guides/authentication/#tab-panel-1782)
- [pnpm](https://docs.astro.build/en/guides/authentication/#tab-panel-1783)
- [Yarn](https://docs.astro.build/en/guides/authentication/#tab-panel-1784)

```

npm install better-auth
```

```

pnpm add better-auth
```

```

yarn add better-auth
```

For detailed setup instructions, check out the [Better Auth Installation Guide](https://www.better-auth.com/docs/installation).

### Configuration

[Section titled Configuration](https://docs.astro.build/en/guides/authentication/#configuration-1)

Configure your database table to store user data and your preferred authentication methods as described in the [Better Auth Installation Guide](https://www.better-auth.com/docs/installation#configure-database). Then, you’ll need to mount the Better Auth handler in your Astro project.

```

import { auth } from "../../../lib/auth"; // import your Better Auth instance

import type { APIRoute } from "astro";

export const ALL: APIRoute = async (ctx) => {

  return auth.handler(ctx.request);

};
```

Follow the [Better Auth Astro Guide](https://www.better-auth.com/docs/integrations/astro) to learn more.

### Usage

[Section titled Usage](https://docs.astro.build/en/guides/authentication/#usage-1)

Better Auth offers a `createAuthClient` helper for various frameworks, including Vanilla JS, React, Vue, Svelte, and Solid.

For example, to create a client for React, import the helper from `'better-auth/react'`:

- [React](https://docs.astro.build/en/guides/authentication/#tab-panel-1788)
- [Solid](https://docs.astro.build/en/guides/authentication/#tab-panel-1789)
- [Svelte](https://docs.astro.build/en/guides/authentication/#tab-panel-1790)
- [Vue](https://docs.astro.build/en/guides/authentication/#tab-panel-1791)

```

import { createAuthClient } from 'better-auth/react';

export const authClient = createAuthClient();

export const { signIn, signOut } = authClient;
```

```

import { createAuthClient } from 'better-auth/solid';

export const authClient = createAuthClient();

export const { signIn, signOut } = authClient;
```

```

import { createAuthClient } from 'better-auth/svelte';

export const authClient = createAuthClient();

export const { signIn, signOut } = authClient;
```

```

import { createAuthClient } from 'better-auth/vue';

export const authClient = createAuthClient();

export const { signIn, signOut } = authClient;
```

Once your client is set up, you can use it to authenticate users in your Astro components or any framework-specific files. The following example adds the ability to log in or log out with your configured `signIn()` and `signOut()` functions.

```

---

import Layout from 'src/layouts/Base.astro';

---

<Layout>

  <button id="login">Login</button>

  <button id="logout">Logout</button>

  <script>

    const { signIn, signOut } = await import("./lib/auth-client")

    document.querySelector("#login").onclick = () => signIn.social({

      provider: "github",

      callbackURL: "/dashboard",

    })

    document.querySelector("#logout").onclick = () => signOut()

  </script>

</Layout>
```

You can then use the `auth` object to get the user’s session data in your server-side code. The following example personalizes page content by displaying an authenticated user’s name:

```

---

import { auth } from "../../../lib/auth"; // import your Better Auth instance

const session = await auth.api.getSession({

  headers: Astro.request.headers,

});

---

<p>{session.user?.name}</p>
```

You can also use the `auth` object to protect your routes using middleware. The following example checks whether a user trying to access a logged-in dashboard route is authenticated, and redirects them to the home page if not.

```

import { auth } from "../../../auth"; // import your Better Auth instance

import { defineMiddleware } from "astro:middleware";

export const onRequest = defineMiddleware(async (context, next) => {

  const isAuthed = await auth.api

    .getSession({

      headers: context.request.headers,

    })

  if (context.url.pathname === "/dashboard" && !isAuthed) {

    return context.redirect("/");

  }

  return next();

});
```

### Next Steps

[Section titled Next Steps](https://docs.astro.build/en/guides/authentication/#next-steps-1)

- [Better Auth Astro Guide](https://www.better-auth.com/docs/integrations/astro)
- [Better Auth Astro Example](https://github.com/better-auth/better-auth/tree/main/examples/astro-example)
- [Better Auth Documentation](https://www.better-auth.com/docs)
- [Better Auth GitHub Repository](https://github.com/better-auth/better-auth)

## Clerk

[Section titled Clerk](https://docs.astro.build/en/guides/authentication/#clerk)

Clerk is a complete suite of embeddable UIs, flexible APIs, and admin dashboards to authenticate and manage your users. An [official Clerk SDK for Astro](https://clerk.com/docs/references/astro/overview) is available.

### Installation

[Section titled Installation](https://docs.astro.build/en/guides/authentication/#installation-2)

Install `@clerk/astro` using the package manager of your choice.

- [npm](https://docs.astro.build/en/guides/authentication/#tab-panel-1785)
- [pnpm](https://docs.astro.build/en/guides/authentication/#tab-panel-1786)
- [Yarn](https://docs.astro.build/en/guides/authentication/#tab-panel-1787)

```

npm install @clerk/astro
```

```

pnpm add @clerk/astro
```

```

yarn add @clerk/astro
```

### Configuration

[Section titled Configuration](https://docs.astro.build/en/guides/authentication/#configuration-2)

Follow [Clerk’s own Astro Quickstart guide](https://clerk.com/docs/quickstarts/astro) to set up Clerk integration and middleware in your Astro project.

### Usage

[Section titled Usage](https://docs.astro.build/en/guides/authentication/#usage-2)

Clerk provides components that allow you to control the visibility of pages based on your user’s authentication state. Show logged out users a sign in button instead of the content available to users who are logged in:

```

---

import Layout from 'src/layouts/Base.astro';

import { SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/astro/components';

---

<Layout>

    <SignedIn>

        <UserButton />

    </SignedIn>

    <SignedOut>

        <SignInButton />

    </SignedOut>

</Layout>
```

Clerk also allows you to protect routes on the server using middleware. Specify which routes are protected, and prompt unauthenticated users to sign in:

```

import { clerkMiddleware, createRouteMatcher } from '@clerk/astro/server';

const isProtectedRoute = createRouteMatcher([\
\
  '/dashboard(.*)',\
\
  '/forum(.*)',\
\
]);

export const onRequest = clerkMiddleware((auth, context) => {

  if (!auth().userId && isProtectedRoute(context.request)) {

    return auth().redirectToSignIn();

  }

});
```

### Next Steps

[Section titled Next Steps](https://docs.astro.build/en/guides/authentication/#next-steps-2)

- Read the [official `@clerk/astro` documentation](https://clerk.com/docs/references/astro/overview)
- Start from a template with the [Clerk + Astro Quickstart project](https://github.com/clerk/clerk-astro-quickstart)

## Lucia

[Section titled Lucia](https://docs.astro.build/en/guides/authentication/#lucia)

[Lucia](https://lucia-auth.com/) is a resource for implementing session-based authentication in a number of frameworks, including Astro.

### Guides

[Section titled Guides](https://docs.astro.build/en/guides/authentication/#guides)

1. Create a [basic sessions API](https://lucia-auth.com/sessions/basic-api/) with your chosen database.
2. Add [session cookies](https://lucia-auth.com/sessions/cookies/astro) using endpoints and middleware.
3. Implement [GitHub OAuth](https://lucia-auth.com/tutorials/github-oauth/astro) using the APIs you implemented.

### Examples

[Section titled Examples](https://docs.astro.build/en/guides/authentication/#examples)

- [GitHub OAuth example in Astro](https://github.com/lucia-auth/example-astro-github-oauth)
- [Google OAuth example in Astro](https://github.com/lucia-auth/example-astro-google-oauth)
- [Email and password example with 2FA in Astro](https://github.com/lucia-auth/example-astro-email-password-2fa)
- [Email and password example with 2FA and WebAuthn in Astro](https://github.com/lucia-auth/example-astro-email-password-webauthn)

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/authentication/#community-resources)

- [Using Microsoft Entra Id EasyAuth with Astro and Azure Static Web App](https://agramont.net/blog/entra-id-easyauth-with-astro/)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## TypeScript in Astro
[Skip to content](https://docs.astro.build/en/guides/typescript/#_top)

# TypeScript

Astro ships with built-in support for [TypeScript](https://www.typescriptlang.org/). You can import `.ts` and `.tsx` files in your Astro project, write TypeScript code directly inside your [Astro component](https://docs.astro.build/en/basics/astro-components/#the-component-script), and even use an [`astro.config.ts`](https://docs.astro.build/en/guides/configuring-astro/#the-astro-config-file) file for your Astro configuration if you like.

Using TypeScript, you can prevent errors at runtime by defining the shapes of objects and components in your code. For example, if you use TypeScript to [type your component’s props](https://docs.astro.build/en/guides/typescript/#component-props), you’ll get an error in your editor if you set a prop that your component doesn’t accept.

You don’t need to write TypeScript code in your Astro projects to benefit from it. Astro always treats your component code as TypeScript, and the [Astro VS Code Extension](https://docs.astro.build/en/editor-setup/) will infer as much as it can to provide autocompletion, hints, and errors in your editor.

The Astro dev server won’t perform any type checking, but you can use a [separate script](https://docs.astro.build/en/guides/typescript/#type-checking) to check for type errors from the command line.

## Setup

[Section titled Setup](https://docs.astro.build/en/guides/typescript/#setup)

Astro starter projects include a `tsconfig.json` file in your project. Even if you don’t write TypeScript code, this file is important so that tools like Astro and VS Code know how to understand your project. Some features (like npm package imports) aren’t fully supported in the editor without a `tsconfig.json` file. If you install Astro manually, be sure to create this file yourself.

### TSConfig templates

[Section titled TSConfig templates](https://docs.astro.build/en/guides/typescript/#tsconfig-templates)

Three extensible `tsconfig.json` templates are included in Astro: `base`, `strict`, and `strictest`. The `base` template enables support for modern JavaScript features and is also used as a basis for the other templates. We recommend using `strict` or `strictest` if you plan to write TypeScript in your project. You can view and compare the three template configurations at [astro/tsconfigs/](https://github.com/withastro/astro/blob/main/packages/astro/tsconfigs/).

To inherit from one of the templates, use [the `extends` setting](https://www.typescriptlang.org/tsconfig#extends):

```

{

  "extends": "astro/tsconfigs/base"

}
```

Additionally, we recommend setting `include` and `exclude` as follows to benefit from Astro types and avoid checking built files:

```

{

  "extends": "astro/tsconfigs/base",

  "include": [".astro/types.d.ts", "**/*"],

  "exclude": ["dist"]

}
```

You can create `src/env.d.ts` as a convention for adding custom types declarations, or to benefit from Astro types if you don’t have a `tsconfig.json`:

```

// Custom types declarations

declare var myString: string;

// Astro types, not necessary if you already have a `tsconfig.json`

/// <reference path="../.astro/types.d.ts" />
```

### TypeScript editor plugin

[Section titled TypeScript editor plugin](https://docs.astro.build/en/guides/typescript/#typescript-editor-plugin)

The [Astro TypeScript plugin](https://www.npmjs.com/package/@astrojs/ts-plugin) can be installed separately when you are not using the [official Astro VS Code extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This plugin is automatically installed and configured by the VS Code extension, and you do not need to install both.

This plugin runs only in the editor. When running `tsc` in the terminal, `.astro` files are ignored entirely. Instead, you can use [the `astro check` CLI command](https://docs.astro.build/en/reference/cli-reference/#astro-check) to check both `.astro` and `.ts` files.

This plugin also supports importing `.astro` files from `.ts` files (which can be useful for re-exporting).

- [npm](https://docs.astro.build/en/guides/typescript/#tab-panel-1828)
- [pnpm](https://docs.astro.build/en/guides/typescript/#tab-panel-1829)
- [Yarn](https://docs.astro.build/en/guides/typescript/#tab-panel-1830)

```

npm install @astrojs/ts-plugin
```

```

pnpm add @astrojs/ts-plugin
```

```

yarn add @astrojs/ts-plugin
```

Then, add the following to your `tsconfig.json`:

```

{

  "compilerOptions": {

    "plugins": [\
\
      {\
\
        "name": "@astrojs/ts-plugin"\
\
      },\
\
    ],

  }

}
```

To check that the plugin is working, create a `.ts` file and import an Astro component into it. You should have no warning messages from your editor.

### UI Frameworks

[Section titled UI Frameworks](https://docs.astro.build/en/guides/typescript/#ui-frameworks)

If your project uses a [UI framework](https://docs.astro.build/en/guides/framework-components/), additional settings depending on the framework might be needed. Please see your framework’s TypeScript documentation for more information. ( [Vue](https://vuejs.org/guide/typescript/overview.html#using-vue-with-typescript), [React](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup), [Preact](https://preactjs.com/guide/v10/typescript), [Solid](https://www.solidjs.com/guides/typescript))

## Type Imports

[Section titled Type Imports](https://docs.astro.build/en/guides/typescript/#type-imports)

Use explicit type imports and exports whenever possible.

```

import { SomeType } from "./script";

import type { SomeType } from "./script";
```

This way, you avoid edge cases where Astro’s bundler may try to incorrectly bundle your imported types as if they were JavaScript.

You can configure TypeScript to enforce type imports in your `tsconfig.json` file. Set [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax) to `true`. TypeScript will check your imports and tell you when `import type` should be used. This setting is enabled by default in all our presets.

```

{

  "compilerOptions": {

    "verbatimModuleSyntax": true

  }

}
```

## Import Aliases

[Section titled Import Aliases](https://docs.astro.build/en/guides/typescript/#import-aliases)

Astro supports [import aliases](https://docs.astro.build/en/guides/imports/#aliases) that you define in your `tsconfig.json` `paths` configuration. [Read our guide](https://docs.astro.build/en/guides/imports/#aliases) to learn more.

```

---

import HelloWorld from "@components/HelloWorld.astro";

import Layout from "@layouts/Layout.astro";

---
```

```

{

  "compilerOptions": {

    "baseUrl": ".",

    "paths": {

      "@components/*": ["src/components/*"],

      "@layouts/*": ["src/layouts/*"]

    }

  }

}
```

## Extending `window` and `globalThis`

[Section titled Extending window and globalThis](https://docs.astro.build/en/guides/typescript/#extending-window-and-globalthis)

You may want to add a property to the global object. You can do this by adding top-level declarations using the `declare` keyword to your `env.d.ts` file:

```

declare var myString: string;

declare function myFunction(): boolean;
```

This will provide typing to `globalThis.myString` and `globalThis.myFunction`, as well as `window.myString` and `window.myFunction`.

Note that `window` is only available in client-side code. `globalThis` is available both server-side and client-side, but its server-side value won’t be shared with the client.

If you only want to type a property on the `window` object, provide a `Window` interface instead:

```

interface Window {

  myFunction(): boolean;

}
```

## Component Props

[Section titled Component Props](https://docs.astro.build/en/guides/typescript/#component-props)

Astro supports typing your component props via TypeScript. To enable, add a TypeScript `Props` interface to your component frontmatter. An `export` statement may be used, but is not necessary. The [Astro VS Code Extension](https://docs.astro.build/en/editor-setup/) will automatically look for the `Props` interface and give you proper TS support when you use that component inside another template.

```

---

interface Props {

  name: string;

  greeting?: string;

}

const { greeting = "Hello", name } = Astro.props;

---

<h2>{greeting}, {name}!</h2>
```

### Common prop type patterns

[Section titled Common prop type patterns](https://docs.astro.build/en/guides/typescript/#common-prop-type-patterns)

- If your component takes no props or slotted content, you can use `type Props = Record<string, never>`.
- If your component must be passed children to its default slot, you can enforce this by using `type Props = { children: any; };`.

## Type Utilities

[Section titled Type Utilities](https://docs.astro.build/en/guides/typescript/#type-utilities)

**Added in:** `astro@1.6.0`

Astro comes with some built-in utility types for common prop type patterns. These are available under the `astro/types` entrypoint.

### Built-in HTML attributes

[Section titled Built-in HTML attributes](https://docs.astro.build/en/guides/typescript/#built-in-html-attributes)

Astro provides the `HTMLAttributes` type to check that your markup is using valid HTML attributes. You can use these types to help build component props.

For example, if you were building a `<Link>` component, you could do the following to mirror the default HTML attributes for `<a>` tags in your component’s prop types.

```

---

import type { HTMLAttributes } from "astro/types";

// use a `type`

type Props = HTMLAttributes<"a">;

// or extend with an `interface`

interface Props extends HTMLAttributes<"a"> {

  myProp?: boolean;

}

const { href, ...attrs } = Astro.props;

---

<a href={href} {...attrs}>

  <slot />

</a>
```

It is also possible to extend the default JSX definitions to add non-standard attributes by redeclaring the `astroHTML.JSX` namespace in a `.d.ts` file.

```

declare namespace astroHTML.JSX {

  interface HTMLAttributes {

    "data-count"?: number;

    "data-label"?: string;

  }

  // Add a CSS custom property to the style object

  interface CSSProperties {

    "--theme-color"?: "black" | "white";

  }

}
```

### `ComponentProps` type

[Section titled ComponentProps type](https://docs.astro.build/en/guides/typescript/#componentprops-type)

**Added in:** `astro@4.3.0`

This type export allows you to reference the `Props` accepted by another component, even if that component doesn’t export that `Props` type directly.

The following example shows using the `ComponentProps` utility from `astro/types` to reference a `<Button />` component’s `Props` types:

```

---

import type { ComponentProps } from "astro/types";

import Button from "./Button.astro";

type ButtonProps = ComponentProps<typeof Button>;

---
```

### Polymorphic type

[Section titled Polymorphic type](https://docs.astro.build/en/guides/typescript/#polymorphic-type)

**Added in:** `astro@2.5.0`

Astro includes a helper to make it easier to build components that can render as different HTML elements with full type safety. This is useful for components like `<Link>` that can render as either `<a>` or `<button>` depending on the props passed to it.

The example below implements a fully-typed, polymorphic component that can render as any HTML element. The [`HTMLTag`](https://docs.astro.build/en/guides/typescript/#built-in-html-attributes) type is used to ensure that the `as` prop is a valid HTML element.

```

---

import type { HTMLTag, Polymorphic } from "astro/types";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }>;

const { as: Tag, ...props } = Astro.props;

---

<Tag {...props} />
```

### Infer `getStaticPaths()` types

[Section titled Infer getStaticPaths() types](https://docs.astro.build/en/guides/typescript/#infer-getstaticpaths-types)

**Added in:** `astro@2.1.0`

Astro includes helpers for working with the types returned by your [`getStaticPaths()`](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths) function for dynamic routes.

You can get the type of [`Astro.params`](https://docs.astro.build/en/reference/api-reference/#params) with `InferGetStaticParamsType` and the type of [`Astro.props`](https://docs.astro.build/en/reference/api-reference/#props) with `InferGetStaticPropsType` or you can use `GetStaticPaths` to infer both at once:

```

---

import type {

  InferGetStaticParamsType,

  InferGetStaticPropsType,

  GetStaticPaths,

} from "astro";

export const getStaticPaths = (async () => {

  const posts = await getCollection("blog");

  return posts.map((post) => {

    return {

      params: { id: post.id },

      props: { draft: post.data.draft, title: post.data.title },

    };

  });

}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { id } = Astro.params as Params;

//                   ^? { id: string; }

const { title } = Astro.props;

//                      ^? { draft: boolean; title: string; }

---
```

## Type checking

[Section titled Type checking](https://docs.astro.build/en/guides/typescript/#type-checking)

To see type errors in your editor, please make sure that you have the [Astro VS Code extension](https://docs.astro.build/en/editor-setup/) installed. Please note that the `astro start` and `astro build` commands will transpile the code with esbuild, but will not run any type checking. To prevent your code from building if it contains TypeScript errors, change your “build” script in `package.json` to the following:

```

{

  "scripts": {

    "build": "astro build",

    "build": "astro check && astro build",

  },

}
```

Read more about [`.ts` file imports](https://docs.astro.build/en/guides/imports/#typescript) in Astro.

Read more about [TypeScript Configuration](https://www.typescriptlang.org/tsconfig/).

## Troubleshooting

[Section titled Troubleshooting](https://docs.astro.build/en/guides/typescript/#troubleshooting)

### Errors typing multiple JSX frameworks at the same time

[Section titled Errors typing multiple JSX frameworks at the same time](https://docs.astro.build/en/guides/typescript/#errors-typing-multiple-jsx-frameworks-at-the-same-time)

An issue may arise when using multiple JSX frameworks in the same project, as each framework requires different, sometimes conflicting, settings inside `tsconfig.json`.

**Solution**: Set the [`jsxImportSource` setting](https://www.typescriptlang.org/tsconfig#jsxImportSource) to `react` (default), `preact` or `solid-js` depending on your most-used framework. Then, use a [pragma comment](https://www.typescriptlang.org/docs/handbook/jsx.html#configuring-jsx) inside any conflicting file from a different framework.

For the default setting of `jsxImportSource: react`, you would use:

```

// For Preact

/** @jsxImportSource preact */

// For Solid

/** @jsxImportSource solid-js */
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Layouts Guide
[Skip to content](https://docs.astro.build/en/basics/layouts/#_top)

# Layouts

**Layouts** are [Astro components](https://docs.astro.build/en/basics/astro-components/) used to provide a reusable UI structure, such as a page template.

We conventionally use the term “layout” for Astro components that provide common UI elements shared across pages such as headers, navigation bars, and footers. A typical Astro layout component provides [Astro, Markdown or MDX pages](https://docs.astro.build/en/basics/astro-pages/) with:

- a **page shell** ( `<html>`, `<head>` and `<body>` tags)
- a [**`<slot />`**](https://docs.astro.build/en/basics/astro-components/#slots) to specify where individual page content should be injected.

But, there is nothing special about a layout component! They can [accept props](https://docs.astro.build/en/basics/astro-components/#component-props) and [import and use other components](https://docs.astro.build/en/basics/astro-components/#component-structure) like any other Astro component. They can include [UI frameworks components](https://docs.astro.build/en/guides/framework-components/) and [client-side scripts](https://docs.astro.build/en/guides/client-side-scripts/). They do not even have to provide a full page shell, and can instead be used as partial UI templates.

However, if a layout component does contain a page shell, its `<html>` element must be the parent of all other elements in the component.

Layout components are commonly placed in a `src/layouts` directory in your project for organization, but this is not a requirement; you can choose to place them anywhere in your project. You can even colocate layout components alongside your pages by [prefixing the layout names with `_`](https://docs.astro.build/en/guides/routing/#excluding-pages).

## Sample Layout

[Section titled Sample Layout](https://docs.astro.build/en/basics/layouts/#sample-layout)

```

---

import BaseHead from '../components/BaseHead.astro';

import Footer from '../components/Footer.astro';

const { title } = Astro.props;

---

<html lang="en">

  <head>

    <meta charset="utf-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <BaseHead title={title}/>

  </head>

  <body>

    <nav>

      <a href="#">Home</a>

      <a href="#">Posts</a>

      <a href="#">Contact</a>

    </nav>

    <h1>{title}</h1>

    <article>

      <slot /> <!-- your content is injected here -->

    </article>

    <Footer />

  </body>

  <style>

    h1 {

      font-size: 2rem;

    }

  </style>

</html>
```

```

---

import MySiteLayout from '../layouts/MySiteLayout.astro';

---

<MySiteLayout title="Home Page">

  <p>My page content, wrapped in a layout!</p>

</MySiteLayout>
```

Learn more about [slots](https://docs.astro.build/en/basics/astro-components/#slots).

## Using TypeScript with layouts

[Section titled Using TypeScript with layouts](https://docs.astro.build/en/basics/layouts/#using-typescript-with-layouts)

Any Astro layout can be modified to introduce type safety & autocompletion by providing the types for your props:

```

---

interface Props {

  title: string;

  description: string;

  publishDate: string;

  viewCount: number;

}

const { title, description, publishDate, viewCount } = Astro.props;

---

<html lang="en">

  <head>

    <meta charset="UTF-8">

    <meta name="description" content={description}>

    <title>{title}</title>

  </head>

  <body>

    <header>

      <p>Published on {publishDate}</p>

      <p>Viewed by {viewCount} folks</p>

    </header>

    <main>

      <slot />

    </main>

  </body>

</html>
```

## Markdown Layouts

[Section titled Markdown Layouts](https://docs.astro.build/en/basics/layouts/#markdown-layouts)

Page layouts are especially useful for individual Markdown pages which otherwise would not have any page formatting.

Astro provides a special `layout` frontmatter property intended for [individual `.md` files located within `src/pages/` using file-based routing](https://docs.astro.build/en/guides/markdown-content/#individual-markdown-pages) to specify which `.astro` component to use as the page layout. This component allows you to provide `<head>` content like meta tags (e.g. `<meta charset="utf-8">`) and styles for the Markdown page. By default, this specified component can automatically access data from the Markdown file.

This is not recognized as a special property when using [content collections](https://docs.astro.build/en/guides/content-collections/) to query and render your content.

```

---

layout: ../layouts/BlogPostLayout.astro

title: "Hello, World!"

author: "Matthew Phillips"

date: "09 Aug 2022"

---

All frontmatter properties are available as props to an Astro layout component.

The `layout` property is the only special one provided by Astro.

You can use it in Markdown files located within `src/pages/`.
```

A typical layout for a Markdown page includes:

1. The `frontmatter` prop to access the Markdown page’s frontmatter and other data.
2. A default [`<slot />`](https://docs.astro.build/en/basics/astro-components/#slots) to indicate where the page’s Markdown content should be rendered.

```

---

// 1. The frontmatter prop gives access to frontmatter and other data

const { frontmatter } = Astro.props;

---

<html>

  <head>

    <!-- Add other Head elements here, like styles and meta tags. -->

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta charset="utf-8">

    <title>{frontmatter.title}</title>

  </head>

  <body>

    <!-- Add other UI components here, like common headers and footers. -->

    <h1>{frontmatter.title} by {frontmatter.author}</h1>

    <!-- 2. Rendered HTML will be passed into the default slot. -->

    <slot />

    <p>Written on: {frontmatter.date}</p>

  </body>

</html>
```

You can set a layout’s [`Props` type](https://docs.astro.build/en/guides/typescript/#component-props) with the `MarkdownLayoutProps` helper:

```

---

import type { MarkdownLayoutProps } from 'astro';

type Props = MarkdownLayoutProps<{

  // Define frontmatter props here

  title: string;

  author: string;

  date: string;

}>;

// Now, `frontmatter`, `url`, and other Markdown layout properties

// are accessible with type safety

const { frontmatter, url } = Astro.props;

---

<html>

  <head>

    <meta charset="utf-8">

    <link rel="canonical" href={new URL(url, Astro.site).pathname}>

    <title>{frontmatter.title}</title>

  </head>

  <body>

    <h1>{frontmatter.title} by {frontmatter.author}</h1>

    <slot />

    <p>Written on: {frontmatter.date}</p>

  </body>

</html>
```

### Markdown Layout Props

[Section titled Markdown Layout Props](https://docs.astro.build/en/basics/layouts/#markdown-layout-props)

A Markdown layout will have access to the following information via `Astro.props`:

- **`file`** \- The absolute path of this file (e.g. `/home/user/projects/.../file.md`).
- **`url`** \- The URL of the page (e.g. `/en/guides/markdown-content`).
- **`frontmatter`** \- All frontmatter from the Markdown or MDX document.

  - **`frontmatter.file`** \- The same as the top-level `file` property.
  - **`frontmatter.url`** \- The same as the top-level `url` property.
- **`headings`** \- A list of headings ( `h1 -> h6`) in the Markdown or MDX document with associated metadata. This list follows the type: `{ depth: number; slug: string; text: string }[]`.
- **`rawContent()`** \- A function that returns the raw Markdown document as a string.
- **`compiledContent()`** \- An async function that returns the Markdown document compiled to an HTML string.

### Importing Layouts Manually (MDX)

[Section titled Importing Layouts Manually (MDX)](https://docs.astro.build/en/basics/layouts/#importing-layouts-manually-mdx)

You can also use the special Markdown layout property in the frontmatter of MDX files to pass `frontmatter` and `headings` props directly to a specified layout component in the same way.

To pass information to your MDX layout that does not (or cannot) exist in your frontmatter, you can instead import and use a `<Layout />` component. This works like any other Astro component, and will not receive any props automatically. Pass it any necessary props directly:

```

---

layout: ../../layouts/BaseLayout.astro

title: 'My first MDX post'

publishDate: '21 September 2022'

---

import BaseLayout from '../../layouts/BaseLayout.astro';

export function fancyJsHelper() {

  return "Try doing that with YAML!";

}

<BaseLayout title={frontmatter.title} fancyJsHelper={fancyJsHelper}>

  Welcome to my new Astro blog, using MDX!

</BaseLayout>
```

Then, your values are available to you through `Astro.props` in your layout, and your MDX content will be injected into the page where your `<slot />` component is written:

```

---

const { title, fancyJsHelper } = Astro.props;

---

<html>

  <head>

    <!-- -->

    <meta charset="utf-8">

  </head>

  <body>

    <!-- -->

    <h1>{title}</h1>

    <slot /> <!-- your content is injected here -->

    <p>{fancyJsHelper()}</p>

    <!-- -->

  </body>

</html>
```

When using any layout (either through the frontmatter `layout` property or by importing a layout), you must include the `<meta charset="utf-8">` tag in your layout as Astro will no longer add it automatically to your MDX page.

Learn more about Astro’s Markdown and MDX support in our [Markdown guide](https://docs.astro.build/en/guides/markdown-content/).

## Nesting Layouts

[Section titled Nesting Layouts](https://docs.astro.build/en/basics/layouts/#nesting-layouts)

Layout components do not need to contain an entire page worth of HTML. You can break your layouts into smaller components, and combine layout components to create even more flexible, page templates. This pattern is useful when you want to share some code across multiple layouts.

For example, a `BlogPostLayout.astro` layout component could style a post’s title, date and author. Then, a site-wide `BaseLayout.astro` could handle the rest of your page template, like navigation, footers, SEO meta tags, global styles, and fonts. You can also pass props received from your post to another layout, just like any other nested component.

```

---

import BaseLayout from './BaseLayout.astro';

const { frontmatter } = Astro.props;

---

<BaseLayout url={frontmatter.url}>

  <h1>{frontmatter.title}</h1>

  <h2>Post author: {frontmatter.author}</h2>

  <slot />

</BaseLayout>
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment with SST
[Skip to content](https://docs.astro.build/en/guides/deploy/sst/#_top)

# Deploy your Astro Site to AWS with SST

You can deploy an Astro site to AWS using [SST](https://sst.dev/), an open-source framework for deploying modern full-stack applications with SSG and SSR support.

You can also use any additional SST components like cron jobs, Buckets, Queues, etc while maintaining type-safety.

## Quickstart

[Section titled Quickstart](https://docs.astro.build/en/guides/deploy/sst/#quickstart)

1. Create an astro project.

2. Run `npx sst@latest init`.

3. It should detect that you are using Astro and ask you to confirm.

4. Once you’re ready for deployment you can run `npx sst deploy --stage production`.


You can also read [the full Astro on AWS with SST tutorial](https://sst.dev/docs/start/aws/astro) that will guide you through the steps.

### SST components

[Section titled SST components](https://docs.astro.build/en/guides/deploy/sst/#sst-components)

To use any [additional SST components](https://sst.dev/docs/), add them to `sst.config.ts`.

```

const bucket = new sst.aws.Bucket("MyBucket", {

  access: "public",

});

new sst.aws.Astro("MyWeb", {

  link: [bucket],

});
```

And then access them in your `.astro` file.

```

---

import { Resource } from "sst"

console.log(Resource.MyBucket.name)

---
```

Consult the [SST docs on linking resources](https://sst.dev/docs/linking) to learn more.

If you have any questions, you can [ask in the SST Discord](https://discord.gg/sst).

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fsst%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=14975966)

## Cloudinary Integration Guide
[Skip to content](https://docs.astro.build/en/guides/media/cloudinary/#_top)

# Cloudinary & Astro

[Cloudinary](https://cloudinary.com/) is an image and video platform and headless Digital Asset Manager (DAM) that lets you host assets and deliver them from their content delivery network (CDN).

When delivering from Cloudinary, you additionally get access to their Transformation API, giving you the ability to edit your assets with tools like background removal, dynamic cropping and resizing, and generative AI.

## Using Cloudinary in Astro

[Section titled Using Cloudinary in Astro](https://docs.astro.build/en/guides/media/cloudinary/#using-cloudinary-in-astro)

Cloudinary supports a wide variety of SDKs that can be used depending on your Astro environment.

The [Cloudinary Astro SDK](https://astro.cloudinary.dev/) provides native Astro components, including image, video, and upload components, as well as a content loader that can be used with Astro content collections.

Alternatively, both the Cloudinary [Node.js SDK](https://cloudinary.com/documentation/node_integration) and [JavaScript SDK](https://cloudinary.com/documentation/javascript_integration) can be used to generate URLs for your images. The Node.js SDK can additionally make requests to the Cloudinary API including uploading assets, requesting resources, and running content analysis.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/media/cloudinary/#prerequisites)

- An existing Astro project
- A Cloudinary account

## Installing Astro Cloudinary

[Section titled Installing Astro Cloudinary](https://docs.astro.build/en/guides/media/cloudinary/#installing-astro-cloudinary)

Install the Cloudinary Astro SDK by running the appropriate command for your package manager:

- [npm](https://docs.astro.build/en/guides/media/cloudinary/#tab-panel-3320)
- [pnpm](https://docs.astro.build/en/guides/media/cloudinary/#tab-panel-3321)
- [Yarn](https://docs.astro.build/en/guides/media/cloudinary/#tab-panel-3322)

```

npm install astro-cloudinary
```

```

pnpm add astro-cloudinary
```

```

yarn add astro-cloudinary
```

## Configuring your account

[Section titled Configuring your account](https://docs.astro.build/en/guides/media/cloudinary/#configuring-your-account)

Create a new `.env` file in the root of your project and add your Cloudinary credentials:

```

PUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"

// Only needed if using CldUploadWidget or cldAssetsLoader

PUBLIC_CLOUDINARY_API_KEY="<Your API Key>"

CLOUDINARY_API_SECRET="<Your API Secret>"
```

## Using Cloudinary images

[Section titled Using Cloudinary images](https://docs.astro.build/en/guides/media/cloudinary/#using-cloudinary-images)

Add images in `.astro` components by passing image data (e.g. `src`, `width`, `alt`) to the `<CldImage>` component. This will automatically optimize your image and give you access to the Transformations API.

```

---

import { CldImage } from 'astro-cloudinary';

---

<CldImage

  src="<Public ID>"

  width="<Width>"

  height="<Height>"

  alt="<Description>"

/>
```

See [Cloudinary’s `<CldImage>` documentation](https://astro.cloudinary.dev/cldimage/basic-usage) for more information.

## Using Cloudinary videos

[Section titled Using Cloudinary videos](https://docs.astro.build/en/guides/media/cloudinary/#using-cloudinary-videos)

To add video to your `.astro` components, add the `<CldVideoPlayer>` and pass the appropriate properties. This component will automatically optimize and embed your video using the [Cloudinary Video Player](https://cloudinary.com/documentation/cloudinary_video_player).

```

---

import { CldVideoPlayer } from 'astro-cloudinary';

---

<CldVideoPlayer

  src="<Public ID>"

  width="<Width>"

  height="<Height>"

/>
```

See [Cloudinary’s `<CldVideoPlayer>` documentation](https://astro.cloudinary.dev/cldvideoplayer/basic-usage) for more information.

## Enabling Cloudinary uploads

[Section titled Enabling Cloudinary uploads](https://docs.astro.build/en/guides/media/cloudinary/#enabling-cloudinary-uploads)

To enable file uploading in your website or app’s UI, add the `<CldUploadWidget>` which will embed the [Cloudinary Upload Widget](https://cloudinary.com/documentation/upload_widget).

The following example creates a widget to allow unsigned uploads by passing an unsigned [Upload Preset](https://cloudinary.com/documentation/upload_presets):

```

---

import { CldUploadWidget } from 'astro-cloudinary';

---

<CldUploadWidget uploadPreset="<Upload Preset>">

  <button>Upload</button>

</CldUploadWidget>
```

For signed uploads, you can find [a guide and example](https://astro.cloudinary.dev/clduploadwidget/signed-uploads) on the Astro Cloudinary docs.

See [Cloudinary’s `<CldUploadWidget>` documentation](https://astro.cloudinary.dev/clduploadwidget/basic-usage) for more information.

## Cloudinary content loader

[Section titled Cloudinary content loader](https://docs.astro.build/en/guides/media/cloudinary/#cloudinary-content-loader)

The Cloudinary Astro SDK provides the `cldAssetsLoader` content loader to load Cloudinary assets for content collections.

To load a collection of images or videos, set `loader: cldAssetsLoader ({})` with a `folder`, if required:

```

import { defineCollection } from 'astro:content';

import { cldAssetsLoader } from 'astro-cloudinary/loaders';

export const collections = {

  assets: defineCollection({

    loader: cldAssetsLoader({

      folder: '<Folder>' // Optional, without loads root directory

    })

  }),

}
```

You can then use the [`getCollection()` or `getEntry()` query functions](https://docs.astro.build/en/guides/content-collections/#querying-collections) to select one or many images or videos from your collection.

See [Cloudinary’s `cldAssetsLoader` documentation](https://astro.cloudinary.dev/cldassetsloader/basic-usage) for more information.

## Generating Cloudinary image URLs

[Section titled Generating Cloudinary image URLs](https://docs.astro.build/en/guides/media/cloudinary/#generating-cloudinary-image-urls)

The Astro Cloudinary SDK provides a `getCldOgImageUrl()` helper for generating and using URLs for your images. Use this when you need a URL instead of a component to display your image.

One common use for a URL is for an Open Graph image in `<meta>` tags for social media cards. This helper, like the components, provides you access to Cloudinary transformations to create dynamic, unique social cards for any of your pages.

The following example shows the necessary `<meta>` tags for a social media card, using `getCldOgImageUrl()` to generate an Open Graph image:

```

---

import { getCldOgImageUrl } from 'astro-cloudinary/helpers';

const ogImageUrl = getCldOgImageUrl({ src: '<Public ID>' });

---

<meta property="og:image" content={ogImageUrl} />

<meta property="og:image:secure_url" content={ogImageUrl} />

<meta property="og:image:width" content="1200" />

<meta property="og:image:height" content="630" />

<meta property="twitter:title" content="<Twitter Title>" />

<meta property="twitter:card" content="summary_large_image" />

<meta property="twitter:image" content={ogImageUrl} />
```

Find [Cloudinary Social Media Card templates](https://astro.cloudinary.dev/templates/social-media-cards) on the Cloudinary docs.

See [Cloudinary’s `getCldOgImageUrl()` documentation](https://astro.cloudinary.dev/getcldogimageurl/basic-usage) for more information.

## Using Cloudinary in Node.js

[Section titled Using Cloudinary in Node.js](https://docs.astro.build/en/guides/media/cloudinary/#using-cloudinary-in-nodejs)

For more complex asset management, uploading, or analysis, you can use the Cloudinary Node.js SDK when working in an Astro Node.js environment.

Install the Cloudinary Node.js SDK by running the appropriate command for your package manager:

- [npm](https://docs.astro.build/en/guides/media/cloudinary/#tab-panel-3323)
- [pnpm](https://docs.astro.build/en/guides/media/cloudinary/#tab-panel-3324)
- [Yarn](https://docs.astro.build/en/guides/media/cloudinary/#tab-panel-3325)

```

npm install cloudinary
```

```

pnpm add cloudinary
```

```

yarn add cloudinary
```

Add the following environment variables in your `.env` file:

```

PUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"

PUBLIC_CLOUDINARY_API_KEY="<Your API Key>"

CLOUDINARY_API_SECRET="<Your API Secret>"
```

Configure your account with a new Cloudinary instance by adding the following code between the fences of your Astro component:

```

---

import { v2 as cloudinary } from "cloudinary";

cloudinary.config({

  cloud_name: import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME,

  api_key: import.meta.env.PUBLIC_CLOUDINARY_API_KEY,

  api_secret: import.meta.env.CLOUDINARY_API_SECRET,

});

---
```

This will give you access to all of the Cloudinary APIs to allow you to interact with your images, videos, and other supported files.

```

await cloudinary.uploader.upload('./path/to/file');
```

Learn how to [upload files using the Cloudinary Node.js SDK with Astro Forms](https://www.youtube.com/watch?v=DQUYMyT2MTM).

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/media/cloudinary/#official-resources)

- [Cloudinary Astro SDK](https://astro.cloudinary.dev/)
- [Cloudinary Node.js SDK](https://cloudinary.com/documentation/node_integration)
- [Using Cloudinary with Astro (YouTube)](https://www.youtube.com/playlist?list=PL8dVGjLA2oMqnpf2tShn1exf5GkSWuu5-)
- [Code Examples Using Cloudinary Astro SDK (GitHub)](https://github.com/cloudinary-community/cloudinary-examples/tree/main/examples/astro-cloudinary)

## More DAM guides

- ![](https://docs.astro.build/logos/cloudinary.svg)



### [Cloudinary](https://docs.astro.build/en/guides/media/cloudinary/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Hygraph CMS Integration
[Skip to content](https://docs.astro.build/en/guides/cms/hygraph/#_top)

# Hygraph & Astro

[Hygraph](https://hygraph.com/) is a federated content management platform. It exposes a GraphQL endpoint for fetching content.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/hygraph/#integrating-with-astro)

In this section, you’ll create a [Hygraph](https://hygraph.com/) GraphQL endpoint to fetch with Astro.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/hygraph/#prerequisites)

To get started, you will need to have the following:

1. **A Hygraph account and project**. If you don’t have an account, you can [sign up for free](https://app.hygraph.com/signup) and create a new project.

2. **Hygraph access permissions** \- In `Project Settings > API Access`, configure Public Content API permissions to allow read requests without authentication. If you haven’t set any permissions, you can click **Yes, initialize defaults** to add the required permissions to use the “High Performance Content API”.


### Setting up the endpoint

[Section titled Setting up the endpoint](https://docs.astro.build/en/guides/cms/hygraph/#setting-up-the-endpoint)

To add your Hygraph endpoint to Astro, create a `.env` file in the root of your project with the following variable:

```

HYGRAPH_ENDPOINT=YOUR_HIGH_PERFORMANCE_API
```

Now, you should be able to use this environment variable in your project.

If you would like to have IntelliSense for your environment variables, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:

```

interface ImportMetaEnv {

  readonly HYGRAPH_ENDPOINT: string;

}
```

Your root directory should now include these new files:

- Directorysrc/


- **env.d.ts**

- **.env**
- astro.config.mjs
- package.json

### Fetching data

[Section titled Fetching data](https://docs.astro.build/en/guides/cms/hygraph/#fetching-data)

Fetch data from your Hygraph project by using the `HYGRAPH_ENDPOINT`.

For example, to fetch entries of a `blogPosts` content type that has a string field `title`, create a GraphQL query to fetch that content. Then, define the type of the content, and set it as the type of the response.

```

---

interface Post {

  title: string;

}

const query = {

  method: "POST",

  headers: { "Content-Type": "application/json" },

  body: JSON.stringify({

    query: `

      {

        blogPosts {

          title

        }

      }`,

  }),

};

const response = await fetch(import.meta.env.HYGRAPH_ENDPOINT, query);

const json = await response.json();

const posts: Post[] = json.data.blogPosts;

---

<html lang="en">

  <head>

    <meta charset="utf-8" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta name="viewport" content="width=device-width" />

    <meta name="generator" content={Astro.generator} />

    <title>Astro</title>

  </head>

  <body>

    <h1>Astro</h1>

    {

      posts.map((post) => (

        <div>

          <h2>{post.title}</h2>

        </div>

      ))

    }

  </body>

</html>
```

## Deploy

[Section titled Deploy](https://docs.astro.build/en/guides/cms/hygraph/#deploy)

### Configuring Netlify Webhook

[Section titled Configuring Netlify Webhook](https://docs.astro.build/en/guides/cms/hygraph/#configuring-netlify-webhook)

To set up a webhook in Netlify:

1. Deploy your site to Netlify with [this guide](https://docs.astro.build/en/guides/deploy/netlify/). Remember to add your `HYGRAPH_ENDPOINT` to the environment variables.

2. Then Go to your Hygraph project dashboard and click on **Apps**.

3. Go to the marketplace and search for Netlify and follow the instructions provided.

4. If all went good, now you can deploy your website with a click in the Hygraph interface.


## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/hygraph/#community-resources)

- [Hygraph + Astro example with `marked` for markdown parsing](https://github.com/camunoz2/example-astrowithhygraph)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Integrations Guide
[Skip to content](https://docs.astro.build/en/guides/integrations-guide/#_top)

# Add Integrations

**Astro integrations** add new functionality and behaviors for your project with only a few lines of code. You can use an official integration, [integrations built by the community](https://docs.astro.build/en/guides/integrations-guide/#finding-more-integrations) or even [build a custom integration yourself](https://docs.astro.build/en/guides/integrations-guide/#building-your-own-integration).

Integrations can…

- Unlock React, Vue, Svelte, Solid, and other popular UI frameworks with a [renderer](https://docs.astro.build/en/guides/framework-components/).
- Enable on-demand rendering with an [SSR adapter](https://docs.astro.build/en/guides/on-demand-rendering/).
- Integrate tools like MDX, and Partytown with a few lines of code.
- Add new features to your project, like automatic sitemap generation.
- Write custom code that hooks into the build process, dev server, and more.

## Official Integrations

[Section titled Official Integrations](https://docs.astro.build/en/guides/integrations-guide/#official-integrations)

The following integrations are maintained by Astro.

### Front-end frameworks

- ![](https://docs.astro.build/logos/alpine-js.svg)



### [@astrojs/alpinejs](https://docs.astro.build/en/guides/integrations-guide/alpinejs/)

- ![](https://docs.astro.build/logos/preact.svg)



### [@astrojs/preact](https://docs.astro.build/en/guides/integrations-guide/preact/)

- ![](https://docs.astro.build/logos/react.svg)



### [@astrojs/react](https://docs.astro.build/en/guides/integrations-guide/react/)

- ![](https://docs.astro.build/logos/solid.svg)



### [@astrojs/solid⁠-⁠js](https://docs.astro.build/en/guides/integrations-guide/solid-js/)

- ![](https://docs.astro.build/logos/svelte.svg)



### [@astrojs/svelte](https://docs.astro.build/en/guides/integrations-guide/svelte/)

- ![](https://docs.astro.build/logos/vue.svg)



### [@astrojs/vue](https://docs.astro.build/en/guides/integrations-guide/vue/)


### Adapters

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [@astrojs/cloudflare](https://docs.astro.build/en/guides/integrations-guide/cloudflare/)

- ![](https://docs.astro.build/logos/netlify.svg)



### [@astrojs/netlify](https://docs.astro.build/en/guides/integrations-guide/netlify/)

- ![](https://docs.astro.build/logos/node.svg)



### [@astrojs/node](https://docs.astro.build/en/guides/integrations-guide/node/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [@astrojs/vercel](https://docs.astro.build/en/guides/integrations-guide/vercel/)


### Other integrations

- ![](https://docs.astro.build/logos/db.svg)



### [@astrojs/db](https://docs.astro.build/en/guides/integrations-guide/db/)

- ![](https://docs.astro.build/logos/markdoc.svg)



### [@astrojs/markdoc](https://docs.astro.build/en/guides/integrations-guide/markdoc/)

- ![](https://docs.astro.build/logos/mdx.svg)



### [@astrojs/mdx](https://docs.astro.build/en/guides/integrations-guide/mdx/)

- ![](https://docs.astro.build/logos/partytown.svg)



### [@astrojs/partytown](https://docs.astro.build/en/guides/integrations-guide/partytown/)

- ![](https://docs.astro.build/logos/sitemap.svg)



### [@astrojs/sitemap](https://docs.astro.build/en/guides/integrations-guide/sitemap/)


## Automatic Integration Setup

[Section titled Automatic Integration Setup](https://docs.astro.build/en/guides/integrations-guide/#automatic-integration-setup)

Astro includes an `astro add` command to automate the setup of official integrations. Several community plugins can also be added using this command. Please check each integration’s own documentation to see whether `astro add` is supported, or whether you must [install manually](https://docs.astro.build/en/guides/integrations-guide/#manual-installation).

Run the `astro add` command using the package manager of your choice and our automatic integration wizard will update your configuration file and install any necessary dependencies.

- [npm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3192)
- [pnpm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3193)
- [Yarn](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3194)

```

npx astro add react
```

```

pnpm astro add react
```

```

yarn astro add react
```

It’s even possible to add multiple integrations at the same time!

- [npm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3195)
- [pnpm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3196)
- [Yarn](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3197)

```

npx astro add react sitemap partytown
```

```

pnpm astro add react sitemap partytown
```

```

yarn astro add react sitemap partytown
```

### Manual Installation

[Section titled Manual Installation](https://docs.astro.build/en/guides/integrations-guide/#manual-installation)

Astro integrations are always added through the `integrations` property in your `astro.config.mjs` file.

There are three common ways to import an integration into your Astro project:

1. [Install an npm package integration](https://docs.astro.build/en/guides/integrations-guide/#installing-an-npm-package).

2. Import your own integration from a local file inside your project.

3. Write your integration inline, directly in your config file.



```


import { defineConfig } from 'astro/config';

import installedIntegration from '@astrojs/vue';

import localIntegration from './my-integration.js';




export default defineConfig({

     integrations: [\
\
       // 1. Imported from an installed npm package\
\
       installedIntegration(),\
\
       // 2. Imported from a local JS file\
\
       localIntegration(),\
\
       // 3. An inline object\
\
       {name: 'namespace:id', hooks: { /* ... */ }},\
\
     ]

});
```


Check out the [Integration API](https://docs.astro.build/en/reference/integrations-reference/) reference to learn all of the different ways that you can write an integration.

#### Installing an NPM package

[Section titled Installing an NPM package](https://docs.astro.build/en/guides/integrations-guide/#installing-an-npm-package)

Install an NPM package integration using a package manager, and then update `astro.config.mjs` manually.

For example, to install the `@astrojs/sitemap` integration:

1. Install the integration to your project dependencies using your preferred package manager:




- [npm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3201)
- [pnpm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3202)
- [Yarn](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3203)

```

npm install @astrojs/sitemap
```

```

pnpm add @astrojs/sitemap
```

```

yarn add @astrojs/sitemap
```

2. Import the integration to your `astro.config.mjs` file, and add it to your `integrations[]` array, along with any configuration options:



```


import { defineConfig } from 'astro/config';

import sitemap from '@astrojs/sitemap';




export default defineConfig({

     // ...

     integrations: [sitemap()],

     // ...

});
```









Note that different integrations may have different configuration settings. Read each integration’s documentation, and apply any necessary config options to your chosen integration in `astro.config.mjs`.


### Custom Options

[Section titled Custom Options](https://docs.astro.build/en/guides/integrations-guide/#custom-options)

Integrations are almost always authored as factory functions that return the actual integration object. This lets you pass arguments and options to the factory function that customize the integration for your project.

```

integrations: [\
\
  // Example: Customize your integration with function arguments\
\
  sitemap({filter: true})\
\
]
```

### Toggle an Integration

[Section titled Toggle an Integration](https://docs.astro.build/en/guides/integrations-guide/#toggle-an-integration)

Falsy integrations are ignored, so you can toggle integrations on & off without worrying about left-behind `undefined` and boolean values.

```

integrations: [\
\
  // Example: Skip building a sitemap on Windows\
\
  process.platform !== 'win32' && sitemap()\
\
]
```

## Upgrading Integrations

[Section titled Upgrading Integrations](https://docs.astro.build/en/guides/integrations-guide/#upgrading-integrations)

To upgrade all official integrations at once, run the `@astrojs/upgrade` command. This will upgrade both Astro and all official integrations to their latest versions.

### Automatic Upgrading

[Section titled Automatic Upgrading](https://docs.astro.build/en/guides/integrations-guide/#automatic-upgrading)

- [npm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3204)
- [pnpm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3205)
- [Yarn](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3206)

```

# Upgrade Astro and official integrations together to latest

npx @astrojs/upgrade
```

```

# Upgrade Astro and official integrations together to latest

pnpm dlx @astrojs/upgrade
```

```

# Upgrade Astro and official integrations together to latest

yarn dlx @astrojs/upgrade
```

### Manual Upgrading

[Section titled Manual Upgrading](https://docs.astro.build/en/guides/integrations-guide/#manual-upgrading)

To upgrade one or more integrations manually, use the appropriate command for your package manager.

- [npm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3207)
- [pnpm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3208)
- [Yarn](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3209)

```

# Example: upgrade React and Partytown integrations

npm install @astrojs/react@latest @astrojs/partytown@latest
```

```

# Example: upgrade React and Partytown integrations

pnpm add @astrojs/react@latest @astrojs/partytown@latest
```

```

# Example: upgrade React and Partytown integrations

yarn add @astrojs/react@latest @astrojs/partytown@latest
```

## Removing an Integration

[Section titled Removing an Integration](https://docs.astro.build/en/guides/integrations-guide/#removing-an-integration)

1. To remove an integration, first uninstall the integration from your project.




- [npm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3210)
- [pnpm](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3211)
- [Yarn](https://docs.astro.build/en/guides/integrations-guide/#tab-panel-3212)

```

npm uninstall @astrojs/react
```

```

pnpm remove @astrojs/react
```

```

yarn remove @astrojs/react
```

2. Next, remove the integration from your `astro.config.*` file:



```


import { defineConfig } from 'astro/config';




import react from '@astrojs/react';




export default defineConfig({

     integrations: [\
\
       react()\
\
     ]

});
```


## Finding More Integrations

[Section titled Finding More Integrations](https://docs.astro.build/en/guides/integrations-guide/#finding-more-integrations)

You can find many integrations developed by the community in the [Astro Integrations Directory](https://astro.build/integrations/). Follow links there for detailed usage and configuration instructions.

## Building Your Own Integration

[Section titled Building Your Own Integration](https://docs.astro.build/en/guides/integrations-guide/#building-your-own-integration)

Astro’s Integration API is inspired by Rollup and Vite, and designed to feel familiar to anyone who has ever written a Rollup or Vite plugin before.

Check out the [Integration API](https://docs.astro.build/en/reference/integrations-reference/) reference to learn what integrations can do and how to write one yourself.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## ButterCMS Integration Guide
[Skip to content](https://docs.astro.build/en/guides/cms/buttercms/#_top)

# ButterCMS & Astro

[ButterCMS](https://buttercms.com/) is a headless CMS and blog engine that allows you to publish structured content to use in your project.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/buttercms/#integrating-with-astro)

In this section, we’ll use the [ButterCMS SDK](https://www.npmjs.com/package/buttercms) to bring your data into your Astro project.
To get started, you will need to have the following:

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/buttercms/#prerequisites)

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **A ButterCMS account**. If you don’t have an account, you can [sign up](https://buttercms.com/join/) for a free trial.

3. **Your ButterCMS API Token** \- You can find your API Token on the [Settings](https://buttercms.com/settings/) page.


### Setup

[Section titled Setup](https://docs.astro.build/en/guides/cms/buttercms/#setup)

1. Create a `.env` file in the root of your project and add your API token as an environment variable:



```


BUTTER_TOKEN=YOUR_API_TOKEN_HERE
```

2. Install the ButterCMS SDK as a dependency:




- [npm](https://docs.astro.build/en/guides/cms/buttercms/#tab-panel-3060)
- [pnpm](https://docs.astro.build/en/guides/cms/buttercms/#tab-panel-3061)
- [Yarn](https://docs.astro.build/en/guides/cms/buttercms/#tab-panel-3062)

```

npm install buttercms
```

```

pnpm add buttercms
```

```

yarn add buttercms
```

3. Create a `buttercms.js` file in a new `src/lib/` directory in your project:



```


import Butter from "buttercms";




export const butterClient = Butter(import.meta.env.BUTTER_TOKEN);
```


**This authenticates the SDK using your API Token and exports it to be used across your project.**

### Fetching Data

[Section titled Fetching Data](https://docs.astro.build/en/guides/cms/buttercms/#fetching-data)

To fetch content, import this client and use one of its `retrieve` functions.

In this example, we [retrieve a collection](https://buttercms.com/docs/api/#retrieve-a-collection) that has three fields: a short text `name`, a number `price`, and a WYSIWYG `description`.

```

---

import { butterClient } from "../lib/buttercms";

const response = await butterClient.content.retrieve(["shopitem"]);

interface ShopItem {

  name: string,

  price: number,

  description: string,

}

const items = response.data.data.shopitem as ShopItem[];

---

<body>

  {items.map(item => <div>

    <h2>{item.name} - ${item.price}</h2>

    <p set:html={item.description}></p>

  </div>)}

</body>
```

The interface mirrors the field types. The WYSIWYG `description` field loads as a string of HTML, and [`set:html`](https://docs.astro.build/en/reference/directives-reference/#sethtml) lets you render it.

Similarly, you can [retrieve a page](https://buttercms.com/docs/api/#get-a-single-page) and display its fields:

```

---

import { butterClient } from "../lib/buttercms";

const response = await butterClient.page.retrieve("*", "simple-page");

const pageData = response.data.data;

interface Fields {

  seo_title: string,

  headline: string,

  hero_image: string,

}

const fields = pageData.fields as Fields;

---

<html>

  <title>{fields.seo_title}</title>

  <body>

    <h1>{fields.headline}</h1>

    <img src={fields.hero_image} />

  </body>

</html>
```

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/buttercms/#official-resources)

- [Astro + ButterCMS Starter Project](https://buttercms.com/starters/astro-starter-project/)
- The [full ButterCMS API documentation](https://buttercms.com/docs/api/)
- ButterCMS’s [JavaScript Guide](https://buttercms.com/docs/api-client/javascript/)

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/buttercms/#community-resources)

- Add yours!

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Umbraco and Astro Integration
[Skip to content](https://docs.astro.build/en/guides/cms/umbraco/#_top)

# Umbraco & Astro

[Umbraco CMS](https://umbraco.com/) is an open-source ASP.NET Core CMS. By default, Umbraco uses Razor pages for its front-end, but can be used as a headless CMS.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/umbraco/#integrating-with-astro)

In this section you will use Umbraco’s native [Content Delivery API](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api) to provide content to your Astro project.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/umbraco/#prerequisites)

To get started, you will need to have the following:

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.
2. **An Umbraco (v12+) project** \- If you don’t have an Umbraco project yet, please see this [Installation guide](https://docs.umbraco.com/umbraco-cms/fundamentals/setup/install/).

### Setting up the Content Delivery API

[Section titled Setting up the Content Delivery API](https://docs.astro.build/en/guides/cms/umbraco/#setting-up-the-content-delivery-api)

To enable the Content Delivery API, update your Umbraco project’s `appsettings.json` file:

```

{

  "Umbraco": {

    "CMS": {

      "DeliveryApi": {

        "Enabled": true,

        "PublicAccess": true

      }

    }

  }

}
```

You can configure additional options as needed such as public access, API keys, allowed content types, membership authorisation, and more. See the [Umbraco Content Delivery API documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api) for more information.

### Fetching Data

[Section titled Fetching Data](https://docs.astro.build/en/guides/cms/umbraco/#fetching-data)

Use a `fetch()` call to the Content Delivery API to access your content and make it available to your Astro components.

The following example displays a list of fetched articles, including properties such as the article date and content.

```

---

const res = await fetch('http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article');

const articles = await res.json();

---

<h1>Astro + Umbraco 🚀</h1>

{

  articles.items.map((article) => (

      <h1>{article.name}</h1>

      <p>{article.properties.articleDate}</p>

      <div set:html={article.properties.content?.markup}></div>

  ))

}
```

Read more about [data fetching in Astro](https://docs.astro.build/en/guides/data-fetching/).

## Building a blog with Umbraco and Astro

[Section titled Building a blog with Umbraco and Astro](https://docs.astro.build/en/guides/cms/umbraco/#building-a-blog-with-umbraco-and-astro)

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/umbraco/#prerequisites-1)

- **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

- **An Umbraco project (v12+)** with the Content Delivery API enabled - Follow this [Installation guide](https://docs.umbraco.com/umbraco-cms/fundamentals/setup/install/) to create a new project.


### Creating blog posts in Umbraco

[Section titled Creating blog posts in Umbraco](https://docs.astro.build/en/guides/cms/umbraco/#creating-blog-posts-in-umbraco)

From the [Umbraco backoffice](https://docs.umbraco.com/umbraco-cms/fundamentals/backoffice), create a Document Type for a simple blog article called ‘Article’.

1. Configure your ‘Article’ Document Type with the following properties:
   - Title (DataType: Textstring)
   - Article Date (DataType: Date Picker)
   - Content (DataType: Richtext Editor)
2. Toggle “Allow as root” to `true` on the ‘Article’ document type.

3. From the “Content” section in the Umbraco backoffice, [create and publish your first blog post](https://docs.umbraco.com/umbraco-cms/fundamentals/data/defining-content). Repeat the process as many times as you like.


For more information, watch a [video guide on creating Document Types](https://www.youtube.com/watch?v=otRuIkN80qM).

### Displaying a list of blog posts in Astro

[Section titled Displaying a list of blog posts in Astro](https://docs.astro.build/en/guides/cms/umbraco/#displaying-a-list-of-blog-posts-in-astro)

Create a `src/layouts/` folder, then add a new file `Layout.astro` with the following code:

```

---

---

<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="utf-8">

    <title>My Blog with Astro and Umbraco</title>

</head>

<body>

    <main>

        <slot />

    </main>

</body>

</html>
```

Your project should now contain the following files:

- Directorysrc/


- Directory **layouts/**

- **Layout.astro**

- Directorypages/


- index.astro

To create a list of blog posts, first `fetch` to call the Content Delivery API `content` endpoint and filter by contentType of ‘article’. The article objects will include the properties and content set in the CMS. You can then loop through the articles and display a each title with a link to its article.

Replace the default contents of `index.astro` with the following code:

```

---

import Layout from '../layouts/Layout.astro';

const res = await fetch('http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article');

const articles = await res.json();

---

<Layout>

  <h2>Blog Articles</h2>

  {

        articles.items.map((article: any) => (

            <div>

                <h3>{article.properties.title}</h3>

                <p>{article.properties.articleDate}</p>

                <a href={article.route.path}>Read more</a>

            </div>

        ))

    }

</Layout>
```

### Generating individual blog posts

[Section titled Generating individual blog posts](https://docs.astro.build/en/guides/cms/umbraco/#generating-individual-blog-posts)

Create the file `[...slug].astro` at the root of the `/pages/` directory. This file will be used to [generate the individual blog pages dynamically](https://docs.astro.build/en/guides/routing/#dynamic-routes).

Note that the `params` property, which generates the URL path of the page, contains `article.route.path` from the API fetch. Similarly, the `props` property must include the entire `article` itself so that you can access all the information in your CMS entry.

Add the following code to `[...slug].astro` which will create your individual blog post pages:

```

---

import Layout from '../layouts/Layout.astro';

export async function getStaticPaths() {

    let data = await fetch("http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article");

    let articles = await data.json();

    return articles.items.map((article: any) => ({

        params: { slug: article.route.path },

        props: { article: article },

    }));

}

const { article } = Astro.props;

---

<Layout>

  <h1>{article.properties.title}</h1>

  <p>{article.properties.articleDate}</p>

  <div set:html={article.properties.content?.markup}></div>

</Layout>
```

Your project should now contain the following files:

- Directorysrc/


- Directorylayouts/


- Layout.astro

- Directorypages/


- index.astro
- **\[…slug\].astro**

With the dev server running, you should now be able to view your Umbraco-created content in your browser preview of your Astro project. Congratulations! 🚀

## Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/umbraco/#publishing-your-site)

To deploy your site visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

## Local dev, HTTPS and self-signed SSL certificates

[Section titled Local dev, HTTPS and self-signed SSL certificates](https://docs.astro.build/en/guides/cms/umbraco/#local-dev-https-and-self-signed-ssl-certificates)

If you are using the Umbraco HTTPS endpoint locally, any `fetch` queries will result in `fetch failed` with code `DEPTH_ZERO_SELF_SIGNED_CERT`. This is because Node (upon which Astro is built) won’t accept self-signed certificates by default. To avoid this, use the Umbraco HTTP endpoint for local dev.

Alternatively, you can set `NODE_TLS_REJECT_UNAUTHORIZED=0` in an `env.development` file and update `astro.config.js` as shown:

```

NODE_TLS_REJECT_UNAUTHORIZED=0
```

```

import { defineConfig } from 'astro/config';

import { loadEnv } from "vite";

const { NODE_TLS_REJECT_UNAUTHORIZED } = loadEnv(process.env.NODE_ENV, process.cwd(), "");

process.env.NODE_TLS_REJECT_UNAUTHORIZED = NODE_TLS_REJECT_UNAUTHORIZED;

// https://astro.build/config

export default defineConfig({});
```

This method is described in more detail in this [blog post showing how to configure your project for self-signed certificates](https://kjac.dev/posts/jamstack-for-free-with-azure-and-cloudflare/), with an [accompanying repo](https://github.com/kjac/UmbracoAzureCloudflare).

## Official Documentation

[Section titled Official Documentation](https://docs.astro.build/en/guides/cms/umbraco/#official-documentation)

- [Content Delivery API - Umbraco Documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api)

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/umbraco/#community-resources)

- [Astro-nomically Performant Websites using the Content Delivery API - Louis Richardson](https://24days.in/umbraco-cms/2023/sustainable-performant/astronomically-performant/)
- [Generating a TypeScript OpenAPI client from Umbraco’s Content Delivery API - Rick Butterfield](https://rickbutterfield.dev/blog/typescript-openapi-umbraco-content-delivery/)
- [Jamstack For Free With Azure And CloudFlare - Kenn Jacobsen](https://kjac.dev/posts/jamstack-for-free-with-azure-and-cloudflare/)
- [Quick n’ dirty blog with Astro and Umbraco - Kenn Jacobsen](https://kjac.dev/posts/quick-n-dirty-blog-with-astro-and-umbraco/)
- [Talk: Bake, Don’t Fry - Astro & The Content Delivery API - Adam Prendergast](https://www.youtube.com/watch?v=zNxqI25dtx4)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Deploy Astro on AWS
[Skip to content](https://docs.astro.build/en/guides/deploy/aws/#_top)

# Deploy your Astro Site to AWS

[AWS](https://aws.amazon.com/) is a full-featured web app hosting platform that can be used to deploy an Astro site.

Deploying your project to AWS requires using the [AWS console](https://aws.amazon.com/console/). (Most of these actions can also be done using the [AWS CLI](https://aws.amazon.com/cli/)). This guide will walk you through the steps to deploy your site to AWS using [AWS Amplify](https://aws.amazon.com/amplify/), [S3 static website hosting](https://aws.amazon.com/s3/), and [CloudFront](https://aws.amazon.com/cloudfront/).

## AWS Amplify

[Section titled AWS Amplify](https://docs.astro.build/en/guides/deploy/aws/#aws-amplify)

AWS Amplify is a set of purpose-built tools and features that lets frontend web and mobile developers quickly and easily build full-stack applications on AWS. You can either deploy your Astro project as a static site, or as a server-rendered site.

### Static Site

[Section titled Static Site](https://docs.astro.build/en/guides/deploy/aws/#static-site)

Your Astro project is a static site by default.

1. Create a new Amplify Hosting project.

2. Connect your repository to Amplify.

3. Modify your build settings to match your project’s build process.




- [npm](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3111)
- [pnpm](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3112)
- [Yarn](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3113)

```

version: 1

frontend:

  phases:

    preBuild:

      commands:

        - npm ci

    build:

      commands:

        - npm run build

  artifacts:

    baseDirectory: /dist

    files:

      - '**/*'

  cache:

    paths:

      - node_modules/**/*
```

```

version: 1

frontend:

  phases:

    preBuild:

      commands:

        - npm i -g pnpm

        - pnpm config set store-dir .pnpm-store

        - pnpm i

    build:

      commands:

        - pnpm run build

  artifacts:

    baseDirectory: /dist

    files:

      - '**/*'

  cache:

    paths:

      - .pnpm-store/**/*
```

```

version: 1

frontend:

  phases:

    preBuild:

      commands:

        - yarn install

    build:

      commands:

        - yarn build

  artifacts:

    baseDirectory: /dist

    files:

      - '**/*'

  cache:

    paths:

      - node_modules/**/*
```

Amplify will automatically deploy your website and update it when you push a commit to your repository.

### Adapter for on-demand rendering

[Section titled Adapter for on-demand rendering](https://docs.astro.build/en/guides/deploy/aws/#adapter-for-on-demand-rendering)

In order to deploy your project as a server-rendered site, you will need to use the third-party, [community-maintained AWS Amplify adapter](https://github.com/alexnguyennz/astro-aws-amplify) and make some changes to your config.

First, install the Amplify adapter.

- [npm](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3114)
- [pnpm](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3115)
- [Yarn](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3116)

```

npm install astro-aws-amplify
```

```

pnpm add astro-aws-amplify
```

```

yarn add astro-aws-amplify
```

Then, in your `astro.config.*` file, add the adapter and set the output to `server`.

```

import { defineConfig } from 'astro/config';

import awsAmplify from 'astro-aws-amplify';

export default defineConfig({

  // ...

  output: "server",

  adapter: awsAmplify(),

});
```

Once the adapter has been installed, you can set up your Amplify project.

1. Create a new Amplify Hosting project.

2. Connect your repository to Amplify.

3. Modify your build settings to match the adapter’s build process by either editing the build settings in the AWS console, or by adding an `amplify.yaml` in the root of your project.




- [npm](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3117)
- [pnpm](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3118)
- [Yarn](https://docs.astro.build/en/guides/deploy/aws/#tab-panel-3119)

```

version: 1

frontend:

  phases:

    preBuild:

      commands:

        - npm ci --cache .npm --prefer-offline

    build:

      commands:

        - npm run build

        - mv node_modules ./.amplify-hosting/compute/default

  artifacts:

    baseDirectory: .amplify-hosting

    files:

      - '**/*'

  cache:

    paths:

      - .npm/**/*
```

```

version: 1

frontend:

  phases:

    preBuild:

      commands:

        - npm i -g pnpm

        - pnpm config set store-dir .pnpm-store

        - pnpm i

    build:

      commands:

        - pnpm run build

        - mv node_modules ./.amplify-hosting/compute/default

  artifacts:

    baseDirectory: .amplify-hosting

    files:

      - '**/*'

  cache:

    paths:

      - .pnpm-store/**/*
```

```

version: 1

frontend:

  phases:

    preBuild:

      commands:

        - yarn install

    build:

      commands:

        - yarn build

        - mv node_modules ./.amplify-hosting/compute/default

  artifacts:

    baseDirectory: .amplify-hosting

    files:

      - '**/*'

  cache:

    paths:

      - node_modules/**/*
```

Amplify will automatically deploy your website and update it when you push a commit to your repository.

See [AWS’s Astro deployment guide](https://docs.aws.amazon.com/amplify/latest/userguide/get-started-astro.html) for more info.

## S3 static website hosting

[Section titled S3 static website hosting](https://docs.astro.build/en/guides/deploy/aws/#s3-static-website-hosting)

S3 is the starting point of any application. It is where your project files and other assets are stored. S3 charges for file storage and number of requests. You can find more information about S3 in the [AWS documentation](https://aws.amazon.com/s3/).

1. Create an S3 bucket with your project’s name.

2. Disable **“Block all public access”**. By default, AWS sets all buckets to be private. To make it public, you need to uncheck the “Block public access” checkbox in the bucket’s properties.

3. Upload your built files located in `dist` to S3. You can do this manually in the console or use the AWS CLI. If you use the AWS CLI, use the following command after [authenticating with your AWS credentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html):



```


aws s3 cp dist/ s3://<BUCKET_NAME>/ --recursive
```

4. Update your bucket policy to allow public access. You can find this setting in the bucket’s **Permissions > Bucket policy**.



```


{

     "Version": "2012-10-17",

     "Statement": [\
\
       {\
\
         "Sid": "PublicReadGetObject",\
\
         "Effect": "Allow",\
\
         "Principal": "*",\
\
         "Action": "s3:GetObject",\
\
         "Resource": "arn:aws:s3:::<BUCKET_NAME>/*"\
\
       }\
\
     ]

}
```

5. Enable website hosting for your bucket. You can find this setting in the bucket’s **Properties > Static website hosting**. Set your index document to `index.html` and your error document to `404.html`. Finally, you can find your new website URL in the bucket’s **Properties > Static website hosting**.


## S3 with CloudFront

[Section titled S3 with CloudFront](https://docs.astro.build/en/guides/deploy/aws/#s3-with-cloudfront)

CloudFront is a web service that provides content delivery network (CDN) capabilities. It is used to cache content of a web server and distribute it to end users. CloudFront charges for the amount of data transferred. Adding CloudFront to your S3 bucket is more cost-effective and provides a faster delivery.

To connect S3 with CloudFront, create a CloudFront distribution with the following values:

- **Origin domain:** Your S3 bucket static website endpoint. You can find your endpoint in your S3 bucket’s **Properties > Static website hosting**. Alternative, you can select your s3 bucket and click on the callout to replace your bucket address with your bucket static endpoint.
- **Viewer protocol policy:** “Redirect to HTTPS”

This configuration will serve your site using the CloudFront CDN network. You can find your CloudFront distribution URL in the bucket’s **Distributions > Domain name**.

## Continuous deployment with GitHub Actions

[Section titled Continuous deployment with GitHub Actions](https://docs.astro.build/en/guides/deploy/aws/#continuous-deployment-with-github-actions)

There are many ways to set up continuous deployment for AWS. One possibility for code hosted on GitHub is to use [GitHub Actions](https://github.com/features/actions) to deploy your website every time you push a commit.

1. Create a new policy in your AWS account using [IAM](https://aws.amazon.com/iam/) with the following permissions. This policy will allow you to upload built files to your S3 bucket and invalidate the CloudFront distribution files when you push a commit.



```


{

     "Version": "2012-10-17",

     "Statement": [\
\
         {\
\
             "Sid": "VisualEditor0",\
\
             "Effect": "Allow",\
\
             "Action": [\
\
                 "s3:PutObject",\
\
                 "s3:ListBucket",\
\
                 "s3:DeleteObject",\
\
                 "cloudfront:CreateInvalidation"\
\
             ],\
\
             "Resource": [\
\
                 "<DISTRIBUTION_ARN>",\
\
                 "arn:aws:s3:::<BUCKET_NAME>/*",\
\
                 "arn:aws:s3:::<BUCKET_NAME>"\
\
             ]\
\
         }\
\
     ]

}
```

2. Create a new IAM user and attach the policy to the user. This will provide your `AWS_SECRET_ACCESS_KEY` and `AWS_ACCESS_KEY_ID`.

3. Add this sample workflow to your repository at `.github/workflows/deploy.yml` and push it to GitHub. You will need to add `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `BUCKET_ID`, and `DISTRIBUTION_ID` as “secrets” to your repository on GitHub under **Settings** \> **Secrets** \> **Actions**. Click `New repository secret` to add each one.



```


name: Deploy Website




on:

     push:

       branches:

      - main

jobs:

deploy:

    runs-on: ubuntu-latest

    steps:

      - name: Checkout

        uses: actions/checkout@v4

      - name: Configure AWS Credentials

        uses: aws-actions/configure-aws-credentials@v1

        with:

          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}

          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          aws-region: us-east-1

      - name: Install modules

        run: npm ci

      - name: Build application

        run: npm run build

      - name: Deploy to S3

        run: aws s3 sync --delete ./dist/ s3://${{ secrets.BUCKET_ID }}

      - name: Create CloudFront invalidation

        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"
```

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/deploy/aws/#community-resources)

- [Deploy Astro to AWS Amplify](https://www.launchfa.st/blog/deploy-astro-aws-amplify)
- [Deploy Astro to AWS Elastic Beanstalk](https://www.launchfa.st/blog/deploy-astro-aws-elastic-beanstalk)
- [Deploy Astro to Amazon ECS on AWS Fargate](https://www.launchfa.st/blog/deploy-astro-aws-fargate)
- [Troubleshooting SSR Amplify Deployments](https://docs.aws.amazon.com/amplify/latest/userguide/troubleshooting-ssr-deployment.html)

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment on Kinsta
[Skip to content](https://docs.astro.build/en/guides/deploy/kinsta/#_top)

# Deploy your Astro Site to Kinsta Application Hosting

You can use [Kinsta Application Hosting](https://kinsta.com/application-hosting/) to host an Astro site on their cloud hosting.

## Configuring your Astro project

[Section titled Configuring your Astro project](https://docs.astro.build/en/guides/deploy/kinsta/#configuring-your-astro-project)

### Static hosting

[Section titled Static hosting](https://docs.astro.build/en/guides/deploy/kinsta/#static-hosting)

To host your project on **Kinsta Application Hosting**, you need to:

- Include a `name` field in your `package.json`. (This can be anything, and will not affect your deployment.)
- Include a `build` script in your `package.json`. (Your Astro project should already include this.)
- Install the [`serve`](https://www.npmjs.com/package/serve) package and set the `start` script to `serve dist/`.

Here are the necessary lines in your `package.json` file:

```

{

  "name": "anything", // This is required, but the value does not matter.

  "scripts": {

    "dev": "astro dev",

    "start": "serve dist/",

    "build": "astro build",

    "preview": "astro preview",

    "astro": "astro"

  },

  "dependencies": {

    "astro": "^2.2.0",

    "serve": "^14.0.1"

  },

}
```

### SSR

[Section titled SSR](https://docs.astro.build/en/guides/deploy/kinsta/#ssr)

To host your project on **Kinsta Application Hosting**, you need to:

- Include a `name` field in your `package.json`. (This can be anything, and will not affect your deployment.)
- Include a `build` script in your `package.json`. (Your Astro project should already include this.)
- Install the [`@astrojs/node`](https://www.npmjs.com/package/@astrojs/node) package and set the `start` script to `node ./dist/server/entry.mjs`.
- Set the `astro.config.mjs` to use `@astrojs/node` and to use `host: true`.

Here are the necessary lines in your `package.json` file:

```

{

  "name": "anything", // This is required, but the value does not matter.

  "scripts": {

    "dev": "astro dev",

    "start": "node ./dist/server/entry.mjs",

    "build": "astro build",

    "preview": "astro preview",

    "astro": "astro"

  },

  "dependencies": {

    "astro": "^2.2.0",

    "@astrojs/node": "^5.1.1"

  },

}
```

Here are the necessary lines in your `astro.config.mjs` file:

```

  import { defineConfig } from 'astro/config';

  import node from "@astrojs/node";

  export default defineConfig({

    output: 'server',

    adapter: node({

      mode: "standalone"

    }),

    server: {

      host: true

    }

  });
```

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/kinsta/#how-to-deploy)

Once your project’s GitHub repository is connected, you can trigger manual deploys to Kinsta Application Hosting in the **MyKinsta Admin Panel**. You can also set up automatic deployments in your admin panel.

### Configuring a new Kinsta application

[Section titled Configuring a new Kinsta application](https://docs.astro.build/en/guides/deploy/kinsta/#configuring-a-new-kinsta-application)

1. Go to the [My Kinsta](https://my.kinsta.com/) admin panel.

2. Go to the **Applications** tab.

3. Connect your GitHub repository.

4. Press the **Add service** \> **Application** button.

5. Follow the wizard steps.

6. Your application is deployed.


## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fkinsta%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=98474747)

## Prepr CMS Integration
[Skip to content](https://docs.astro.build/en/guides/cms/preprcms/#_top)

# Prepr CMS & Astro

[Prepr CMS](https://www.prepr.io/) is a headless CMS with built-in personalization.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/preprcms/#integrating-with-astro)

Prepr CMS provides a [GraphQL API](https://docs.prepr.io/reference/graphql/v1/overview) to connect your data to Astro.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/preprcms/#prerequisites)

To get started, you will need the following:

- A new or existing Astro project configured for [on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/).
- [A free Prepr account](https://signup.prepr.io/)
- [A Prepr environment with existing blog posts](https://docs.prepr.io/account/set-up-environments#create-an-envirntonment). These posts must include a `title` and `content`. Other fields are optional.

### Setting up credentials

[Section titled Setting up credentials](https://docs.astro.build/en/guides/cms/preprcms/#setting-up-credentials)

To add the Prepr endpoint to your Astro project, create a `.env file` in the root of your project if one does not already exist and add the following variable:

```

PREPR_ENDPOINT=YOUR_PREPR_API_URL
```

You will find your `YOUR_PREPR_API_URL` value from your Prepr account settings:

1. Go to  **Settings > Access tokens** to view both your Preview and Production access tokens.

2. Use the **API URL** value from the **GraphQL Production** access token to only retrieve published content items for your Astro site.


### Configuring the Prepr endpoint

[Section titled Configuring the Prepr endpoint](https://docs.astro.build/en/guides/cms/preprcms/#configuring-the-prepr-endpoint)

Create a new folder `src/lib/` and add a new file called `prepr.js`. This is where you will configure the Prepr endpoint. Add the following code to fetch your data from Prepr CMS:

```

export async function Prepr(query, variables) {

    const response = await fetch(import.meta.env.PREPR_ENDPOINT, {

        method: 'POST',

        headers: {

            'Content-Type': 'application/json'

        },

        body: JSON.stringify({ query, variables }),

    })

    return response

}
```

Your root directory should now include these files:

- Directorysrc/


- Directorylib/


- **prepr.js**

- **.env**
- astro.config.mjs
- package.json

### Fetching data

[Section titled Fetching data](https://docs.astro.build/en/guides/cms/preprcms/#fetching-data)

You will fetch your data from Prepr by writing queries to interact with its GraphQL API.

#### Create a GraphQL query to retrieve your blog articles:

[Section titled Create a GraphQL query to retrieve your blog articles:](https://docs.astro.build/en/guides/cms/preprcms/#create-a-graphql-query-to-retrieve-your-blog-articles)

1. Create a new folder `src/queries/` and add a file named `get-articles.js`.

2. Add the following query to this file to retrieve all articles:



```


const GetArticles = `

query {

       Articles {

         items {

           _id

           _slug

           title

       }

     }

}

`

export default GetArticles
```

3. To display a linked list of your blog posts on a page, import and execute your query, including the necessary Prepr endpoint. You will then have access to all your posts titles and their slugs to render to the page. (In the next step, you will [create individual pages for your blog posts](https://docs.astro.build/en/guides/cms/preprcms/#creating-individual-blog-post-pages).)



```


   ---

import Layout from '../layouts/Layout.astro';

import { Prepr } from '../lib/prepr.js';

import GetArticles from '../queries/get-articles.js';




const response = await Prepr(GetArticles)

const { data } = await response.json()

const articles = data.Articles

   ---




<Layout title="My blog site">

     <h1>

       My blog site

     </h1>

     <ul>

       {

         articles.items.map((post) => (

           <li>

             <a href={post._slug}>{post.title}</a>

           </li>

         ))

       }

     </ul>

</Layout>
```


Your root directory should include these new files:

- Directorysrc/


- Directorylib/


- prepr.js

- Directorypages/


- index.astro

- Directory **queries**/


- **get-articles.js**

- .env
- astro.config.mjs
- package.json

#### Creating individual blog post pages

[Section titled Creating individual blog post pages](https://docs.astro.build/en/guides/cms/preprcms/#creating-individual-blog-post-pages)

To create a page for each blog post, you will execute a new GraphQL query on a [dynamic routing](https://docs.astro.build/en/guides/routing/#on-demand-dynamic-routes) `.astro` page. This query will fetch a specific article by its slug and a new page will be created for each individual blog post.

1. Create a file called `get-article-by-slug.js` in the `queries` folder and add the following to query a specific article by its slug and return data such as the article `title` and `content`:



```


const GetArticleBySlug = `

query ($slug: String) {

      Article (slug: $slug) {

        _id

        title

        content {

          __typename

          ... on Text {

            body

            text

          }

          ... on Assets {

            items {

              url

            }

          }

        }

      }

}`




export default GetArticleBySlug
```

2. Inside the `src/pages` folder, create a file called `[…slug].astro`. Add the following code to import and execute the query from the previous step and display the retrieved article:



```


   ---

import Layout from '../layouts/Layout.astro';

import {Prepr} from '../lib/prepr.js';

import GetArticleBySlug from '../queries/get-article-by-slug.js';




const { slug } = Astro.params;

const response = await Prepr(GetArticleBySlug, {slug})

const { data } = await response.json()

const article = data.Article

   ---




<Layout title={article.title}>

     <main>

       <h1>{article.title}</h1>

       {

         article.content.map((content) => (

           <div>

             {

               content.__typename === "Assets" &&

               <img src={content.items[0].url} width="300" height="250"/>

             }

             {

               content.__typename === 'Text' &&

               <div set:html={content.body}></div>

             }

           </div>

         ))

       }

     </main>

</Layout>
```


Your root directory should now include these new files:

- Directorysrc/


- Directorylib/


- prepr.js

- Directorypages/


- index.astro
- **\[…slug\].astro**

- Directoryqueries/


- get-articles.js
- **get-article-by-slug.js**

- .env
- astro.config.mjs
- package.json

Now, when you click an article link from the main list of blog posts, you will be taken to a page with its individual content.

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/preprcms/#publishing-your-site)

To deploy your Prepr blog, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/preprcms/#official-resources)

- Follow the [Prepr CMS Astro quickstart](https://github.com/preprio/astro-quick-start) guide to make a simple blog with Astro and Prepr CMS.
- Check out the [Connecting Prepr CMS to Astro](https://docs.prepr.io/connecting-front-end-apps/astro) for an overview of Astro and Prepr CMS resources.

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Environment Variables
[Skip to content](https://docs.astro.build/en/guides/environment-variables/#_top)

# Using environment variables

Astro gives you access to [Vite’s built-in environment variables support](https://docs.astro.build/en/guides/environment-variables/#vites-built-in-support) and includes some [default environment variables for your project](https://docs.astro.build/en/guides/environment-variables/#default-environment-variables) that allow you to access configuration values for your current project (e.g. `site`, `base`), whether your project is running in development or production, and more.

Astro also provides a way to [use and organize your environment variables with type safety](https://docs.astro.build/en/guides/environment-variables/#type-safe-environment-variables). It is available for use inside the Astro context (e.g. Astro components, routes and endpoints, UI framework components, middleware), and managed with [a schema in your Astro configuration](https://docs.astro.build/en/reference/configuration-reference/#env).

## Vite’s built-in support

[Section titled Vite’s built-in support](https://docs.astro.build/en/guides/environment-variables/#vites-built-in-support)

Astro uses Vite’s built-in support for environment variables, which are statically replaced at build time, and lets you [use any of its methods](https://vite.dev/guide/env-and-mode.html) to work with them.

Note that while _all_ environment variables are available in server-side code, only environment variables prefixed with `PUBLIC_` are available in client-side code for security purposes.

```

SECRET_PASSWORD=password123

PUBLIC_ANYBODY=there
```

In this example, `PUBLIC_ANYBODY` (accessible via `import.meta.env.PUBLIC_ANYBODY`) will be available in server or client code, while `SECRET_PASSWORD` (accessible via `import.meta.env.SECRET_PASSWORD`) will be server-side only.

### IntelliSense for TypeScript

[Section titled IntelliSense for TypeScript](https://docs.astro.build/en/guides/environment-variables/#intellisense-for-typescript)

By default, Astro provides a type definition for `import.meta.env` in `astro/client.d.ts`.

While you can define more custom env variables in `.env.[mode]` files, you may want to get TypeScript IntelliSense for user-defined env variables which are prefixed with `PUBLIC_`.

To achieve this, you can create an `env.d.ts` in `src/` and configure `ImportMetaEnv` like this:

```

interface ImportMetaEnv {

  readonly DB_PASSWORD: string;

  readonly PUBLIC_POKEAPI: string;

  // more env variables...

}

interface ImportMeta {

  readonly env: ImportMetaEnv;

}
```

## Default environment variables

[Section titled Default environment variables](https://docs.astro.build/en/guides/environment-variables/#default-environment-variables)

Astro includes a few environment variables out of the box:

- `import.meta.env.MODE`: The mode your site is running in. This is `development` when running `astro dev` and `production` when running `astro build`.
- `import.meta.env.PROD`: `true` if your site is running in production; `false` otherwise.
- `import.meta.env.DEV`: `true` if your site is running in development; `false` otherwise. Always the opposite of `import.meta.env.PROD`.
- `import.meta.env.BASE_URL`: The base URL your site is being served from. This is determined by the [`base` config option](https://docs.astro.build/en/reference/configuration-reference/#base).
- `import.meta.env.SITE`: This is set to [the `site` option](https://docs.astro.build/en/reference/configuration-reference/#site) specified in your project’s `astro.config`.
- `import.meta.env.ASSETS_PREFIX`: The prefix for Astro-generated asset links if the [`build.assetsPrefix` config option](https://docs.astro.build/en/reference/configuration-reference/#buildassetsprefix) is set. This can be used to create asset links not handled by Astro.

Use them like any other environment variable.

```

const isProd = import.meta.env.PROD;

const isDev = import.meta.env.DEV;
```

## Setting environment variables

[Section titled Setting environment variables](https://docs.astro.build/en/guides/environment-variables/#setting-environment-variables)

### `.env` files

[Section titled .env files](https://docs.astro.build/en/guides/environment-variables/#env-files)

Environment variables can be loaded from `.env` files in your project directory.

Just create a `.env` file in the project directory and add some variables to it.

```

# This will only be available when run on the server!

DB_PASSWORD="foobar"

# This will be available everywhere!

PUBLIC_POKEAPI="https://pokeapi.co/api/v2"
```

You can also add `.production`, `.development` or a custom mode name to the filename itself (e.g `.env.testing`, `.env.staging`). This allows you to use different sets of environment variables at different times.

The `astro dev` and `astro build` commands default to `"development"` and `"production"` modes, respectively. You can run these commands with the [`--mode` flag](https://docs.astro.build/en/reference/cli-reference/#--mode-string) to pass a different value for `mode` and load the matching `.env` file.

This allows you to run the dev server or build your site connecting to different APIs:

- [npm](https://docs.astro.build/en/guides/environment-variables/#tab-panel-1792)
- [pnpm](https://docs.astro.build/en/guides/environment-variables/#tab-panel-1793)
- [Yarn](https://docs.astro.build/en/guides/environment-variables/#tab-panel-1794)

```

# Run the dev server connected to a "staging" API

npm run astro dev -- --mode staging

# Build a site that connects to a "production" API with additional debug information

npm run astro build -- --devOutput

# Build a site that connects to a "testing" API

npm run astro build -- --mode testing
```

```

# Run the dev server connected to a "staging" API

pnpm astro dev --mode staging

# Build a site that connects to a "production" API with additional debug information

pnpm astro build --devOutput

# Build a site that connects to a "testing" API

pnpm astro build --mode testing
```

```

# Run the dev server connected to a "staging" API

yarn astro dev --mode staging

# Build a site that connects to a "production" API with additional debug information

yarn astro build --devOutput

# Build a site that connects to a "testing" API

yarn astro build --mode testing
```

For more on `.env` files, [see the Vite documentation](https://vite.dev/guide/env-and-mode.html#env-files).

### In the Astro config file

[Section titled In the Astro config file](https://docs.astro.build/en/guides/environment-variables/#in-the-astro-config-file)

Astro evaluates configuration files before it loads your other files. This means that you cannot use `import.meta.env` in `astro.config.mjs` to access environment variables that were set in `.env` files.

You can use `process.env` in a configuration file to access other environment variables, like those [set by the CLI](https://docs.astro.build/en/guides/environment-variables/#using-the-cli).

You can also use [Vite’s `loadEnv` helper](https://main.vite.dev/config/#using-environment-variables-in-config) to manually load `.env` files.

```

import { loadEnv } from "vite";

const { SECRET_PASSWORD } = loadEnv(process.env.NODE_ENV, process.cwd(), "");
```

### Using the CLI

[Section titled Using the CLI](https://docs.astro.build/en/guides/environment-variables/#using-the-cli)

You can also add environment variables as you run your project:

- [npm](https://docs.astro.build/en/guides/environment-variables/#tab-panel-1795)
- [pnpm](https://docs.astro.build/en/guides/environment-variables/#tab-panel-1796)
- [Yarn](https://docs.astro.build/en/guides/environment-variables/#tab-panel-1797)

```

PUBLIC_POKEAPI=https://pokeapi.co/api/v2 npm run dev
```

```

PUBLIC_POKEAPI=https://pokeapi.co/api/v2 pnpm run dev
```

```

PUBLIC_POKEAPI=https://pokeapi.co/api/v2 yarn run dev
```

## Getting environment variables

[Section titled Getting environment variables](https://docs.astro.build/en/guides/environment-variables/#getting-environment-variables)

Environment variables in Astro are accessed with `import.meta.env`, using the [`import.meta` feature added in ES2020](https://tc39.es/ecma262/2020/#prod-ImportMeta), instead of `process.env`.

For example, use `import.meta.env.PUBLIC_POKEAPI` to get the `PUBLIC_POKEAPI` environment variable.

```

// When import.meta.env.SSR === true

const data = await db(import.meta.env.DB_PASSWORD);

// When import.meta.env.SSR === false

const data = fetch(`${import.meta.env.PUBLIC_POKEAPI}/pokemon/squirtle`);
```

When using SSR, environment variables can be accessed at runtime based on the SSR adapter being used. With most adapters you can access environment variables with `process.env`, but some adapters work differently. For the Deno adapter, you will use `Deno.env.get()`. See how to [access the Cloudflare runtime](https://docs.astro.build/en/guides/integrations-guide/cloudflare/#cloudflare-runtime) to handle environment variables when using the Cloudflare adapter. Astro will first check the server environment for variables, and if they don’t exist, Astro will look for them in `.env` files.

## Type safe environment variables

[Section titled Type safe environment variables](https://docs.astro.build/en/guides/environment-variables/#type-safe-environment-variables)

The `astro:env` API lets you configure a type-safe schema for [environment variables you have set](https://docs.astro.build/en/guides/environment-variables/#setting-environment-variables). This allows you to indicate whether they should be available on the server or the client, and define their data type and additional properties.

Developing an adapter? See how to [make an adapter compatible with `astro:env`](https://docs.astro.build/en/reference/adapter-reference/#envgetsecret).

### Basic Usage

[Section titled Basic Usage](https://docs.astro.build/en/guides/environment-variables/#basic-usage)

#### Define your schema

[Section titled Define your schema](https://docs.astro.build/en/guides/environment-variables/#define-your-schema)

To configure a schema, add the `env.schema` option to your Astro config:

```

import { defineConfig } from "astro/config";

export default defineConfig({

  env: {

    schema: {

      // ...

    }

  }

})
```

You can then [register variables as a string, number, enum, or boolean](https://docs.astro.build/en/guides/environment-variables/#data-types) using the `envField` helper. Define the [kind of environment variable](https://docs.astro.build/en/guides/environment-variables/#variable-types) by providing a `context` ( `"client"` or `"server"`) and `access` ( `"secret"` or `"public"`) for each variable, and pass any additional properties such as `optional` or `default` in an object:

```

import { defineConfig, envField } from "astro/config";

export default defineConfig({

  env: {

    schema: {

      API_URL: envField.string({ context: "client", access: "public", optional: true }),

      PORT: envField.number({ context: "server", access: "public", default: 4321 }),

      API_SECRET: envField.string({ context: "server", access: "secret" }),

    }

  }

})
```

Types will be generated for you when running `astro dev` or `astro build`, but you can run `astro sync` to generate types only.

#### Use variables from your schema

[Section titled Use variables from your schema](https://docs.astro.build/en/guides/environment-variables/#use-variables-from-your-schema)

Import and use your defined variables from the appropriate `/client` or `/server` module:

```

---

import { API_URL } from "astro:env/client";

import { API_SECRET_TOKEN } from "astro:env/server";

const data = await fetch(`${API_URL}/users`, {

  method: "GET",

  headers: {

    "Content-Type": "application/json",

    "Authorization": `Bearer ${API_SECRET_TOKEN}`

  },

})

---

<script>

  import { API_URL } from "astro:env/client";

  fetch(`${API_URL}/ping`)

</script>
```

### Variable types

[Section titled Variable types](https://docs.astro.build/en/guides/environment-variables/#variable-types)

There are three kinds of environment variables, determined by the combination of `context` ( `"client"` or `"server"`) and `access` ( `"secret"` or `"public"`) settings defined in your schema:

- **Public client variables**: These variables end up in both your final client and server bundles, and can be accessed from both client and server through the `astro:env/client` module:



```


import { API_URL } from "astro:env/client";
```

- **Public server variables**: These variables end up in your final server bundle and can be accessed on the server through the `astro:env/server` module:



```


import { PORT } from "astro:env/server";
```

- **Secret server variables**: These variables are not part of your final bundle and can be accessed on the server through the `astro:env/server` module:



```


import { API_SECRET } from "astro:env/server";
```









By default, secrets are only validated at runtime. You can enable validating private variables on start by [configuring `validateSecrets: true`](https://docs.astro.build/en/reference/configuration-reference/#envvalidatesecrets).


### Data types

[Section titled Data types](https://docs.astro.build/en/guides/environment-variables/#data-types)

There are currently four data types supported: strings, numbers, enums, and booleans:

```

import { envField } from "astro/config";

envField.string({

   // context & access

   optional: true,

   default: "foo",

})

envField.number({

   // context & access

   optional: true,

   default: 15,

})

envField.boolean({

   // context & access

   optional: true,

   default: true,

})

envField.enum({

   // context & access

   values: ["foo", "bar", "baz"],

   optional: true,

   default: "baz",

})
```

For a complete list of validation fields, see the [`envField` API reference](https://docs.astro.build/en/reference/configuration-reference/#envschema).

### Retrieving secrets dynamically

[Section titled Retrieving secrets dynamically](https://docs.astro.build/en/guides/environment-variables/#retrieving-secrets-dynamically)

Despite defining your schema, you may want to retrieve the raw value of a given secret or to retrieve secrets not defined in your schema. In this case, you can use `getSecret()` exported from `astro:env/server`:

```

import {

   FOO, // boolean

   getSecret

} from "astro:env/server";

getSecret("FOO"); // string | undefined
```

Learn more in [the API reference](https://docs.astro.build/en/reference/modules/astro-env/#getsecret).

### Limitations

[Section titled Limitations](https://docs.astro.build/en/guides/environment-variables/#limitations)

`astro:env` is a virtual module which means it can only be used inside the Astro context. For example, you can use it in:

- Middlewares
- Astro routes and endpoints
- Astro components
- Framework components
- Modules

You cannot use it in the following and will have to resort to `process.env`:

- `astro.config.mjs`
- Scripts

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fenvironment-variables%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=1962263)

## Contentful Integration Guide
[Skip to content](https://docs.astro.build/en/guides/cms/contentful/#_top)

# Contentful & Astro

[Contentful](https://www.contentful.com/) is a headless CMS that allows you to manage content, integrate with other services, and publish to multiple platforms.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/contentful/#integrating-with-astro)

In this section, we’ll use the [Contentful SDK](https://github.com/contentful/contentful.js) to connect your Contentful space to Astro with zero client-side JavaScript.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/contentful/#prerequisites)

To get started, you will need to have the following:

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **A Contentful account and a Contentful space**. If you don’t have an account, you can [sign up](https://www.contentful.com/sign-up/) for a free account and create a new Contentful space. You can also use an existing space if you have one.

3. **Contentful credentials** \- You can find the following credentials in your Contentful dashboard **Settings > API keys**. If you don’t have any API keys, create one by selecting **Add API key**.
   - **Contentful space ID** \- The ID of your Contentful space.
   - **Contentful delivery access token** \- The access token to consume _published_ content from your Contentful space.
   - **Contentful preview access token** \- The access token to consume _unpublished_ content from your Contentful space.

### Setting up credentials

[Section titled Setting up credentials](https://docs.astro.build/en/guides/cms/contentful/#setting-up-credentials)

To add your Contentful space’s credentials to Astro, create an `.env` file in the root of your project with the following variables:

```

CONTENTFUL_SPACE_ID=YOUR_SPACE_ID

CONTENTFUL_DELIVERY_TOKEN=YOUR_DELIVERY_TOKEN

CONTENTFUL_PREVIEW_TOKEN=YOUR_PREVIEW_TOKEN
```

Now, you can use these environment variables in your project.

If you would like to have IntelliSense for your Contentful environment variables, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:

```

interface ImportMetaEnv {

  readonly CONTENTFUL_SPACE_ID: string;

  readonly CONTENTFUL_DELIVERY_TOKEN: string;

  readonly CONTENTFUL_PREVIEW_TOKEN: string;

}
```

Your root directory should now include these new files:

- Directorysrc/


- **env.d.ts**

- **.env**
- astro.config.mjs
- package.json

### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/contentful/#installing-dependencies)

To connect with your Contentful space, install both of the following using the single command below for your preferred package manager:

- [`contentful.js`](https://github.com/contentful/contentful.js), the official Contentful SDK for JavaScript
- [`rich-text-html-renderer`](https://github.com/contentful/rich-text/tree/master/packages/rich-text-html-renderer), a package to render Contentful’s rich text fields to HTML.

- [npm](https://docs.astro.build/en/guides/cms/contentful/#tab-panel-3057)
- [pnpm](https://docs.astro.build/en/guides/cms/contentful/#tab-panel-3058)
- [Yarn](https://docs.astro.build/en/guides/cms/contentful/#tab-panel-3059)

```

npm install contentful @contentful/rich-text-html-renderer
```

```

pnpm add contentful @contentful/rich-text-html-renderer
```

```

yarn add contentful @contentful/rich-text-html-renderer
```

Next, create a new file called `contentful.ts` in the `src/lib/` directory of your project.

```

import * as contentful from "contentful";

export const contentfulClient = contentful.createClient({

  space: import.meta.env.CONTENTFUL_SPACE_ID,

  accessToken: import.meta.env.DEV

    ? import.meta.env.CONTENTFUL_PREVIEW_TOKEN

    : import.meta.env.CONTENTFUL_DELIVERY_TOKEN,

  host: import.meta.env.DEV ? "preview.contentful.com" : "cdn.contentful.com",

});
```

The above code snippet creates a new Contentful client, passing in credentials from the `.env` file.

Finally, your root directory should now include these new files:

- Directorysrc/


- env.d.ts
- Directorylib/


- **contentful.ts**

- .env
- astro.config.mjs
- package.json

### Fetching data

[Section titled Fetching data](https://docs.astro.build/en/guides/cms/contentful/#fetching-data)

Astro components can fetch data from your Contentful account by using the `contentfulClient` and specifying the `content_type`.

For example, if you have a “blogPost” content type that has a text field for a title and a rich text field for content, your component might look like this:

```

---

import { contentfulClient } from "../lib/contentful";

import { documentToHtmlString } from "@contentful/rich-text-html-renderer";

import type { EntryFieldTypes } from "contentful";

interface BlogPost {

  contentTypeId: "blogPost",

  fields: {

    title: EntryFieldTypes.Text

    content: EntryFieldTypes.RichText,

  }

}

const entries = await contentfulClient.getEntries<BlogPost>({

  content_type: "blogPost",

});

---

<body>

  {entries.items.map((item) => (

    <section>

      <h2>{item.fields.title}</h2>

      <article set:html={documentToHtmlString(item.fields.content)}></article>

    </section>

  ))}

</body>
```

You can find more querying options in the [Contentful documentation](https://contentful.github.io/contentful.js/).

## Making a blog with Astro and Contentful

[Section titled Making a blog with Astro and Contentful](https://docs.astro.build/en/guides/cms/contentful/#making-a-blog-with-astro-and-contentful)

With the setup above, you are now able to create a blog that uses Contentful as the CMS.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/contentful/#prerequisites-1)

1. **A Contentful space** \- For this tutorial we recommend starting with an empty space. If you already have a content model, feel free to use it, but you will need to modify our code snippets to match your content model.
2. **An Astro project integrated with the [Contentful SDK](https://github.com/contentful/contentful.js)** \- See [integrating with Astro](https://docs.astro.build/en/guides/cms/contentful/#integrating-with-astro) for more details on how to set up an Astro project with Contentful.

### Setting up a Contentful model

[Section titled Setting up a Contentful model](https://docs.astro.build/en/guides/cms/contentful/#setting-up-a-contentful-model)

Inside your Contentful space, in the **Content model** section, create a new content model with the following fields and values:

- **Name:** Blog Post
- **API identifier:** `blogPost`
- **Description:** This content type is for a blog post

In your newly created content type, use the **Add Field** button to add 5 new fields with the following parameters:

1. Text field
   - **Name:** title
   - **API identifier:** `title`
     (leave the other parameters as their defaults)
2. Date and time field
   - **Name:** date
   - **API identifier:** `date`
3. Text field
   - **Name:** slug
   - **API identifier:** `slug`
     (leave the other parameters as their defaults)
4. Text field
   - **Name:** description
   - **API identifier:** `description`
5. Rich text field
   - **Name:** content
   - **API identifier:** `content`

Click **Save** to save your changes.

In the **Content** section of your Contentful space, create a new entry by clicking the **Add Entry** button. Then, fill in the fields:

- **Title:** `Astro is amazing!`
- **Slug:** `astro-is-amazing`
- **Description:** `Astro is a new static site generator that is blazing fast and easy to use.`
- **Date:** `2022-10-05`
- **Content:** `This is my first blog post!`

Click **Publish** to save your entry. You have just created your first blog post.

Feel free to add as many blog posts as you want, then switch to your favorite code editor to start hacking with Astro!

### Displaying a list of blog posts

[Section titled Displaying a list of blog posts](https://docs.astro.build/en/guides/cms/contentful/#displaying-a-list-of-blog-posts)

Create a new interface called `BlogPost` and add it to your `contentful.ts` file in `src/lib/`. This interface will match the fields of your blog post content type in Contentful. You will use it to type your blog post entries response.

```

import * as contentful from "contentful";

import type { EntryFieldTypes } from "contentful";

export interface BlogPost {

  contentTypeId: "blogPost",

  fields: {

    title: EntryFieldTypes.Text

    content: EntryFieldTypes.RichText,

    date: EntryFieldTypes.Date,

    description: EntryFieldTypes.Text,

    slug: EntryFieldTypes.Text

  }

}

export const contentfulClient = contentful.createClient({

  space: import.meta.env.CONTENTFUL_SPACE_ID,

  accessToken: import.meta.env.DEV

    ? import.meta.env.CONTENTFUL_PREVIEW_TOKEN

    : import.meta.env.CONTENTFUL_DELIVERY_TOKEN,

  host: import.meta.env.DEV ? "preview.contentful.com" : "cdn.contentful.com",

});
```

Next, go to the Astro page where you will fetch data from Contentful. We will use the home page `index.astro` in `src/pages/` in this example.

Import `BlogPost` interface and `contentfulClient` from `src/lib/contentful.ts`.

Fetch all the entries from Contentful with a content type of `blogPost` while passing the `BlogPost` interface to type your response.

```

---

import { contentfulClient } from "../lib/contentful";

import type { BlogPost } from "../lib/contentful";

const entries = await contentfulClient.getEntries<BlogPost>({

  content_type: "blogPost",

});

---
```

This fetch call will return an array of your blog posts at `entries.items`. You can use `map()` to create a new array ( `posts`) that formats your returned data.

The example below returns the `items.fields` properties from our Content model to create a blog post preview, and at the same time, reformats the date to a more readable format.

```

---

import { contentfulClient } from "../lib/contentful";

import type { BlogPost } from "../lib/contentful";

const entries = await contentfulClient.getEntries<BlogPost>({

  content_type: "blogPost",

});

const posts = entries.items.map((item) => {

  const { title, date, description, slug } = item.fields;

  return {

    title,

    slug,

    description,

    date: new Date(date).toLocaleDateString()

  };

});

---
```

Finally, you can use `posts` in your template to show a preview of each blog post.

```

---

import { contentfulClient } from "../lib/contentful";

import type { BlogPost } from "../lib/contentful";

const entries = await contentfulClient.getEntries<BlogPost>({

  content_type: "blogPost",

});

const posts = entries.items.map((item) => {

  const { title, date, description, slug } = item.fields;

  return {

    title,

    slug,

    description,

    date: new Date(date).toLocaleDateString()

  };

});

---

<html lang="en">

  <head>

    <title>My Blog</title>

  </head>

  <body>

    <h1>My Blog</h1>

    <ul>

      {posts.map((post) => (

        <li>

          <a href={`/posts/${post.slug}/`}>

            <h2>{post.title}</h2>

          </a>

          <time>{post.date}</time>

          <p>{post.description}</p>

        </li>

      ))}

    </ul>

  </body>

</html>
```

### Generating individual blog posts

[Section titled Generating individual blog posts](https://docs.astro.build/en/guides/cms/contentful/#generating-individual-blog-posts)

Use the same method to fetch your data from Contentful as above, but this time, on a page that will create a unique page route for each blog post.

#### Static site generation

[Section titled Static site generation](https://docs.astro.build/en/guides/cms/contentful/#static-site-generation)

If you’re using Astro’s default static mode, you’ll use [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes) and the `getStaticPaths()` function. This function will be called at build time to generate the list of paths that become pages.

Create a new file named `[slug].astro` in `src/pages/posts/`.

As you did on `index.astro`, import the `BlogPost` interface and `contentfulClient` from `src/lib/contentful.ts`.

This time, fetch your data inside a `getStaticPaths()` function.

```

---

import { contentfulClient } from "../../lib/contentful";

import type { BlogPost } from "../../lib/contentful";

export async function getStaticPaths() {

  const entries = await contentfulClient.getEntries<BlogPost>({

    content_type: "blogPost",

  });

}

---
```

Then, map each item to an object with a `params` and `props` property. The `params` property will be used to generate the URL of the page and the `props` property will be passed to the page component as props.

```

---

import { contentfulClient } from "../../lib/contentful";

import { documentToHtmlString } from "@contentful/rich-text-html-renderer";

import type { BlogPost } from "../../lib/contentful";

export async function getStaticPaths() {

  const entries = await contentfulClient.getEntries<BlogPost>({

    content_type: "blogPost",

  });

  const pages = entries.items.map((item) => ({

    params: { slug: item.fields.slug },

    props: {

      title: item.fields.title,

      content: documentToHtmlString(item.fields.content),

      date: new Date(item.fields.date).toLocaleDateString(),

    },

  }));

  return pages;

}

---
```

The property inside `params` must match the name of the dynamic route. Since our filename is `[slug].astro`, we use `slug`.

In our example, the `props` object passes three properties to the page:

- title (a string)
- content (a rich text Document converted to HTML using `documentToHtmlString`)
- date (formatted using the `Date` constructor)

Finally, you can use the page `props` to display your blog post.

```

---

import { contentfulClient } from "../../lib/contentful";

import { documentToHtmlString } from "@contentful/rich-text-html-renderer";

import type { BlogPost } from "../../lib/contentful";

export async function getStaticPaths() {

  const { items } = await contentfulClient.getEntries<BlogPost>({

    content_type: "blogPost",

  });

  const pages = items.map((item) => ({

    params: { slug: item.fields.slug },

    props: {

      title: item.fields.title,

      content: documentToHtmlString(item.fields.content),

      date: new Date(item.fields.date).toLocaleDateString(),

    },

  }));

  return pages;

}

const { content, title, date } = Astro.props;

---

<html lang="en">

  <head>

    <title>{title}</title>

  </head>

  <body>

    <h1>{title}</h1>

    <time>{date}</time>

    <article set:html={content} />

  </body>

</html>
```

Navigate to [http://localhost:4321/](http://localhost:4321/) and click on one of your posts to make sure your dynamic route is working!

#### On-demand rendering

[Section titled On-demand rendering](https://docs.astro.build/en/guides/cms/contentful/#on-demand-rendering)

If you’ve [opted into on-demand rendering with an adapter](https://docs.astro.build/en/guides/on-demand-rendering/), you will use a dynamic route that uses a `slug` parameter to fetch the data from Contentful.

Create a `[slug].astro` page in `src/pages/posts`. Use [`Astro.params`](https://docs.astro.build/en/reference/api-reference/#params) to get the slug from the URL, then pass that to `getEntries`:

```

---

import { contentfulClient } from "../../lib/contentful";

import type { BlogPost } from "../../lib/contentful";

const { slug } = Astro.params;

const data = await contentfulClient.getEntries<BlogPost>({

  content_type: "blogPost",

  "fields.slug": slug,

});

---
```

If the entry is not found, you can redirect the user to the 404 page using [`Astro.redirect`](https://docs.astro.build/en/guides/routing/#dynamic-redirects).

```

---

import { contentfulClient } from "../../lib/contentful";

import type { BlogPost } from "../../lib/contentful";

const { slug } = Astro.params;

try {

  const data = await contentfulClient.getEntries<BlogPost>({

    content_type: "blogPost",

    "fields.slug": slug,

  });

} catch (error) {

  return Astro.redirect("/404");

}

---
```

To pass post data to the template section, create a `post` object outside the `try/catch` block.

Use `documentToHtmlString` to convert `content` from a Document to HTML, and use the Date constructor to format the date. `title` can be left as-is. Then, add these properties to your `post` object.

```

---

import Layout from "../../layouts/Layout.astro";

import { contentfulClient } from "../../lib/contentful";

import { documentToHtmlString } from "@contentful/rich-text-html-renderer";

import type { BlogPost } from "../../lib/contentful";

let post;

const { slug } = Astro.params;

try {

  const data = await contentfulClient.getEntries<BlogPost>({

    content_type: "blogPost",

    "fields.slug": slug,

  });

  const { title, date, content } = data.items[0].fields;

  post = {

    title,

    date: new Date(date).toLocaleDateString(),

    content: documentToHtmlString(content),

  };

} catch (error) {

  return Astro.redirect("/404");

}

---
```

Finally, you can reference `post` to display your blog post in the template section.

```

---

import Layout from "../../layouts/Layout.astro";

import { contentfulClient } from "../../lib/contentful";

import { documentToHtmlString } from "@contentful/rich-text-html-renderer";

import type { BlogPost } from "../../lib/contentful";

let post;

const { slug } = Astro.params;

try {

  const data = await contentfulClient.getEntries<BlogPost>({

    content_type: "blogPost",

    "fields.slug": slug,

  });

  const { title, date, content } = data.items[0].fields;

  post = {

    title,

    date: new Date(date).toLocaleDateString(),

    content: documentToHtmlString(content),

  };

} catch (error) {

  return Astro.redirect("/404");

}

---

<html lang="en">

  <head>

    <title>{post?.title}</title>

  </head>

  <body>

    <h1>{post?.title}</h1>

    <time>{post?.date}</time>

    <article set:html={post?.content} />

  </body>

</html>
```

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/contentful/#publishing-your-site)

To deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

#### Rebuild on Contentful changes

[Section titled Rebuild on Contentful changes](https://docs.astro.build/en/guides/cms/contentful/#rebuild-on-contentful-changes)

If your project is using Astro’s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Contentful events.

##### Netlify

[Section titled Netlify](https://docs.astro.build/en/guides/cms/contentful/#netlify)

To set up a webhook in Netlify:

1. Go to your site dashboard and click on **Build & deploy**.

2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.

3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.


##### Vercel

[Section titled Vercel](https://docs.astro.build/en/guides/cms/contentful/#vercel)

To set up a webhook in Vercel:

1. Go to your project dashboard and click on **Settings**.

2. Under the **Git** tab, find the **Deploy Hooks** section.

3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.


##### Adding a webhook to Contentful

[Section titled Adding a webhook to Contentful](https://docs.astro.build/en/guides/cms/contentful/#adding-a-webhook-to-contentful)

In your Contentful space **settings**, click on the **Webhooks** tab and create a new webhook by clicking the **Add Webhook** button. Provide a name for your webhook and paste the webhook URL you copied in the previous section. Finally, hit **Save** to create the webhook.

Now, whenever you publish a new blog post in Contentful, a new build will be triggered and your blog will be updated.

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment Guide
[Skip to content](https://docs.astro.build/en/guides/deploy/fleek/#_top)

# Deploy your Astro Site to Fleek

You can use [Fleek](http://fleek.xyz/) to deploy a static Astro site to their edge-optimized decentralized network.

This guide gives a complete walkthrough of deploying your Astro site to Fleek using the Fleek UI and CLI.

## Project Configuration

[Section titled Project Configuration](https://docs.astro.build/en/guides/deploy/fleek/#project-configuration)

Your Astro project can be deployed to Fleek as a static site.

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/fleek/#how-to-deploy)

You can deploy to Fleek through the website UI or using Fleek’s CLI (command line interface).

### Platform UI Deployment

[Section titled Platform UI Deployment](https://docs.astro.build/en/guides/deploy/fleek/#platform-ui-deployment)

1. Create a [Fleek](https://app.fleek.xyz/) account.

2. Push your code to your online Git repository (GitHub).

3. Import your project into Fleek.

4. Fleek will automatically detect Astro and then you can configure the correct settings.

5. Your application is deployed!


### Fleek CLI

[Section titled Fleek CLI](https://docs.astro.build/en/guides/deploy/fleek/#fleek-cli)

1. Install the Fleek CLI.



```


# You need to have Nodejs >= 18.18.2

npm install -g @fleek-platform/cli
```

2. Log in to your Fleek account from your terminal.



```


fleek login
```

3. Run the build command to generate the static files. By default, these will be located in the `dist/` directory.



```


npm run build
```

4. Initialize your project. This will generate a configuration file.



```


fleek sites init
```

5. You will be prompted to either create a new Fleek Site or use an existing one. Give the site a name and select the directory where your project is located.

6. Deploy your site.



```


fleek sites deploy
```


## Learn more

[Section titled Learn more](https://docs.astro.build/en/guides/deploy/fleek/#learn-more)

[Deploy site from Fleek UI](https://fleek.xyz/docs/platform/deployments/)

[Deploy site from Fleek CLI](https://fleek.xyz/docs/cli/hosting/)

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment Guide
[Skip to content](https://docs.astro.build/en/guides/deploy/flightcontrol/#_top)

# Deploy your Astro Site to AWS with Flightcontrol

You can deploy an Astro site using [Flightcontrol](https://www.flightcontrol.dev/?ref=astro), which provides fully-automated deployments to your AWS account.

Supports both static and SSR Astro sites.

## How to Deploy

[Section titled How to Deploy](https://docs.astro.build/en/guides/deploy/flightcontrol/#how-to-deploy)

1. Create a Flightcontrol account at [app.flightcontrol.dev/signup](https://app.flightcontrol.dev/signup?ref=astro)

2. Go to [app.flightcontrol.dev/projects/new/1](https://app.flightcontrol.dev/projects/new/1)

3. Connect your GitHub account and select your repo

4. Select your desired “Config Type”:
   - `GUI` (all config managed through Flightcontrol dashboard) where you will select the `Astro Static` or `Astro SSR` preset
   - `flightcontrol.json` (“infrastructure as code” option where all config is in your repo) where you will select an Astro example config, then add it to your codebase as `flightcontrol.json`
5. Adjust any configuration as needed

6. Click “Create Project” and complete any required steps (like linking your AWS account).


### SSR Setup

[Section titled SSR Setup](https://docs.astro.build/en/guides/deploy/flightcontrol/#ssr-setup)

To deploy with SSR support, make sure you first set up the [`@astrojs/node`](https://docs.astro.build/en/guides/integrations-guide/node/) adapter. Then, follow the steps above, choosing the appropriate configurations for Astro SSR.

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment Guide
[Skip to content](https://docs.astro.build/en/guides/deploy/flyio/#_top)

# Deploy your Astro Site to Fly.io

You can deploy your Astro project to [Fly.io](https://fly.io/), a platform for running full stack apps and databases close to your users.

## Project Configuration

[Section titled Project Configuration](https://docs.astro.build/en/guides/deploy/flyio/#project-configuration)

Your Astro project can be deployed to Fly.io as a static site, or as a server-side rendered site (SSR).

### Static Site

[Section titled Static Site](https://docs.astro.build/en/guides/deploy/flyio/#static-site)

Your Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site to Fly.io.

### Adapter for SSR

[Section titled Adapter for SSR](https://docs.astro.build/en/guides/deploy/flyio/#adapter-for-ssr)

To enable on-demand rendering in your Astro project and deploy on Fly.io, add [the Node.js adapter](https://docs.astro.build/en/guides/integrations-guide/node/).

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/flyio/#how-to-deploy)

1. [Sign up for Fly.io](https://fly.io/docs/getting-started/log-in-to-fly/#first-time-or-no-fly-account-sign-up-for-fly) if you haven’t already.

2. [Install `flyctl`](https://fly.io/docs/hands-on/install-flyctl/), your Fly.io app command center.

3. Run the following command in your terminal.



```


fly launch
```









`flyctl` will automatically detect Astro, configure the correct settings, build your image, and deploy it to the Fly.io platform.


## Generating your Astro Dockerfile

[Section titled Generating your Astro Dockerfile](https://docs.astro.build/en/guides/deploy/flyio/#generating-your-astro-dockerfile)

If you don’t already have a Dockerfile, `fly launch` will generate one for you, as well as prepare a `fly.toml` file. For pages rendered on demand, this Dockerfile will include the appropriate start command and environment variables.

You can instead create your own Dockerfile using [Dockerfile generator](https://www.npmjs.com/package/@flydotio/dockerfile) and then run using the command `npx dockerfile` for Node applications or `bunx dockerfile` for Bun applications.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/deploy/flyio/#official-resources)

- Check out [the official Fly.io docs](https://fly.io/docs/js/frameworks/astro/)

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fflyio%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=27507854)

## Astro Blog Tutorial
[Skip to content](https://docs.astro.build/en/tutorial/0-introduction/#_top)

# Build your first Astro Blog

In this tutorial, you’ll learn Astro’s key features by building a fully-functioning blog, from zero to full launch! 🚀

Along the way, you’ll:

- Set up your development environment
- Create pages and blog posts for your website
- Build with Astro components
- Query and work with local files
- Add interactivity to your site
- Deploy your site to the web

Want a preview of what you’re going to build? You can view the final project on [GitHub](https://github.com/withastro/blog-tutorial-demo) or open a working version in an online coding environment such as [IDX](https://idx.google.com/import?url=https:%2F%2Fgithub.com%2Fwithastro%2Fblog-tutorial-demo%2F) or [StackBlitz](https://stackblitz.com/github/withastro/blog-tutorial-demo/tree/complete?file=src%2Fpages%2Findex.astro).

## Checklist

[Section titled Checklist](https://docs.astro.build/en/tutorial/0-introduction/#checklist)

- Looks great! I’m ready to get started!

Tutorials

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Statamic CMS Integration
[Skip to content](https://docs.astro.build/en/guides/cms/statamic/#_top)

# Headless Statamic & Astro

[Statamic](https://statamic.com/) is a modern, flat-file CMS. It allows developers to easily create dynamic websites and applications while offering content editors an intuitive and user-friendly interface for managing content.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/statamic/#integrating-with-astro)

Statamic comes with a built-in [REST API](https://statamic.dev/rest-api) and [GraphQL API](https://statamic.dev/graphql) to connect your data to Astro.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/statamic/#prerequisites)

To get started, you will need to have the following:

1. REST API and GraphQL API are only available in a pro version of Statamic. You can try the Pro version free on your [local machine](https://statamic.dev/tips/how-to-enable-statamic-pro#trial-mode).
2. **An Astro project** \- If you still need an Astro project, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running quickly.
3. **A Statamic site** \- If you need a Statamic website, [this guide](https://statamic.dev/quick-start-guide) will help you get started.
Remember to [enable REST API](https://statamic.dev/rest-api#enable-the-api) or [GraphQL API](https://statamic.dev/graphql#enable-graphql) by adding `STATAMIC_API_ENABLED=true` or `STATAMIC_GRAPHQL_ENABLED=true` in the `.env` file and enable required resources in the API configuration file.

### Fetching Data

[Section titled Fetching Data](https://docs.astro.build/en/guides/cms/statamic/#fetching-data)

#### REST API

[Section titled REST API](https://docs.astro.build/en/guides/cms/statamic/#rest-api)

Fetch your Statamic data from your site’s REST API URL. By default, it’s `https://[YOUR-SITE]/api/`. Then, you can render your data properties using Astro’s `set:html={}` directive.

For example, to display a list of titles and their content from a selected [collection](https://statamic.dev/collections):

```

---

const res = await fetch("https://[YOUR-SITE]/api/collections/posts/entries?sort=-date")

const posts = await res.json()

---

<h1>Astro + Statamic 🚀</h1>

{

  posts.map((post) => (

      <h2 set:html={post.title} />

      <p set:html={post.content} />

  ))

}
```

#### GraphQL

[Section titled GraphQL](https://docs.astro.build/en/guides/cms/statamic/#graphql)

Fetch your Statamic data with your site’s GraphQL API URL. By default, it’s `https://[YOUR-SITE]/graphql/`. Then, you can render your data properties using Astro’s `set:html={}` directive.

For example, to display a list of titles and their content from a selected [collection](https://statamic.dev/collections):

```

---

const graphqlQuery = {

  query: `

    query Entries($page: Int, $locale: String) {

      entries(

        collection: "posts"

        sort: "date asc"

        limit: 20

        page: $page

        filter: { locale: $locale }

      ) {

        current_page

        has_more_pages

        data {

          title

          ... on Entry_Posts_Post {

              content

            }

        }

      }

    }

  `,

  variables: {

    page: page,

    locale: locale,

  },

};

const res = await fetch("https://[YOUR-SITE]/graphql", {

  method: "POST",

  headers: { "Content-Type": "application/json" },

  body: JSON.stringify(graphqlQuery),

})

const { data } = await res.json();

const entries = data?.entries;

---

<h1>Astro + Statamic 🚀</h1>

{

  entries.data.map((post) => (

      <h2 set:html={post.title} />

      <p set:html={post.content} />

  ))

}
```

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/statamic/#publishing-your-site)

To deploy your Astro site visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/statamic/#community-resources)

- [How to build a static site using Statamic as headless CMS](https://buddy.works/guides/statamic-rest-api)
- [Implementing Astro live previews in headless Statamic](https://maciekpalmowski.dev/implementing-live-previews-in-headless-statamic-when-using-astro/)

## Themes

[Section titled Themes](https://docs.astro.build/en/guides/cms/statamic/#themes)

- [![](https://docs.astro.build/_astro/creek.CgpBUanV_Z1gsxon.webp)Creek](https://astro.build/themes/details/creek/)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Keystatic with Astro
[Skip to content](https://docs.astro.build/en/guides/cms/keystatic/#_top)

# Keystatic & Astro

[Keystatic](https://keystatic.com/) is an open source, headless content-management system that allows you to structure your content and sync it with GitHub.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/keystatic/#prerequisites)

- An existing Astro project [with an adapter configured](https://docs.astro.build/en/guides/on-demand-rendering/).

## Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/keystatic/#installing-dependencies)

Add both the Markdoc (for content entries) and the React (for the Keystatic Admin UI Dashboard) integrations to your Astro project, using the `astro add` command for your package manager.

- [npm](https://docs.astro.build/en/guides/cms/keystatic/#tab-panel-3087)
- [pnpm](https://docs.astro.build/en/guides/cms/keystatic/#tab-panel-3088)
- [Yarn](https://docs.astro.build/en/guides/cms/keystatic/#tab-panel-3089)

```

npx astro add react markdoc
```

```

pnpm astro add react markdoc
```

```

yarn astro add react markdoc
```

You will also need two Keystatic packages:

- [npm](https://docs.astro.build/en/guides/cms/keystatic/#tab-panel-3090)
- [pnpm](https://docs.astro.build/en/guides/cms/keystatic/#tab-panel-3091)
- [Yarn](https://docs.astro.build/en/guides/cms/keystatic/#tab-panel-3092)

```

npm install @keystatic/core @keystatic/astro
```

```

pnpm add @keystatic/core @keystatic/astro
```

```

yarn add @keystatic/core @keystatic/astro
```

## Adding the Astro integration

[Section titled Adding the Astro integration](https://docs.astro.build/en/guides/cms/keystatic/#adding-the-astro-integration)

Add the Astro integration from `@keystatic/astro` in your Astro config file:

```

import { defineConfig } from 'astro/config'

import react from '@astrojs/react'

import markdoc from '@astrojs/markdoc'

import keystatic from '@keystatic/astro'

// https://astro.build/config

export default defineConfig({

  integrations: [react(), markdoc(), keystatic()],

  output: 'static',

})
```

## Creating a Keystatic config file

[Section titled Creating a Keystatic config file](https://docs.astro.build/en/guides/cms/keystatic/#creating-a-keystatic-config-file)

A Keystatic config file is required to define your content schema. This file will also allow you to connect a project to a specific GitHub repository (if you decide to do so).

Create a file called `keystatic.config.ts` in the root of the project and add the following code to define both your storage type ( `local`) and a single content collection ( `posts`):

```

import { config, fields, collection } from '@keystatic/core';

export default config({

  storage: {

    kind: 'local',

  },

  collections: {

    posts: collection({

      label: 'Posts',

      slugField: 'title',

      path: 'src/content/posts/*',

      format: { contentField: 'content' },

      schema: {

        title: fields.slug({ name: { label: 'Title' } }),

        content: fields.markdoc({

          label: 'Content',

        }),

      },

    }),

  },

});
```

Keystatic is now configured to manage your content based on your schema.

## Running Keystatic locally

[Section titled Running Keystatic locally](https://docs.astro.build/en/guides/cms/keystatic/#running-keystatic-locally)

To launch your Keystatic Admin UI dashboard, start Astro’s dev server:

```

npm run dev
```

Visit `http://127.0.0.1:4321/keystatic` in the browser to see the Keystatic Admin UI running.

## Creating a new post

[Section titled Creating a new post](https://docs.astro.build/en/guides/cms/keystatic/#creating-a-new-post)

1. In the Keystatic Admin UI dashboard, click on the “Posts” collection.

2. Use the button to create a new post. Add the title “My First Post” and some content, then save the post.

3. This post should now be visible from your “Posts” collection. You can view and edit your individual posts from this dashboard page.

4. Return to view your Astro project files. You will now find a new `.mdoc` file inside the `src/content/posts` directory for this new post:


- Directorysrc/


- Directorycontent/


- Directoryposts/


- **my-first-post.mdoc**

5. Navigate to that file in your code editor and verify that you can see the Markdown content you entered. For example:



```


   ---

title: My First Post

   ---




This is my very first post. I am **super** excited!
```


## Rendering Keystatic content

[Section titled Rendering Keystatic content](https://docs.astro.build/en/guides/cms/keystatic/#rendering-keystatic-content)

Use Astro’s Content Collections API to [query and display your posts and collections](https://docs.astro.build/en/guides/content-collections/#querying-collections), just as you would in any Astro project.

### Displaying a collection list

[Section titled Displaying a collection list](https://docs.astro.build/en/guides/cms/keystatic/#displaying-a-collection-list)

The following example displays a list of each post title, with a link to an individual post page.

```

---

import { getCollection } from 'astro:content'

const posts = await getCollection('posts')

---

<ul>

  {posts.map(post => (

    <li>

      <a href={`/posts/${post.slug}`}>{post.data.title}</a>

    </li>

  ))}

</ul>
```

### Displaying a single entry

[Section titled Displaying a single entry](https://docs.astro.build/en/guides/cms/keystatic/#displaying-a-single-entry)

To display content from an individual post, you can import and use the `<Content />` component to [render your content to HTML](https://docs.astro.build/en/guides/content-collections/#rendering-body-content):

```

---

import { getEntry } from 'astro:content'

const post = await getEntry('posts', 'my-first-post')

const { Content } = await post.render()

---

<main>

  <h1>{post.data.title}</h1>

  <Content />

</main>
```

For more information on querying, filtering, displaying your collections content and more, see the full content [collections documentation](https://docs.astro.build/en/guides/content-collections/).

## Deploying Keystatic + Astro

[Section titled Deploying Keystatic + Astro](https://docs.astro.build/en/guides/cms/keystatic/#deploying-keystatic--astro)

To deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

You’ll also probably want to [connect Keystatic to GitHub](https://keystatic.com/docs/connect-to-github) so you can manage content on the deployed instance of the project.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/keystatic/#official-resources)

- Check out [the official Keystatic guide](https://keystatic.com/docs/installation-astro)
- [Keystatic starter template](https://github.com/Thinkmill/keystatic/tree/main/templates/astro)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Deploy Astro on Heroku
[Skip to content](https://docs.astro.build/en/guides/deploy/heroku/#_top)

# Deploy your Astro Site to Heroku

[Heroku](https://www.heroku.com/) is a platform-as-a-service for building, running, and managing modern apps in the cloud. You can deploy an Astro site to Heroku using this guide.

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/heroku/#how-to-deploy)

1. Install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli).

2. Create a Heroku account by [signing up](https://signup.heroku.com/).

3. Run `heroku login` and fill in your Heroku credentials:



```


$ heroku login
```

4. Create a file called `static.json` in the root of your project with the below content:



```


{

     "root": "./dist"

}
```









This is the configuration of your site; read more at [heroku-buildpack-static](https://github.com/heroku/heroku-buildpack-static).

5. Set up your Heroku git remote:



```


# version change

$ git init

$ git add .

$ git commit -m "My site ready for deployment."




# creates a new app with a specified name

$ heroku apps:create example




# set buildpack for static sites

$ heroku buildpacks:set https://github.com/heroku/heroku-buildpack-static.git
```

6. Deploy your site:



```


# publish site

$ git push heroku master




# opens a browser to view the Dashboard version of Heroku CI

$ heroku open
```


## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Sanity and Astro
[Skip to content](https://docs.astro.build/en/guides/cms/sanity/#_top)

# Sanity & Astro

[Sanity](https://www.sanity.io/) is a headless content management system that focuses on [structured content](https://www.sanity.io/structured-content-platform).

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/sanity/#official-resources)

- [Official Sanity integration for Astro](https://www.sanity.io/plugins/sanity-astro)

- [Build your blog with Astro and Sanity](https://www.sanity.io/guides/sanity-astro-blog)

- [A minimal Astro site with a Sanity Studio](https://www.sanity.io/templates/astro-sanity-clean)


## Themes

[Section titled Themes](https://docs.astro.build/en/guides/cms/sanity/#themes)

- [![](https://docs.astro.build/_astro/astro-chef-project.CkjCJgM-_ZI34Cs.webp)The Balanced Chef](https://astro.build/themes/details/the-balanced-chef/)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fsanity%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=15680131)

## Deploy Astro to Zeabur
[Skip to content](https://docs.astro.build/en/guides/deploy/zeabur/#_top)

# Deploy your Astro Site to Zeabur

[Zeabur](https://zeabur.com/) offers hosting for full-stack web applications. Astro sites can be hosted as both SSR or static output.

This guide includes instructions for deploying to Zeabur through the website UI.

## Project Configuration

[Section titled Project Configuration](https://docs.astro.build/en/guides/deploy/zeabur/#project-configuration)

### Static Site

[Section titled Static Site](https://docs.astro.build/en/guides/deploy/zeabur/#static-site)

Astro outputs a static site by default. There is no need for any extra configuration to deploy a static Astro site to Zeabur.

### Adapter for SSR

[Section titled Adapter for SSR](https://docs.astro.build/en/guides/deploy/zeabur/#adapter-for-ssr)

To enable SSR in your Astro project and deploy on Zeabur:

1. Install [the `@zeabur/astro-adapter` adapter](https://www.npmjs.com/package/@zeabur/astro-adapter) to your project’s dependencies using your preferred package manager. If you’re using npm or aren’t sure, run this in the terminal:



```


     npm install @zeabur/astro-adapter
```

2. Add two new lines to your `astro.config.mjs` project configuration file.



```


import { defineConfig } from 'astro/config';

import zeabur from '@zeabur/astro-adapter/serverless';




export default defineConfig({

     output: 'server',

     adapter: zeabur(),

});
```


## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/zeabur/#how-to-deploy)

You can deploy your Astro site to Zeabur if the project is stored in GitHub.

1. Click `Create new project` in the [Zeabur dashboard](https://dash.zeabur.com/).

2. Configure GitHub installation and import the repository.

3. Zeabur will automatically detect that your project is an Astro project and will build it using the `astro build` command.

4. Once the build is complete, you can bind a domain to your site and visit it.


After your project has been imported and deployed, all subsequent pushes to branches will generate new builds.

Learn more about Zeabur’s [Deployment Guide](https://zeabur.com/docs/get-started/).

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fzeabur%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=90973684)

## Sharing State in Astro
[Skip to content](https://docs.astro.build/en/recipes/sharing-state/#_top)

# Share state between Astro components

When building an Astro website, you may need to share state across components. Astro recommends the use of [Nano Stores](https://github.com/nanostores/nanostores) for shared client storage.

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/sharing-state/#recipe)

1. Install Nano Stores:




- [npm](https://docs.astro.build/en/recipes/sharing-state/#tab-panel-1761)
- [pnpm](https://docs.astro.build/en/recipes/sharing-state/#tab-panel-1762)
- [Yarn](https://docs.astro.build/en/recipes/sharing-state/#tab-panel-1763)

```

npm install nanostores
```

```

pnpm add nanostores
```

```

yarn add nanostores
```

2. Create a store. In this example, the store tracks whether a dialog is open or not:



```


import { atom } from 'nanostores';




export const isOpen = atom(false);
```

3. Import and use the store in a `<script>` tag in the components that will share state.

The following `Button` and `Dialog` components each use the shared `isOpen` state to control whether a particular `<div>` is hidden or displayed:



```


<button id="openDialog">Open</button>




<script>

     import { isOpen } from '../store.js';




     // Set the store to true when the button is clicked

     function openDialog() {

       isOpen.set(true);

     }




     // Add an event listener to the button

     document.getElementById('openDialog').addEventListener('click', openDialog);

</script>
```











```


<div id="dialog" style="display: none">Hello world!</div>




<script>

     import { isOpen } from '../store.js';




     // Listen to changes in the store, and show/hide the dialog accordingly

     isOpen.subscribe(open => {

       if (open) {

         document.getElementById('dialog').style.display = 'block';

       } else {

         document.getElementById('dialog').style.display = 'none';

       }

     })

</script>
```


## Resources

[Section titled Resources](https://docs.astro.build/en/recipes/sharing-state/#resources)

- [Nano Stores on NPM](https://www.npmjs.com/package/nanostores)
- [Nano Stores documentation for Vanilla JS](https://github.com/nanostores/nanostores#vanilla-js)

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fsharing-state%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=22890250)

## Ghost CMS Integration
[Skip to content](https://docs.astro.build/en/guides/cms/ghost/#_top)

# Ghost & Astro

[Ghost](https://github.com/TryGhost/Ghost) is an open-source, headless content management system built on Node.js.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/ghost/#integrating-with-astro)

In this section, we’ll use the [Ghost content API](https://ghost.org/docs/content-api/) to bring your data into your Astro project.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/ghost/#prerequisites)

To get started you will need to have the following:

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **A Ghost site** \- It is assumed that you have a site set up with Ghost. If you don’t you can set one up on a [local environment.](https://ghost.org/docs/install/local/)

3. **Content API Key** \- You can make an integration under your site’s `Settings > Integrations`. From there you can find your `Content API key`


### Setting up credentials

[Section titled Setting up credentials](https://docs.astro.build/en/guides/cms/ghost/#setting-up-credentials)

To add your site’s credentials to Astro, create an `.env` file in the root of your project with the following variable:

```

CONTENT_API_KEY=YOUR_API_KEY
```

Now, you should be able to use this environment variable in your project.

If you would like to have IntelliSense for your environment variable, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:

```

interface ImportMetaEnv {

  readonly CONTENT_API_KEY: string;

}
```

Your root directory should now include these new files:

- Directorysrc/


- **env.d.ts**

- **.env**
- astro.config.mjs
- package.json

### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/ghost/#installing-dependencies)

To connect with Ghost, install the official content API wrapper [`@tryghost/content-api`](https://www.npmjs.com/package/@tryghost/content-api) using the command below for your preferred package manager, and optionally, a helpful package containing type definitions if you are using TypeScript:

- [npm](https://docs.astro.build/en/guides/cms/ghost/#tab-panel-3078)
- [pnpm](https://docs.astro.build/en/guides/cms/ghost/#tab-panel-3079)
- [Yarn](https://docs.astro.build/en/guides/cms/ghost/#tab-panel-3080)

```

npm install @tryghost/content-api

npm install --save @types/tryghost__content-api
```

```

pnpm add @tryghost/content-api

pnpm add --save-dev @types/tryghost__content-api
```

```

yarn add @tryghost/content-api

yarn add --dev @types/tryghost__content-api
```

## Making a blog with Astro and Ghost

[Section titled Making a blog with Astro and Ghost](https://docs.astro.build/en/guides/cms/ghost/#making-a-blog-with-astro-and-ghost)

With the setup above, you are now able to create a blog that uses Ghost as the CMS.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/ghost/#prerequisites-1)

1. A Ghost blog
2. An Astro project integrated with the [Ghost content API](https://www.npmjs.com/package/@tryghost/content-api) \- See [integrating with Astro](https://docs.astro.build/en/guides/cms/ghost/#integrating-with-astro) for more details on how to set up an Astro project with Ghost.

This example will create an index page that lists posts with links to dynamically-generated individual post pages.

### Fetching Data

[Section titled Fetching Data](https://docs.astro.build/en/guides/cms/ghost/#fetching-data)

You can fetch your site’s data with the Ghost content API package.

First, create a `ghost.ts` file under a `lib` directory.

- Directorysrc/


- Directorylib/


- **ghost.ts**

- Directorypages/


- index.astro

- astro.config.mjs
- package.json

Initialize an API instance with the Ghost API using the API key from the Ghost dashboard’s Integrations page.

```

import GhostContentAPI from '@tryghost/content-api';

// Create API instance with site credentials

export const ghostClient = new GhostContentAPI({

    url: 'http://127.0.0.1:2368', // This is the default URL if your site is running on a local environment

    key: import.meta.env.CONTENT_API_KEY,

    version: 'v5.0',

});
```

### Displaying a list of posts

[Section titled Displaying a list of posts](https://docs.astro.build/en/guides/cms/ghost/#displaying-a-list-of-posts)

The page `src/pages/index.astro` will display a list of posts, each with a description and link to its own page.

- Directorysrc/


- Directorylib/


- ghost.ts

- Directorypages/


- **index.astro**

- astro.config.mjs
- package.json

Import `ghostClient()` in the Astro frontmatter to use the `posts.browse()` method to access blog posts from Ghost. Set `limit: all` to retrieve all posts.

```

---

import { ghostClient } from '../lib/ghost';

const posts = await ghostClient.posts

    .browse({

        limit: 'all',

    })

    .catch((err) => {

        console.error(err);

    });

---
```

Fetching via the content API returns an array of objects containing the [properties for each post](https://ghost.org/docs/content-api/#posts) such as:

- `title` \- the title of the post
- `html` \- the HTML rendering of the content of the post
- `feature_image` \- the source URL of the featured image of the post
- `slug` \- the slug of the post

Use the `posts` array returned from the fetch to display a list of blog posts on the page.

```

---

import { ghostClient } from '../lib/ghost';

const posts = await ghostClient.posts

    .browse({

        limit: 'all',

    })

    .catch((err) => {

        console.error(err);

    });

---

<html lang="en">

    <head>

        <title>Astro + Ghost 👻</title>

    </head>

    <body>

        {

            posts.map((post) => (

                <a href={`/post/${post.slug}`}>

                    <h1> {post.title} </h1>

                </a>

            ))

        }

    </body>

</html>
```

### Generating pages

[Section titled Generating pages](https://docs.astro.build/en/guides/cms/ghost/#generating-pages)

The page `src/pages/post/[slug].astro` [dynamically generates a page](https://docs.astro.build/en/guides/routing/#dynamic-routes) for each post.

- Directorysrc/


- Directorylib/


- ghost.ts

- Directorypages/


- index.astro
- Directorypost/


- **\[slug\].astro**

- astro.config.mjs
- package.json

Import `ghostClient()` to access blog posts using `posts.browse()` and return a post as props to each of your dynamic routes.

```

---

import { ghostClient } from '../../lib/ghost';

export async function getStaticPaths() {

    const posts = await ghostClient.posts

        .browse({

            limit: 'all',

        })

        .catch((err) => {

            console.error(err);

        });

    return posts.map((post) => {

        return {

            params: {

                slug: post.slug,

            },

            props: {

                post: post,

            },

        };

    });

}

const { post } = Astro.props;

---
```

Create the template for each page using the properties of each `post` object.

```

---

import { ghostClient } from '../../lib/ghost';

export async function getStaticPaths() {

    const posts = await ghostClient.posts

        .browse({

            limit: 'all',

        })

        .catch((err) => {

            console.error(err);

        });

    return posts.map((post) => {

        return {

            params: {

                slug: post.slug,

            },

            props: {

                post: post,

            },

        };

    });

}

const { post } = Astro.props;

---

<!DOCTYPE html>

<html lang="en">

    <head>

        <title>{post.title}</title>

    </head>

    <body>

        <img src={post.feature_image} alt={post.title} />

        <h1>{post.title}</h1>

        <p>{post.reading_time} min read</p>

        <Fragment set:html={post.html} />

    </body>

</html>
```

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/ghost/#publishing-your-site)

To deploy your site visit our [deployment guide](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/ghost/#community-resources)

[Ghost CMS & Astro Tutorial](https://matthiesen.xyz/blog/astro-ghostcms)

[Astro + Ghost + Tailwind CSS](https://andr.ec/posts/astro-ghost-blog/)

[Building a Corporate site with Astro and Ghost](https://artabric.com/post/building-a-corporate-site-with-astro-and-ghost/)

[\`astro-starter-ghost\`](https://github.com/PhilDL/astro-starter-ghost)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Setup Guide
[Skip to content](https://docs.astro.build/en/tutorial/1-setup/#_top)

# Check in: Unit 1 - Setup

Now that you know what you’re going to build, it’s time to set up all the tools you’ll need!

This unit shows you how to set up your development environment and deploy to Netlify. Skip ahead to [Unit 2](https://docs.astro.build/en/tutorial/2-pages/) if you are already comfortable with your environment and workflow.

## Where are you going?

[Section titled Where are you going?](https://docs.astro.build/en/tutorial/1-setup/#where-are-you-going)

In this unit, you will **create a new project** that is **stored online in GitHub** and **connected to Netlify**.

As you write code, you will periodically commit your changes to GitHub. Netlify will use the files in your GitHub repository to build your website, and then publish it on the internet at a unique address where anyone can view it.

Every time you commit a change to GitHub, a notification will be sent to Netlify. Then, Netlify will automatically rebuild and republish your live site to reflect those changes.

## Checklist

[Section titled Checklist](https://docs.astro.build/en/tutorial/1-setup/#checklist)

- I’m ready to prepare a development environment for an Astro project!

Tutorials

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Pages Tutorial
[Skip to content](https://docs.astro.build/en/tutorial/2-pages/#_top)

# Check in: Unit 2 - Pages

Now that you have a working site on the web, it’s time to add pages and posts!

## Looking ahead

[Section titled Looking ahead](https://docs.astro.build/en/tutorial/2-pages/#looking-ahead)

In this unit, you will:

- Create your first Astro pages with the `.astro` syntax
- Add blog posts with Markdown ( `.md`) files
- Style an individual page with `<style>`
- Apply global styles across pages

Along the way, you’ll learn how the **two sections of a `.astro` file** work together to create a page, and how to use variables and conditional rendering on your pages.

## Checklist

[Section titled Checklist](https://docs.astro.build/en/tutorial/2-pages/#checklist)

- I am ready to make some new pages for my Astro website!

Tutorials

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Call Server Endpoints
[Skip to content](https://docs.astro.build/en/recipes/call-endpoints/#_top)

# Call endpoints from the server

Endpoints can be used to serve many kinds of data. This recipe calls a server endpoint from a page’s component script to display a greeting, without requiring an additional fetch request.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/recipes/call-endpoints/#prerequisites)

- A project with [SSR](https://docs.astro.build/en/guides/on-demand-rendering/) (output: ‘server’) enabled

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/call-endpoints/#recipe)

1. Create an endpoint in a new file `src/pages/api/hello.ts` that returns some data:



```


import type { APIRoute } from 'astro'




export const GET: APIRoute = () => {

     return new Response(

       JSON.stringify({

         greeting: 'Hello',

       }),

     )

}
```

2. On any Astro page, import the `GET()` method from the endpoint. Call it with the [`Astro` global](https://docs.astro.build/en/reference/api-reference/) to provide the request context, and use the response on the page:



```


   ---

import { GET } from './api/hello.ts'




let response = await GET(Astro)

const data = await response.json()

   ---




<h1>{data.greeting} world!</h1>
```


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fcall-endpoints%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=8277113)

## Directus and Astro Integration
[Skip to content](https://docs.astro.build/en/guides/cms/directus/#_top)

# Directus & Astro

[Directus](https://directus.io/) is a backend-as-a-service which can be used to host data and content for your Astro project.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/directus/#official-resources)

- [Getting Started with Directus and Astro](https://docs.directus.io/blog/getting-started-directus-astro.html).

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/directus/#community-resources)

[Using Directus CMS with Neon Postgres and Astro to build a blog](https://neon.tech/guides/directus-cms)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fdirectus%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=10670124)

## Astro Web Framework
[Skip to content](https://docs.astro.build/en/concepts/why-astro/#_top)

# Why Astro?

**Astro** is the web framework for building **content-driven websites** like blogs, marketing, and e-commerce. Astro is best-known for pioneering a new [frontend architecture](https://docs.astro.build/en/concepts/islands/) to reduce JavaScript overhead and complexity compared to other frameworks. If you need a website that loads fast and has great SEO, then Astro is for you.

## Features

[Section titled Features](https://docs.astro.build/en/concepts/why-astro/#features)

**Astro is an all-in-one web framework.** It includes everything you need to create a website, built-in. There are also hundreds of different [integrations](https://astro.build/integrations/) and [API hooks](https://docs.astro.build/en/reference/integrations-reference/) available to customize a project to your exact use case and needs.

Some highlights include:

- **[Islands](https://docs.astro.build/en/concepts/islands/):** A component-based web architecture optimized for content-driven websites.
- **[UI-agnostic](https://docs.astro.build/en/guides/framework-components/):** Supports React, Preact, Svelte, Vue, Solid, HTMX, web components, and more.
- **[Server-first](https://docs.astro.build/en/guides/on-demand-rendering/):** Moves expensive rendering off of your visitors’ devices.
- **[Zero JS, by default](https://docs.astro.build/en/basics/astro-components/):** Less client-side JavaScript to slow your site down.
- **[Content collections](https://docs.astro.build/en/guides/content-collections/):** Organize, validate, and provide TypeScript type-safety for your Markdown content.
- **[Customizable](https://docs.astro.build/en/guides/integrations-guide/):** Partytown, MDX, and hundreds of integrations to choose from.

## Design Principles

[Section titled Design Principles](https://docs.astro.build/en/concepts/why-astro/#design-principles)

Here are five core design principles to help explain why we built Astro, the problems that it exists to solve, and why Astro may be the best choice for your project or team.

Astro is…

1. **[Content-driven](https://docs.astro.build/en/concepts/why-astro/#content-driven):** Astro was designed to showcase your content.
2. **[Server-first](https://docs.astro.build/en/concepts/why-astro/#server-first):** Websites run faster when they render HTML on the server.
3. **[Fast by default](https://docs.astro.build/en/concepts/why-astro/#fast-by-default):** It should be impossible to build a slow website in Astro.
4. **[Easy to use](https://docs.astro.build/en/concepts/why-astro/#easy-to-use):** You don’t need to be an expert to build something with Astro.
5. **[Developer-focused](https://docs.astro.build/en/concepts/why-astro/#developer-focused):** You should have the resources you need to be successful.

### Content-driven

[Section titled Content-driven](https://docs.astro.build/en/concepts/why-astro/#content-driven)

**Astro was designed for building content-rich websites.** This includes marketing sites, publishing sites, documentation sites, blogs, portfolios, landing pages, community sites, and e-commerce sites. If you have content to show, it needs to reach your reader quickly.

By contrast, most modern web frameworks were designed for building _web applications_. These frameworks excel at building more complex, application-like experiences in the browser: logged-in admin dashboards, inboxes, social networks, todo lists, and even native-like applications like [Figma](https://figma.com/) and [Ping](https://ping.gg/). However with that complexity, they can struggle to provide great performance when delivering your content.

Astro’s focus on content from its beginnings as a static site builder have allowed Astro to **sensibly scale up to performant, powerful, dynamic web applications** that still respect your content and your audience. Astro’s unique focus on content lets Astro make tradeoffs and deliver unmatched performance features that wouldn’t make sense for more application-focused web frameworks to implement.

### Server-first

[Section titled Server-first](https://docs.astro.build/en/concepts/why-astro/#server-first)

**Astro leverages server rendering over client-side rendering in the browser as much as possible.** This is the same approach that traditional server-side frameworks -- PHP, WordPress, Laravel, Ruby on Rails, etc. -- have been using for decades. But you don’t need to learn a second server-side language to unlock it. With Astro, everything is still just HTML, CSS, and JavaScript (or TypeScript, if you prefer).

This approach stands in contrast to other modern JavaScript web frameworks like Next.js, SvelteKit, Nuxt, Remix, and others. These frameworks were built for client-side rendering of your entire website and include server-side rendering mainly to address performance concerns. This approach has been dubbed the **Single-Page App (SPA)**, in contrast with Astro’s **Multi-Page App (MPA)** approach.

The SPA model has its benefits. However, these come at the expense of additional complexity and performance tradeoffs. These tradeoffs harm page performance -- critical metrics like [Time to Interactive (TTI)](https://web.dev/interactive/) \-\- which doesn’t make much sense for content-focused websites where first-load performance is essential.

Astro’s server-first approach allows you to opt in to client-side rendering only if, and exactly as, necessary. You can choose to add UI framework components that run on the client. You can take advantage of Astro’s view transitions router for finer control over select page transitions and animations. Astro’s server-first rendering, either pre-rendered or on-demand, provides performant defaults that you can enhance and extend.

### Fast by default

[Section titled Fast by default](https://docs.astro.build/en/concepts/why-astro/#fast-by-default)

Good performance is always important, but it is _especially_ critical for websites whose success depends on displaying your content. It has been well-proven that poor performance loses you engagement, conversions, and money. For example:

- Every 100ms faster → 1% more conversions ( [Mobify](https://web.dev/why-speed-matters/), earning +$380,000/yr)
- 50% faster → 12% more sales ( [AutoAnything](https://www.digitalcommerce360.com/2010/08/19/web-accelerator-revs-conversion-and-sales-autoanything/))
- 20% faster → 10% more conversions ( [Furniture Village](https://www.thinkwithgoogle.com/intl/en-gb/marketing-strategies/app-and-mobile/furniture-village-and-greenlight-slash-page-load-times-boosting-user-experience/))
- 40% faster → 15% more sign-ups ( [Pinterest](https://medium.com/pinterest-engineering/driving-user-growth-with-performance-improvements-cfc50dafadd7))
- 850ms faster → 7% more conversions ( [COOK](https://web.dev/why-speed-matters/))
- Every 1 second slower → 10% fewer users ( [BBC](https://www.creativebloq.com/features/how-the-bbc-builds-websites-that-scale))

In many web frameworks, it is easy to build a website that looks great during development only to load painfully slow once deployed. JavaScript is often the culprit, since many phones and lower-powered devices rarely match the speed of a developer’s laptop.

Astro’s magic is in how it combines the two values explained above -- a content focus with a server-first architecture -- to make tradeoffs and deliver features that other frameworks cannot. The result is amazing web performance for every website, out of the box. Our goal: **It should be nearly impossible to build a slow website with Astro.**

An Astro website can [load 40% faster with 90% less JavaScript](https://twitter.com/t3dotgg/status/1437195415439360003) than the same site built with the most popular React web framework. But don’t take our word for it: watch Astro’s performance leave Ryan Carniato (creator of Solid.js and Marko) [speechless](https://youtu.be/2ZEMb_H-LYE?t=8163).

### Easy to use

[Section titled Easy to use](https://docs.astro.build/en/concepts/why-astro/#easy-to-use)

**Astro’s goal is to be accessible to every web developer.** Astro was designed to feel familiar and approachable regardless of skill level or past experience with web development.

The `.astro` UI language is a superset of HTML: any valid HTML is valid Astro templating syntax! So, if you can write HTML, you can write Astro components! But, it also combines some of our favorite features borrowed from other component languages like JSX expressions (React) and CSS scoping by default (Svelte and Vue). This closeness to HTML also makes it easier to use progressive enhancement and common accessibility patterns without any overhead.

We then made sure that you could also use your favorite UI component languages that you already know, and even reuse components you might already have. React, Preact, Svelte, Vue, Solid, and others, including web components, are all supported for authoring UI components in an Astro project.

Astro was designed to be less complex than other UI frameworks and languages. One big reason for this is that Astro was designed to render on the server, not in the browser. That means that you don’t need to worry about: hooks (React), stale closures (also React), refs (Vue), observables (Svelte), atoms, selectors, reactions, or derivations. There is no reactivity on the server, so all of that complexity melts away.

One of our favorite sayings is: **opt in to complexity.** We designed Astro to remove as much “required complexity” as possible from the developer experience, especially as you onboard for the first time. You can build a “Hello World” example website in Astro with just HTML and CSS. Then, when you need to build something more powerful, you can incrementally reach for new features and APIs as you go.

### Developer-focused

[Section titled Developer-focused](https://docs.astro.build/en/concepts/why-astro/#developer-focused)

We strongly believe that Astro is only a successful project if people love using it. Astro has everything you need to support you as you build with Astro.

Astro invests in developer tools like a great CLI experience from the moment you open your terminal, an official VS Code extension for syntax highlighting, TypeScript and Intellisense, and documentation actively maintained by hundreds of community contributors and available in 14 languages.

Our welcoming, respectful, inclusive community on Discord is ready to provide support, motivation, and encouragement. Open a `#support` thread to get help with your project. Visit our dedicated `#showcase` channel for sharing your Astro sites, blog posts, videos, and even work-in-progress for safe feedback and constructive criticism. Participate in regular live events such as our weekly community call, “Talking and Doc’ing,” and API/bug bashes.

As an open-source project, we welcome contributions of all types and sizes from community members of all experience levels. You are invited to join in roadmap discussions to shape the future of Astro, and we hope you’ll contribute fixes and features to the core codebase, compiler, docs, language tools, websites, and other projects.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Build Forms in Astro
[Skip to content](https://docs.astro.build/en/recipes/build-forms/#_top)

# Build HTML forms in Astro pages

Astro pages that are rendered on demand can both display and handle forms. In this recipe, you’ll use a standard HTML form to submit data to the server. Your frontmatter script will handle the data on the server, sending no JavaScript to the client.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/recipes/build-forms/#prerequisites)

- An Astro project with a [server adapter](https://docs.astro.build/en/guides/on-demand-rendering/#server-adapters) installed.

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/build-forms/#recipe)

1. Create or identify a `.astro` page which will contain your form and your handling code. For example, you could add a registration page:



```


   ---

   ---

<h1>Register</h1>
```

2. Add a `<form>` tag with some inputs to the page. Each input should have a `name` attribute that describes the value of that input.

Be sure to include a `<button>` or `<input type="submit">` element to submit the form.



```


   ---

   ---

<h1>Register</h1>

<form>

     <label>

       Username:

       <input type="text" name="username" />

     </label>

     <label>

       Email:

       <input type="email" name="email" />

     </label>

     <label>

       Password:

       <input type="password" name="password" />

     </label>

     <button>Submit</button>

</form>
```

3. Use [validation attributes](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation) to provide basic client-side validation that works even if JavaScript is disabled.

In this example,


   - `required` prevents form submission until the field is filled.
   - `minlength` sets a minimum required length for the input text.
   - `type="email"` also introduces validation that will only accept a valid email format.

```

---

---

<h1>Register</h1>

<form>

  <label>

    Username:

    <input type="text" name="username" required />

  </label>

  <label>

    Email:

    <input type="email" name="email" required />

  </label>

  <label>

    Password:

    <input type="password" name="password" required minlength="6" />

  </label>

  <button>Submit</button>

</form>
```

4. The form submission will cause the browser to request the page again. Change the form’s data transfer `method` to `POST` to send the form data as part of the `Request` body, rather than as URL parameters.



```


   ---

   ---

<h1>Register</h1>

<form method="POST">

     <label>

       Username:

       <input type="text" name="username" required />

     </label>

     <label>

       Email:

       <input type="email" name="email" required />

     </label>

     <label>

       Password:

       <input type="password" name="password" required minlength="6" />

     </label>

     <button>Submit</button>

</form>
```

5. Check for the `POST` method in the frontmatter and access the form data using `Astro.request.formData()`. Wrap this in a `try ... catch` block to handle cases when the `POST` request wasn’t sent by a form and the `formData` is invalid.



```


   ---

if (Astro.request.method === "POST") {

     try {

       const data = await Astro.request.formData();

       const name = data.get("username");

       const email = data.get("email");

       const password = data.get("password");

       // Do something with the data

     } catch (error) {

       if (error instanceof Error) {

         console.error(error.message);

       }

     }

}

   ---

<h1>Register</h1>

<form method="POST">

     <label>

       Username:

       <input type="text" name="username" required />

     </label>

     <label>

       Email:

       <input type="email" name="email" required />

     </label>

     <label>

       Password:

       <input type="password" name="password" required minlength="6" />

     </label>

     <button>Submit</button>

</form>
```

6. Validate the form data on the server. This should include the same validation done on the client to prevent malicious submissions to your endpoint and to support the rare legacy browser that doesn’t have form validation.

It can also include validation that can’t be done on the client. For example, this example checks if the email is already in the database.

Error messages can be sent back to the client by storing them in an `errors` object and accessing it in the template.



```


   ---

import { isRegistered, registerUser } from "../../data/users"

import { isValidEmail } from "../../utils/isValidEmail";




const errors = { username: "", email: "", password: "" };

if (Astro.request.method === "POST") {

     try {

       const data = await Astro.request.formData();

       const name = data.get("username");

       const email = data.get("email");

       const password = data.get("password");

       if (typeof name !== "string" || name.length < 1) {

         errors.username += "Please enter a username. ";

       }

       if (typeof email !== "string" || !isValidEmail(email)) {

         errors.email += "Email is not valid. ";

       } else if (await isRegistered(email)) {

         errors.email += "Email is already registered. ";

       }

       if (typeof password !== "string" || password.length < 6) {

         errors.password += "Password must be at least 6 characters. ";

       }

       const hasErrors = Object.values(errors).some(msg => msg)

       if (!hasErrors) {

         await registerUser({name, email, password});

         return Astro.redirect("/login");

       }

     } catch (error) {

       if (error instanceof Error) {

         console.error(error.message);

       }

     }

}

   ---

<h1>Register</h1>

<form method="POST">

     <label>

       Username:

       <input type="text" name="username" />

     </label>

     {errors.username && <p>{errors.username}</p>}

     <label>

       Email:

       <input type="email" name="email" required />

     </label>

     {errors.email && <p>{errors.email}</p>}

     <label>

       Password:

       <input type="password" name="password" required minlength="6" />

     </label>

     {errors.password && <p>{errors.password}</p>}

     <button>Register</button>

</form>
```


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fbuild-forms%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=61481256)

## Neon Postgres Integration
[Skip to content](https://docs.astro.build/en/guides/backend/neon/#_top)

# Neon Postgres & Astro

[Neon](https://neon.tech/) is a fully managed serverless Postgres database. It separates storage and compute to offer autoscaling, branching, and bottomless storage.

## Adding Neon to your Astro project

[Section titled Adding Neon to your Astro project](https://docs.astro.build/en/guides/backend/neon/#adding-neon-to-your-astro-project)

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/backend/neon/#prerequisites)

- A [Neon](https://console.neon.tech/signup) account with a created project
- Neon database connection string
- An Astro project with [on-demand rendering (SSR)](https://docs.astro.build/en/guides/on-demand-rendering/) enabled

### Environment configuration

[Section titled Environment configuration](https://docs.astro.build/en/guides/backend/neon/#environment-configuration)

To use Neon with Astro, you will need to set a Neon environment variable. Create or edit the `.env` file in your project root, and add the following code, replacing your own project details:

```

NEON_DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"
```

For better TypeScript support, define environment variables in a `src/env.d.ts` file:

```

interface ImportMetaEnv {

  readonly NEON_DATABASE_URL: string;

}

interface ImportMeta {

  readonly env: ImportMetaEnv;

}
```

Learn more about [environment variables](https://docs.astro.build/en/guides/environment-variables/) and `.env` files in Astro.

### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/backend/neon/#installing-dependencies)

Install the `@neondatabase/serverless` package to connect to Neon:

```

npm install @neondatabase/serverless
```

### Creating a Neon client

[Section titled Creating a Neon client](https://docs.astro.build/en/guides/backend/neon/#creating-a-neon-client)

Create a new file `src/lib/neon.ts` with the following code to initialize your Neon client:

```

import { neon } from '@neondatabase/serverless';

export const sql = neon(import.meta.env.NEON_DATABASE_URL);
```

## Querying your Neon database

[Section titled Querying your Neon database](https://docs.astro.build/en/guides/backend/neon/#querying-your-neon-database)

You can now use the Neon client to query your database from any `.astro` component. The following example fetches the current time from the Postgres database:

```

---

import { sql } from '../lib/neon';

const response =  await  sql`SELECT NOW() as current_time`;

const currentTime = response[0].current_time;

---

<h1>Current Time</h1>

<p>The time is: {currentTime}</p>
```

## Database branching with Neon

[Section titled Database branching with Neon](https://docs.astro.build/en/guides/backend/neon/#database-branching-with-neon)

Neon’s branching feature lets you create copies of your database for development or testing. Use this in your Astro project by creating different environment variables for each branch:

```

NEON_DATABASE_URL=your_development_branch_url
```

```

NEON_DATABASE_URL=your_production_branch_url
```

## Resources

[Section titled Resources](https://docs.astro.build/en/guides/backend/neon/#resources)

- [Neon documentation](https://neon.tech/docs/introduction)
- [Neon serverless driver GitHub](https://github.com/neondatabase/serverless)
- [Connect an Astro site or application to Neon Postgres](https://neon.tech/docs/guides/astro)

## More backend service guides

- ![](https://docs.astro.build/logos/appwriteio.svg)



### [Appwrite](https://docs.astro.build/en/guides/backend/appwriteio/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Firebase](https://docs.astro.build/en/guides/backend/google-firebase/)

- ![](https://docs.astro.build/logos/neon.svg)



### [Neon](https://docs.astro.build/en/guides/backend/neon/)

- ![](https://docs.astro.build/logos/sentry.svg)



### [Sentry](https://docs.astro.build/en/guides/backend/sentry/)

- ![](https://docs.astro.build/logos/supabase.svg)



### [Supabase](https://docs.astro.build/en/guides/backend/supabase/)

- ![](https://docs.astro.build/logos/turso.svg)



### [Turso](https://docs.astro.build/en/guides/backend/turso/)

- ![](https://docs.astro.build/logos/xata.svg)



### [Xata](https://docs.astro.build/en/guides/backend/xata/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fbackend%2Fneon%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=4466993)

## Last Modified Time
[Skip to content](https://docs.astro.build/en/recipes/modified-time/#_top)

# Add last modified time

Learn how to build a [remark plugin](https://github.com/remarkjs/remark) that adds the last modified time to the frontmatter of your Markdown and MDX files. Use this property to display the modified time in your pages.

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/modified-time/#recipe)

1. Install Helper Packages

Install [`Day.js`](https://www.npmjs.com/package/dayjs) to modify and format times:




- [npm](https://docs.astro.build/en/recipes/modified-time/#tab-panel-1723)
- [pnpm](https://docs.astro.build/en/recipes/modified-time/#tab-panel-1724)
- [Yarn](https://docs.astro.build/en/recipes/modified-time/#tab-panel-1725)

```

npm install dayjs
```

```

pnpm add dayjs
```

```

yarn add dayjs
```

2. Create a Remark Plugin

This plugin uses `execSync` to run a Git command that returns the timestamp of the latest commit in ISO 8601 format. The timestamp is then added to the frontmatter of the file.



```


import { execSync } from "child_process";




export function remarkModifiedTime() {

     return function (tree, file) {

       const filepath = file.history[0];

       const result = execSync(`git log -1 --pretty="format:%cI" "${filepath}"`);

       file.data.astro.frontmatter.lastModified = result.toString();

     };

}
```








Using the file system instead of Git

Although using Git is the recommended way to get the last modified timestamp from a file, it is possible to use the file system modified time.
This plugin uses `statSync` to get the `mtime` (modified time) of the file in ISO 8601 format. The timestamp is then added to the frontmatter of the file.





```


import { statSync } from "fs";




export function remarkModifiedTime() {

     return function (tree, file) {

       const filepath = file.history[0];

       const result = statSync(filepath);

       file.data.astro.frontmatter.lastModified = result.mtime.toISOString();

     };

}
```

3. Add the plugin to your config



```


import { defineConfig } from 'astro/config';

import { remarkModifiedTime } from './remark-modified-time.mjs';




export default defineConfig({

     markdown: {

       remarkPlugins: [remarkModifiedTime],

     },

});
```









Now all Markdown documents will have a `lastModified` property in their frontmatter.

4. Display Last Modified Time

If your content is stored in a [content collection](https://docs.astro.build/en/guides/content-collections/), access the `remarkPluginFrontmatter` from the `render(entry)` function. Then render `lastModified` in your template wherever you would like it to appear.



```


   ---

import { getCollection, render } from 'astro:content';

import dayjs from "dayjs";

import utc from "dayjs/plugin/utc";




dayjs.extend(utc);




export async function getStaticPaths() {

     const blog = await getCollection('blog');

     return blog.map(entry => ({

       params: { slug: entry.id },

       props: { entry },

     }));

}




const { entry } = Astro.props;

const { Content, remarkPluginFrontmatter } = await render(entry);




const lastModified = dayjs(remarkPluginFrontmatter.lastModified)

     .utc()

     .format("HH:mm:ss DD MMMM YYYY UTC");

   ---




<html>

     <head>...</head>

     <body>

       ...

       <p>Last Modified: {lastModified}</p>

       ...

     </body>

</html>
```









If you’re using a [Markdown layout](https://docs.astro.build/en/basics/layouts/#markdown-layouts), use the `lastModified` frontmatter property from `Astro.props` in your layout template.



```


   ---

import dayjs from "dayjs";

import utc from "dayjs/plugin/utc";




dayjs.extend(utc);




const lastModified = dayjs()

     .utc(Astro.props.frontmatter.lastModified)

     .format("HH:mm:ss DD MMMM YYYY UTC");

   ---




<html>

     <head>...</head>

     <body>

       <p>{lastModified}</p>

       <slot />

     </body>

</html>
```


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Content Collections
[Skip to content](https://docs.astro.build/en/guides/content-collections/#_top)

# Content collections

**Added in:** `astro@2.0.0`

**Content collections** are the best way to manage sets of content in any Astro project. Collections help to organize and query your documents, enable Intellisense and type checking in your editor, and provide automatic TypeScript type-safety for all of your content.
Astro v5.0 introduced the Content Layer API for defining and querying content collections. This performant, scalable API provides built-in content loaders for your local collections. For remote content, you can use third-party and community-built loaders or create your own custom loader and pull in your data from any source.

## What are Content Collections?

[Section titled What are Content Collections?](https://docs.astro.build/en/guides/content-collections/#what-are-content-collections)

You can define a **collection** from a set of data that is structurally similar. This can be a directory of blog posts, a JSON file of product items, or any data that represents multiple items of the same shape.

Collections stored locally in your project or on your filesystem can have entries of Markdown, MDX, Markdoc, YAML, or JSON files:

- Directorysrc/

- …

- Directory **newsletter/** the “newsletter” collection


- week-1.mda collection entry
- week-2.mda collection entry
- week-3.mda collection entry

- Directory **authors/** the “author” collection


- authors.jsona single file containing all collection entries

With an appropriate collection loader, you can fetch remote data from any external source, such as a CMS, database, or headless payment system.

## TypeScript configuration for collections

[Section titled TypeScript configuration for collections](https://docs.astro.build/en/guides/content-collections/#typescript-configuration-for-collections)

Content collections rely on TypeScript to provide Zod validation, Intellisense and type checking in your editor. If you are not extending one of Astro’s `strict` or `strictest` TypeScript settings, you will need to ensure the following `compilerOptions` are set in your `tsconfig.json`:

```

{

  // Included with "astro/tsconfigs/strict" or "astro/tsconfigs/strictest"

  "extends": "astro/tsconfigs/base",

  "compilerOptions": {

    "strictNullChecks": true, // add if using `base` template

    "allowJs": true // required, and included with all Astro templates

  }

}
```

## Defining Collections

[Section titled Defining Collections](https://docs.astro.build/en/guides/content-collections/#defining-collections)

Individual collections use `defineCollection()` to configure:

- a `loader` for a data source (required)
- a `schema` for type safety (optional, but highly recommended!)

### The collection config file

[Section titled The collection config file](https://docs.astro.build/en/guides/content-collections/#the-collection-config-file)

To define collections, you must create a `src/content.config.ts` file in your project ( `.js` and `.mjs` extensions are also supported.) This is a special file that Astro will use to configure your content collections based on the following structure:

```

// 1. Import utilities from `astro:content`

import { defineCollection, z } from 'astro:content';

// 2. Import loader(s)

import { glob, file } from 'astro/loaders';

// 3. Define your collection(s)

const blog = defineCollection({ /* ... */ });

const dogs = defineCollection({ /* ... */ });

// 4. Export a single `collections` object to register your collection(s)

export const collections = { blog, dogs };
```

### Defining the collection `loader`

[Section titled Defining the collection loader](https://docs.astro.build/en/guides/content-collections/#defining-the-collection-loader)

The Content Layer API allows you to fetch your content (whether stored locally in your project or remotely) and uses a `loader` property to retrieve your data.

#### Built-in loaders

[Section titled Built-in loaders](https://docs.astro.build/en/guides/content-collections/#built-in-loaders)

Astro provides [two built-in loader functions](https://docs.astro.build/en/reference/content-loader-reference/#built-in-loaders) ( `glob()` and `file()`) for fetching your local content, as well as access to the API to construct your own loader and fetch remote data.

The [`glob()` loader](https://docs.astro.build/en/reference/content-loader-reference/#glob-loader) creates entries from directories of Markdown, MDX, Markdoc, JSON, or YAML files from anywhere on the filesystem. It accepts a `pattern` of entry files to match using glob patterns supported by [micromatch](https://github.com/micromatch/micromatch#matching-features), and a base file path of where your files are located. Each entry’s `id` will be automatically generated from its file name. Use this loader when you have one file per entry.

The [`file()` loader](https://docs.astro.build/en/reference/content-loader-reference/#file-loader) creates multiple entries from a single local file. Each entry in the file must have a unique `id` key property. It accepts a `base` file path to your file and optionally a [`parser` function](https://docs.astro.build/en/guides/content-collections/#parser-function) for data files it cannot parse automatically. Use this loader when your data file can be parsed as an array of objects.

```

import { defineCollection, z } from 'astro:content';

import { glob, file } from 'astro/loaders'; // Not available with legacy API

const blog = defineCollection({

  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),

  schema: /* ... */

});

const dogs = defineCollection({

  loader: file("src/data/dogs.json"),

  schema: /* ... */

});

const probes = defineCollection({

  // `loader` can accept an array of multiple patterns as well as string patterns

  // Load all markdown files in the space-probes directory, except for those that start with "voyager-"

  loader: glob({ pattern: ['*.md', '!voyager-*'], base: 'src/data/space-probes' }),

  schema: z.object({

    name: z.string(),

    type: z.enum(['Space Probe', 'Mars Rover', 'Comet Lander']),

    launch_date: z.date(),

    status: z.enum(['Active', 'Inactive', 'Decommissioned']),

    destination: z.string(),

    operator: z.string(),

    notable_discoveries: z.array(z.string()),

  }),

});

export const collections = { blog, dogs, probes };
```

##### `parser` function

[Section titled parser function](https://docs.astro.build/en/guides/content-collections/#parser-function)

The `file()` loader accepts a second argument that defines a `parser` function. This allows you to specify a custom parser (e.g. `toml.parse` or `csv-parse`) to create a collection from a file’s contents.

The `file()` loader will automatically detect and parse a single array of objects from JSON and YAML files (based on their file extension) with no need for a `parser` unless you have a [nested JSON document](https://docs.astro.build/en/guides/content-collections/#nested-json-documents). To use other files, such as `.toml` and `.csv`, you will need a to create a parser function.

The following example defines a content collection `dogs` using a `.toml` file:

```

[[dogs]]

id = "..."

age = "..."

[[dogs]]

id = "..."

age = "..."
```

After importing TOML’s parser, you can load the `dogs` collection into your project by passing both a file path and `parser` function to the `file()` loader. A similar process can be used to define a `cats` collection from a `.csv` file:

```

import { defineCollection } from "astro:content";

import { file } from "astro/loaders";

import { parse as parseToml } from "toml";

import { parse as parseCsv } from "csv-parse/sync";

const dogs = defineCollection({

  loader: file("src/data/dogs.toml", { parser: (text) => parseToml(text).dogs }),

  schema: /* ... */

})

const cats = defineCollection({

  loader: file("src/data/cats.csv", { parser: (text) => parseCsv(text, { columns: true, skipEmptyLines: true })})

});
```

###### Nested `.json` documents

[Section titled Nested .json documents](https://docs.astro.build/en/guides/content-collections/#nested-json-documents)

The `parser` argument also allows you to load a single collection from a nested JSON document. For example, this JSON file contains multiple collections:

```

{"dogs": [{}], "cats": [{}]}
```

You can separate these collections by passing a custom `parser` to the `file()` loader for each collection:

```

const dogs = defineCollection({

  loader: file("src/data/pets.json", { parser: (text) => JSON.parse(text).dogs })

});

const cats = defineCollection({

  loader: file("src/data/pets.json", { parser: (text) => JSON.parse(text).cats })

});
```

#### Building a custom loader

[Section titled Building a custom loader](https://docs.astro.build/en/guides/content-collections/#building-a-custom-loader)

You can build a custom loader to fetch remote content from any data source, such as a CMS, a database, or an API endpoint.

Using a loader to fetch your data will automatically create a collection from your remote data. This gives you all the benefits of local collections, such as collection-specific API helpers such as `getCollection()` and `render()` to query and display your data, as well as schema validation.

##### Inline loaders

[Section titled Inline loaders](https://docs.astro.build/en/guides/content-collections/#inline-loaders)

You can define a loader inline, inside your collection, as an async function that returns an array of entries.

This is useful for loaders that don’t need to manually control how the data is loaded and stored. Whenever the loader is called, it will clear the store and reload all the entries.

```

const countries = defineCollection({

  loader: async () => {

    const response = await fetch("https://restcountries.com/v3.1/all");

    const data = await response.json();

    // Must return an array of entries with an id property, or an object with IDs as keys and entries as values

    return data.map((country) => ({

      id: country.cca3,

      ...country,

    }));

  },

  schema: /* ... */

});
```

The returned entries are stored in the collection and can be queried using the `getCollection()` and `getEntry()` functions.

##### Loader objects

[Section titled Loader objects](https://docs.astro.build/en/guides/content-collections/#loader-objects)

For more control over the loading process, you can use the Content Loader API to create a loader object. For example, with access to the `load` method directly, you can create a loader that allows entries to be updated incrementally or clears the store only when necessary.

Similar to creating an Astro integration or Vite plugin, you can [distribute your loader as an NPM package](https://docs.astro.build/en/reference/publish-to-npm/) that others can use in their projects.

See the full [Content Loader API](https://docs.astro.build/en/reference/content-loader-reference/) and examples of how to build your own loader.

### Defining the collection schema

[Section titled Defining the collection schema](https://docs.astro.build/en/guides/content-collections/#defining-the-collection-schema)

Schemas enforce consistent frontmatter or entry data within a collection through Zod validation. A schema **guarantees** that this data exists in a predictable form when you need to reference or query it. If any file violates its collection schema, Astro will provide a helpful error to let you know.

Schemas also power Astro’s automatic TypeScript typings for your content. When you define a schema for your collection, Astro will automatically generate and apply a TypeScript interface to it. The result is full TypeScript support when you query your collection, including property autocompletion and type-checking.

Every frontmatter or data property of your collection entries must be defined using a Zod data type:

```

import { defineCollection, z } from 'astro:content';

import { glob, file } from 'astro/loaders'; // Not available with legacy API

const blog = defineCollection({

  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),

  schema: z.object({

    title: z.string(),

    description: z.string(),

    pubDate: z.coerce.date(),

    updatedDate: z.coerce.date().optional(),

  })

});

const dogs = defineCollection({

  loader: file("src/data/dogs.json"),

  schema: z.object({

    id: z.string(),

    breed: z.string(),

    temperament: z.array(z.string()),

  }),

});

export const collections = { blog, dogs };
```

#### Defining datatypes with Zod

[Section titled Defining datatypes with Zod](https://docs.astro.build/en/guides/content-collections/#defining-datatypes-with-zod)

Astro uses [Zod](https://github.com/colinhacks/zod) to power its content schemas. With Zod, Astro is able to validate every file’s data within a collection _and_ provide automatic TypeScript types when you go to query content from inside your project.

To use Zod in Astro, import the `z` utility from `"astro:content"`. This is a re-export of the Zod library, and it supports all of the features of Zod.

```

// Example: A cheatsheet of many common Zod datatypes

import { z, defineCollection } from 'astro:content';

defineCollection({

  schema: z.object({

    isDraft: z.boolean(),

    title: z.string(),

    sortOrder: z.number(),

    image: z.object({

      src: z.string(),

      alt: z.string(),

    }),

    author: z.string().default('Anonymous'),

    language: z.enum(['en', 'es']),

    tags: z.array(z.string()),

    footnote: z.string().optional(),

    // In YAML, dates written without quotes around them are interpreted as Date objects

    publishDate: z.date(), // e.g. 2024-09-17

    // Transform a date string (e.g. "2022-07-08") to a Date object

    updatedDate: z.string().transform((str) => new Date(str)),

    authorContact: z.string().email(),

    canonicalURL: z.string().url(),

  })

})
```

See [Zod’s README](https://github.com/colinhacks/zod) for complete documentation on how Zod works and what features are available.

##### Zod schema methods

[Section titled Zod schema methods](https://docs.astro.build/en/guides/content-collections/#zod-schema-methods)

All [Zod schema methods](https://zod.dev/?id=schema-methods) (e.g. `.parse()`, `.transform()`) are available, with some limitations. Notably, performing custom validation checks on images using `image().refine()` is unsupported.

#### Defining collection references

[Section titled Defining collection references](https://docs.astro.build/en/guides/content-collections/#defining-collection-references)

Collection entries can also “reference” other related entries.

With the [`reference()` function](https://docs.astro.build/en/reference/modules/astro-content/#reference) from the Collections API, you can define a property in a collection schema as an entry from another collection. For example, you can require that every `space-shuttle` entry includes a `pilot` property which uses the `pilot` collection’s own schema for type checking, autocomplete, and validation.

A common example is a blog post that references reusable author profiles stored as JSON, or related post URLs stored in the same collection:

```

import { defineCollection, reference, z } from 'astro:content';

import { glob } from 'astro/loaders';

const blog = defineCollection({

  loader: glob({ pattern: '**/[^_]*.md', base: "./src/data/blog" }),

  schema: z.object({

    title: z.string(),

    // Reference a single author from the `authors` collection by `id`

    author: reference('authors'),

    // Reference an array of related posts from the `blog` collection by `slug`

    relatedPosts: z.array(reference('blog')),

  })

});

const authors = defineCollection({

  loader: glob({ pattern: '**/[^_]*.json', base: "./src/data/authors" }),

  schema: z.object({

    name: z.string(),

    portfolio: z.string().url(),

  })

});

export const collections = { blog, authors };
```

This example blog post specifies the `id` s of related posts and the `id` of the post author:

```

---

title: "Welcome to my blog"

author: ben-holmes # references `src/data/authors/ben-holmes.json`

relatedPosts:

- about-me # references `src/data/blog/about-me.md`

- my-year-in-review # references `src/data/blog/my-year-in-review.md`

---
```

These references will be transformed into objects containing a `collection` key and an `id` key, allowing you to easily [query them in your templates](https://docs.astro.build/en/guides/content-collections/#accessing-referenced-data).

### Defining custom IDs

[Section titled Defining custom IDs](https://docs.astro.build/en/guides/content-collections/#defining-custom-ids)

When using the `glob()` loader with Markdown, MDX, Markdoc, or JSON files, every content entry [`id`](https://docs.astro.build/en/reference/modules/astro-content/#id) is automatically generated in an URL-friendly format based on the content filename. The `id` is used to query the entry directly from your collection. It is also useful when creating new pages and URLs from your content.

You can override an entry’s generated `id` by adding your own `slug` property to the file frontmatter or data object for JSON files. This is similar to the “permalink” feature of other web frameworks.

```

---

title: My Blog Post

slug: my-custom-id/supports/slashes

---

Your blog post content here.
```

```

{

  "title": "My Category",

  "slug": "my-custom-id/supports/slashes",

  "description": "Your category description here."

}
```

## Querying Collections

[Section titled Querying Collections](https://docs.astro.build/en/guides/content-collections/#querying-collections)

Astro provides helper functions to query a collection and return one (or more) content entries.

- [`getCollection()`](https://docs.astro.build/en/reference/modules/astro-content/#getcollection) fetches an entire collection and returns an array of entries.
- [`getEntry()`](https://docs.astro.build/en/reference/modules/astro-content/#getentry) fetches a single entry from a collection.

These return entries with a unique `id`, a `data` object with all defined properties, and will also return a `body` containing the raw, uncompiled body of a Markdown, MDX, or Markdoc document.

```

import { getCollection, getEntry } from 'astro:content';

// Get all entries from a collection.

// Requires the name of the collection as an argument.

const allBlogPosts = await getCollection('blog');

// Get a single entry from a collection.

// Requires the name of the collection and `id`

const poodleData = await getEntry('dogs', 'poodle');
```

See the full list of properties returned by the [`CollectionEntry` type](https://docs.astro.build/en/reference/modules/astro-content/#collectionentry).

### Using content in Astro templates

[Section titled Using content in Astro templates](https://docs.astro.build/en/guides/content-collections/#using-content-in-astro-templates)

After querying your collections, you can access each entry’s content directly inside of your Astro component template. For example, you can create a list of links to your blog posts, displaying information from your entry’s frontmatter using the `data` property.

```

---

import { getCollection } from 'astro:content';

const posts = await getCollection('blog');

---

<h1>My posts</h1>

<ul>

  {posts.map(post => (

    <li><a href={`/blog/${post.id}`}>{post.data.title}</a></li>

  ))}

</ul>
```

#### Rendering body content

[Section titled Rendering body content](https://docs.astro.build/en/guides/content-collections/#rendering-body-content)

Once queried, you can render Markdown and MDX entries to HTML using the [`render()`](https://docs.astro.build/en/reference/modules/astro-content/#render) function property. Calling this function gives you access to rendered HTML content, including both a `<Content />` component and a list of all rendered headings.

```

---

import { getEntry, render } from 'astro:content';

const entry = await getEntry('blog', 'post-1');

if (!entry) {

  // Handle Error, for example:

  throw new Error('Could not find blog post 1');

}

const { Content, headings } = await render(entry);

---

<p>Published on: {entry.data.published.toDateString()}</p>

<Content />
```

#### Passing content as props

[Section titled Passing content as props](https://docs.astro.build/en/guides/content-collections/#passing-content-as-props)

A component can also pass an entire collection entry as a prop.

You can use the [`CollectionEntry`](https://docs.astro.build/en/reference/modules/astro-content/#collectionentry) utility to correctly type your component’s props using TypeScript. This utility takes a string argument that matches the name of your collection schema and will inherit all of the properties of that collection’s schema.

```

---

import type { CollectionEntry } from 'astro:content';

interface Props {

  post: CollectionEntry<'blog'>;

}

// `post` will match your 'blog' collection schema type

const { post } = Astro.props;

---
```

### Filtering collection queries

[Section titled Filtering collection queries](https://docs.astro.build/en/guides/content-collections/#filtering-collection-queries)

`getCollection()` takes an optional “filter” callback that allows you to filter your query based on an entry’s `id` or `data` properties.

You can use this to filter by any content criteria you like. For example, you can filter by properties like `draft` to prevent any draft blog posts from publishing to your blog:

```

// Example: Filter out content entries with `draft: true`

import { getCollection } from 'astro:content';

const publishedBlogEntries = await getCollection('blog', ({ data }) => {

  return data.draft !== true;

});
```

You can also create draft pages that are available when running the dev server, but not built in production:

```

// Example: Filter out content entries with `draft: true` only when building for production

import { getCollection } from 'astro:content';

const blogEntries = await getCollection('blog', ({ data }) => {

  return import.meta.env.PROD ? data.draft !== true : true;

});
```

The filter argument also supports filtering by nested directories within a collection. Since the `id` includes the full nested path, you can filter by the start of each `id` to only return items from a specific nested directory:

```

// Example: Filter entries by sub-directory in the collection

import { getCollection } from 'astro:content';

const englishDocsEntries = await getCollection('docs', ({ id }) => {

  return id.startsWith('en/');

});
```

### Accessing referenced data

[Section titled Accessing referenced data](https://docs.astro.build/en/guides/content-collections/#accessing-referenced-data)

Any [references defined in your schema](https://docs.astro.build/en/guides/content-collections/#defining-collection-references) must be queried separately after first querying your collection entry. Since the [`reference()` function](https://docs.astro.build/en/reference/modules/astro-content/#reference) transforms a reference to an object with `collection` and `id` as keys, you can use the `getEntry()` function to return a single referenced item, or `getEntries()` to retrieve multiple referenced entries from the returned `data` object.

```

---

import { getEntry, getEntries } from 'astro:content';

const blogPost = await getEntry('blog', 'welcome');

// Resolve a singular reference (e.g. `{collection: "authors", id: "ben-holmes"}`)

const author = await getEntry(blogPost.data.author);

// Resolve an array of references

// (e.g. `[{collection: "blog", id: "about-me"}, {collection: "blog", id: "my-year-in-review"}]`)

const relatedPosts = await getEntries(blogPost.data.relatedPosts);

---

<h1>{blogPost.data.title}</h1>

<p>Author: {author.data.name}</p>

<!-- ... -->

<h2>You might also like:</h2>

{relatedPosts.map(post => (

  <a href={post.id}>{post.data.title}</a>

))}
```

## Generating Routes from Content

[Section titled Generating Routes from Content](https://docs.astro.build/en/guides/content-collections/#generating-routes-from-content)

Content collections are stored outside of the `src/pages/` directory. This means that no pages or routes are generated for your collection items by default.

You will need to manually create a new [dynamic route](https://docs.astro.build/en/guides/routing/#dynamic-routes) if you want to generate HTML pages for each of your collection entries, such as individual blog posts. Your dynamic route will map the incoming request param (e.g. `Astro.params.slug` in `src/pages/blog/[...slug].astro`) to fetch the correct entry for each page.

The exact method for generating routes will depend on whether your pages are prerendered (default) or rendered on demand by a server.

### Building for static output (default)

[Section titled Building for static output (default)](https://docs.astro.build/en/guides/content-collections/#building-for-static-output-default)

If you are building a static website (Astro’s default behavior), use the [`getStaticPaths()`](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths) function to create multiple pages from a single page component (e.g. `src/pages/[slug]`) during your build.

Call `getCollection()` inside of `getStaticPaths()` to have your collection data available for building static routes. Then, create the individual URL paths using the `id` property of each content entry. Each page is passed the entire collection entry as a prop for [use in your page template](https://docs.astro.build/en/guides/content-collections/#using-content-in-astro-templates).

```

---

import { getCollection, render } from 'astro:content';

// 1. Generate a new path for every collection entry

export async function getStaticPaths() {

  const posts = await getCollection('blog');

  return posts.map(post => ({

    params: { id: post.id },

    props: { post },

  }));

}

// 2. For your template, you can get the entry directly from the prop

const { post } = Astro.props;

const { Content } = await render(post);

---

<h1>{post.data.title}</h1>

<Content />
```

This will generate a page route for every entry in the `blog` collection. For example, an entry at `src/blog/hello-world.md` will have an `id` of `hello-world`, and therefore its final URL will be `/posts/hello-world/`.

### Building for server output (SSR)

[Section titled Building for server output (SSR)](https://docs.astro.build/en/guides/content-collections/#building-for-server-output-ssr)

If you are building a dynamic website (using Astro’s SSR support), you are not expected to generate any paths ahead of time during the build. Instead, your page should examine the request (using `Astro.request` or `Astro.params`) to find the `slug` on-demand, and then fetch it using [`getEntry()`](https://docs.astro.build/en/reference/modules/astro-content/#getentry).

```

---

import { getEntry, render } from "astro:content";

// 1. Get the slug from the incoming server request

const { id } = Astro.params;

if (id === undefined) {

  return Astro.redirect("/404");

}

// 2. Query for the entry directly using the request slug

const post = await getEntry("blog", id);

// 3. Redirect if the entry does not exist

if (post === undefined) {

  return Astro.redirect("/404");

}

// 4. Render the entry to HTML in the template

const { Content } = await render(post);

---

<h1>{post.data.title}</h1>

<Content />
```

## When to create a collection

[Section titled When to create a collection](https://docs.astro.build/en/guides/content-collections/#when-to-create-a-collection)

You can [create a collection](https://docs.astro.build/en/guides/content-collections/#defining-collections) any time you have a group of related data or content that shares a common structure.

Much of the benefit of using collections comes from:

- Defining a common data shape to validate that an individual entry is “correct” or “complete”, avoiding errors in production.
- Content-focused APIs designed to make querying intuitive (e.g. `getCollection()` instead of `import.meta.glob()`) when importing and rendering content on your pages.
- A [Content Loader API](https://docs.astro.build/en/reference/content-loader-reference/) for retrieving your content that provides both built-in loaders and access to the low-level API. There are several third-party and community-built loaders available, and you can build your own custom loader to fetch data from anywhere.
- Performance and scalability. The Content Layer API allows data to be cached between builds and is suitable for tens of thousands of content entries.

[Define your data](https://docs.astro.build/en/guides/content-collections/#defining-collections) as a collection when:

- You have multiple files or data to organize that share the same overall structure (e.g. blog posts written in Markdown which all have the same frontmatter properties).
- You have existing content stored remotely, such as in a CMS, and want to take advantage of the collections helper functions and Content Layer API instead of using `fetch()` or SDKs.
- You need to fetch (tens of) thousands of related pieces of data, and need a querying and caching method that handles at scale.

### When not to create a collection

[Section titled When not to create a collection](https://docs.astro.build/en/guides/content-collections/#when-not-to-create-a-collection)

Collections provide excellent structure, safety, and organization when you have **multiple pieces of content that must share the same properties**.

Collections **may not be your solution** if:

- You have only one or a small number of different pages. Consider [making individual page components](https://docs.astro.build/en/basics/astro-pages/) such as `src/pages/about.astro` with your content directly instead.
- You are displaying files that are not processed by Astro, such as PDFs. Place these static assets in the [`public/` directory](https://docs.astro.build/en/basics/project-structure/#public) of your project instead.
- Your data source has its own SDK/client library for imports that is incompatible with or does not offer a content loader and you prefer to use it directly.
- You are using APIs that need to be updated in real time. Content collections are only updated at build time, so if you need live data, use other methods of [importing files](https://docs.astro.build/en/guides/imports/#import-statements) or [fetching data](https://docs.astro.build/en/guides/data-fetching/) with [on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/).

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Builder.io Integration Guide
[Skip to content](https://docs.astro.build/en/guides/cms/builderio/#_top)

# Builder.io & Astro

[Builder.io](https://www.builder.io/) is a visual CMS that supports drag-and-drop content editing for building websites.

This recipe will show you how to connect your Builder space to Astro with zero client-side JavaScript.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/builderio/#prerequisites)

To get started, you will need to have the following:

- **A Builder account and space** \- If you don’t have an account yet, [sign up for free](https://www.builder.io/) and create a new space. If you already have a space with Builder, feel free to use it, but you will need to modify the code to match the model name ( `blogpost`) and custom data fields.
- **A Builder API key** \- This public key will be used to fetch your content from Builder. [Read Builder’s guide on how to find your key](https://www.builder.io/c/docs/using-your-api-key#finding-your-public-api-key).

## Setting up credentials

[Section titled Setting up credentials](https://docs.astro.build/en/guides/cms/builderio/#setting-up-credentials)

To add your Builder API key and your Builder model name to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variables:

```

BUILDER_API_PUBLIC_KEY=YOUR_API_KEY

BUILDER_BLOGPOST_MODEL='blogpost'
```

Now, you should be able to use this API key in your project.

If you would like to have IntelliSense for your environment variables, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:

```

interface ImportMetaEnv {

  readonly BUILDER_API_PUBLIC_KEY: string;

}
```

Your project should now include these files:

- Directorysrc/


- **env.d.ts**

- **.env**
- astro.config.mjs
- package.json

## Making a blog with Astro and Builder

[Section titled Making a blog with Astro and Builder](https://docs.astro.build/en/guides/cms/builderio/#making-a-blog-with-astro-and-builder)

### Creating a model for a blog post

[Section titled Creating a model for a blog post](https://docs.astro.build/en/guides/cms/builderio/#creating-a-model-for-a-blog-post)

The instructions below create an Astro blog using a Builder model (Type: “Section”) called `blogpost` that contains two required text fields: `title` and `slug`.

In the Builder app create the model that will represent a blog post: go to the **Models** tab and click the **\+ Create Model** button to create model with the following fields and values:

- **Type:** Section
- **Name:** “blogpost”
- **Description:** “This model is for a blog post”

In your new model use the **\+ New Custom Field** button to create 2 new fields:

1. Text field


   - **Name:** “title”
   - **Required:** Yes
   - **Default value** “I forgot to give this a title”

(leave the other parameters as their defaults)

2. Text field


   - **Name:** “slug”
   - **Required:** Yes
   - **Default value** “some-slugs-take-their-time”

(leave the other parameters as their defaults)

Then click the **Save** button in the upper right.

### Setting up the preview

[Section titled Setting up the preview](https://docs.astro.build/en/guides/cms/builderio/#setting-up-the-preview)

To use Builder’s visual editor, create the page `src/pages/builder-preview.astro` that will render the special `<builder-component>`:

- Directorysrc/


- Directorypages/


- **builder-preview.astro**

- env.d.ts

- .env
- astro.config.mjs
- package.json

Then add the following content:

```

---

const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;

const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;

---

<html lang="en">

  <head>

    <title>Preview for builder.io</title>

  </head>

  <body>

    <header>This is your header</header>

    <builder-component model={builderModel} api-key={builderAPIpublicKey}

    ></builder-component>

    <script async src="https://cdn.builder.io/js/webcomponents"></script>

    <footer>This is your footer</footer>

  </body>

</html>
```

In the above example, `<builder-component>` tells Builder where to insert the content from its CMS.

#### Setting the new route as the preview URL

[Section titled Setting the new route as the preview URL](https://docs.astro.build/en/guides/cms/builderio/#setting-the-new-route-as-the-preview-url)

1. Copy the full URL of your preview, including the protocol, to your clipboard (e.g. `https://{your host}/builder-preview`).

2. Go to the **Models** tab in your Builder space, pick the model you’ve created and paste the URL from step 1 into the **Preview URL** field. Make sure the URL is complete and includes the protocol, for example `https://`.

3. Click the **Save** button in the upper right.


#### Testing the preview URL setup

[Section titled Testing the preview URL setup](https://docs.astro.build/en/guides/cms/builderio/#testing-the-preview-url-setup)

1. Make sure your site is live (e.g. your dev server is running) and the `/builder-preview` route is working.

2. In your Builder space under the **Content** tab, click on **New** to create a new content entry for your `blogpost` model.

3. In the Builder editor that just opened, you should be able to see the `builder-preview.astro` page with a big **Add Block** in the middle.


### Creating a blog post

[Section titled Creating a blog post](https://docs.astro.build/en/guides/cms/builderio/#creating-a-blog-post)

1. In Builder’s visual editor, create a new content entry with the following values:
   - **title:** ‘First post, woohoo!‘
   - **slug:** ‘first-post-woohoo’
2. Complete your post using the **Add Block** button and add a text field with some post content.

3. In the text field above the editor, give your entry a name. This is how it will be listed in the Builder app.

4. When you’re ready click the **Publish** button in the upper right corner.

5. Create as many posts as you like, ensuring that all content entries contain a `title` and a `slug` as well as some post content.


### Displaying a list of blog posts

[Section titled Displaying a list of blog posts](https://docs.astro.build/en/guides/cms/builderio/#displaying-a-list-of-blog-posts)

Add the following content to `src/pages/index.astro` in order to fetch and display a list of all post titles, each linking to its own page:

```

---

const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;

const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;

const { results: posts } = await fetch(

  `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({

    apiKey: builderAPIpublicKey,

    fields: ["data.slug", "data.title"].join(","),

    cachebust: "true",

  }).toString()}`

)

  .then((res) => res.json())

  .catch();

---

<html lang="en">

  <head>

    <title>Blog Index</title>

  </head>

  <body>

    <ul>

      {

        posts.flatMap(({ data: { slug, title } }) => (

          <li>

            <a href={`/posts/${slug}`}>{title}</a>

          </li>

        ))

      }

    </ul>

  </body>

</html>
```

Fetching via the content API returns an array of objects containing data for each post. The `fields` query parameter tells Builder which data is included (see highlighted code). `slug` and `title` should match the names of the custom data fields you’ve added to your Builder model.

The `posts` array returned from the fetch displays a list of blog post titles on the home page. The individual page routes will be created in the next step.

Go to your index route and you should be able to see a list of links each with the title of a blog post!

### Displaying a single blog post

[Section titled Displaying a single blog post](https://docs.astro.build/en/guides/cms/builderio/#displaying-a-single-blog-post)

Create the page `src/pages/posts/[slug].astro` that will [dynamically generate a page](https://docs.astro.build/en/guides/routing/#dynamic-routes) for each post.

- Directorysrc/


- Directorypages/


- index.astro
- Directoryposts/


- **\[slug\].astro**

- env.d.ts

- .env
- astro.config.mjs
- package.json

This file must contain:

- A [`getStaticPaths()`](https://docs.astro.build/en/reference/routing-reference/#getstaticpaths) function to fetch `slug` information from Builder and create a static route for each blog post.
- A `fetch()` to the Builder API using the `slug` identifier to return post content and metadata (e.g. a `title`).
- A `<Fragment />` in the template to render the post content as HTML.

Each of these is highlighted in the following code snippet.

```

---

export async function getStaticPaths() {

  const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;

  const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;

  const { results: posts } = await fetch(

    `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams(

      {

        apiKey: builderAPIpublicKey,

        fields: ["data.slug", "data.title"].join(","),

        cachebust: "true",

      }

    ).toString()}`

  )

    .then((res) => res.json())

    .catch

    // ...catch some errors...);

    ();

  return posts.map(({ data: { slug, title } }) => ({

    params: { slug },

    props: { title },

  }))

}

const { slug } = Astro.params;

const { title } = Astro.props;

const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;

const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;

// Builder's API requires this field but for this use case the url doesn't seem to matter - the API returns the same HTML

const encodedUrl = encodeURIComponent("moot");

const { html: postHTML } = await fetch(

  `https://cdn.builder.io/api/v1/qwik/${builderModel}?${new URLSearchParams({

    apiKey: builderAPIpublicKey,

    url: encodedUrl,

    "query.data.slug": slug,

    cachebust: "true",

  }).toString()}`

)

  .then((res) => res.json())

  .catch();

---

<html lang="en">

  <head>

    <title>{title}</title>

  </head>

  <body>

    <header>This is your header</header>

    <article>

      <Fragment set:html={postHTML} />

    </article>

    <footer>This is your footer</footer>

  </body>

</html>
```

Now when you click on a link on your index route, you will be taken to the individual blog post page.

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/builderio/#publishing-your-site)

To deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

#### Rebuild on Builder changes

[Section titled Rebuild on Builder changes](https://docs.astro.build/en/guides/cms/builderio/#rebuild-on-builder-changes)

If your project is using Astro’s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build whenever you click **Publish** in the Builder editor.

##### Netlify

[Section titled Netlify](https://docs.astro.build/en/guides/cms/builderio/#netlify)

1. Go to your site dashboard, then **Site Settings** and click on **Build & deploy**.

2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.

3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.


##### Vercel

[Section titled Vercel](https://docs.astro.build/en/guides/cms/builderio/#vercel)

1. Go to your project dashboard and click on **Settings**.

2. Under the **Git** tab, find the **Deploy Hooks** section.

3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.


##### Adding a webhook to Builder

[Section titled Adding a webhook to Builder](https://docs.astro.build/en/guides/cms/builderio/#adding-a-webhook-to-builder)

1. In your Builder dashboard, go into your **`blogpost`** model. Under **Show More Options**, select **Edit Webhooks** at the bottom.

2. Add a new webhook by clicking on **Webhook**. Paste the URL generated by your hosting provider into the **Url** field.

3. Click on **Show Advanced** under the URL field and toggle the option to select **Disable Payload**. With the payload disabled, Builder sends a simpler POST request to your hosting provider, which can be helpful as your site grows. Click **Done** to save this selection.


With this webhook in place, whenever you click the **Publish** button in the Builder editor, your hosting provider rebuilds your site - and Astro fetches the newly published data for you. Nothing to do but lean back and pump out that sweet sweet content!

## Official resources

[Section titled Official resources](https://docs.astro.build/en/guides/cms/builderio/#official-resources)

- Check out [the official Builder.io starter project](https://github.com/BuilderIO/builder/tree/main/examples/astro-solidjs), which uses Astro and SolidJS.
- The [official Builder quickstart guide](https://www.builder.io/c/docs/quickstart#step-1-add-builder-as-a-dependency) covers both the use of the REST API as well as data fetching through an integration with a JavaScript framework like Qwik, React or Vue.
- [Builder’s API explorer](https://builder.io/api-explorer) can help if you need to troubleshoot your API calls.

## Community resources

[Section titled Community resources](https://docs.astro.build/en/guides/cms/builderio/#community-resources)

- Read [Connecting Builder.io’s Visual CMS to Astro](https://www.hamatoyogi.dev/blog/astro-log/connecting-builderio-to-astro) by Yoav Ganbar.

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Deploy Astro on Azion
[Skip to content](https://docs.astro.build/en/guides/deploy/azion/#_top)

# Deploy your Astro Site to Azion

You can deploy your Astro project on [Azion](https://console.azion.com/), a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/deploy/azion/#prerequisites)

To get started, you will need:

- An [Azion account](https://www.azion.com/). If you don’t have one, you can sign up for a free account.
- Your app code stored in a [GitHub](https://github.com/) repository.
- [Azion CLI](https://www.azion.com/en/documentation/products/azion-cli/overview/) installed for faster project setup and deployment.

## How to Deploy through Azion Console Dashboard

[Section titled How to Deploy through Azion Console Dashboard](https://docs.astro.build/en/guides/deploy/azion/#how-to-deploy-through-azion-console-dashboard)

To start building, follow these steps:

1. Access [Azion Console](https://console.azion.com/).
2. On the homepage, click the **\+ Create** button.

   - This opens a modal with the options to create new applications and resources.
3. Select the **Import from GitHub** option and click the card.

   - This action opens the settings page.
4. Connect your Azion account with GitHub.
   - A pop-up window will appear asking for authorization.
5. Select the repository you want to import from GitHub.
6. Configure the build settings:
   - **Framework preset:** Select the appropriate framework (e.g., `Astro`).
   - **Root Directory:** This refers to the directory in which your code is located. Your code must be located at the root directory, not a subdirectory. A ./ symbol appears in this field, indicating it’s a root directory.
   - **Install Command:** the command that compiles your settings to build for production. Build commands are executed through scripts. For example: npm run build or npm install for an NPM package.
7. Click **Save and Deploy**.
8. Monitor the deployment using **Azion Real-Time Metrics** and verify your site is live on the edge.

## How to Deploy a Static Site Using the Azion CLI

[Section titled How to Deploy a Static Site Using the Azion CLI](https://docs.astro.build/en/guides/deploy/azion/#how-to-deploy-a-static-site-using-the-azion-cli)

1. **Install the Azion CLI:**
   - Download and install the [Azion CLI](https://www.azion.com/en/documentation/products/azion-cli/overview/) for easier management and deployment.
2. **Authenticate the CLI:**


   - Run the following command to authenticate your CLI with your Azion account.

```

azion login
```

3. **Set Up Your Application:**


   - Use the following commands to initialize and configure your project:

```

azion init
```

4. **Build Your Astro Project:**


   - Run your build command locally:

```

azion build
```

5. **Deploy Your Static Files:**


   - Deploy your static files using the Azion CLI:

```

azion deploy
```

This guide provides an overview of deploying static applications.

## Enabling Local Development Using Azion CLI

[Section titled Enabling Local Development Using Azion CLI](https://docs.astro.build/en/guides/deploy/azion/#enabling-local-development-using-azion-cli)

For the preview to work, you must execute the following command:

```

azion dev
```

Once you’ve initialized the local development server, the application goes through the `build` process.

```

Building your Edge Application. This process may take a few minutes

Running build step command:

...
```

Then, when the build is complete, the access to the application is prompted:

```

[Azion Bundler] [Server] › ✔  success   Function running on port http://localhost:3000
```

## Troubleshooting

[Section titled Troubleshooting](https://docs.astro.build/en/guides/deploy/azion/#troubleshooting)

### Node.js runtime APIs

[Section titled Node.js runtime APIs](https://docs.astro.build/en/guides/deploy/azion/#nodejs-runtime-apis)

A project using an NPM package fails to build with an error message such as `[Error] Could not resolve "XXXX. The package "XXXX" wasn't found on the file system but is built into node.`:

This means that a package or import you are using is not compatible with Azion’s runtime APIs.

If you are directly importing a Node.js runtime API, please refer to the [Azion Node.js compatibility](https://www.azion.com/en/documentation/products/azion-edge-runtime/compatibility/node/) for further steps on how to resolve this.

If you are importing a package that imports a Node.js runtime API, check with the author of the package to see if they support the `node:*` import syntax. If they do not, you may need to find an alternative package.

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Deploy Astro on Zerops
[Skip to content](https://docs.astro.build/en/guides/deploy/zerops/#_top)

# Deploy your Astro Site to Zerops

[Zerops](https://zerops.io/) is a dev-first cloud platform that can be used to deploy both Static and SSR Astro site.

This guide will walk you through setting up and deploying both Static and SSR Astro sites on Zerops.

Running apps on Zerops requires two steps:

1. Creating a project
2. Triggering build & deploy pipeline

## Astro Static site on Zerops

[Section titled Astro Static site on Zerops](https://docs.astro.build/en/guides/deploy/zerops/#astro-static-site-on-zerops)

### Creating a project and a service for Astro Static

[Section titled Creating a project and a service for Astro Static](https://docs.astro.build/en/guides/deploy/zerops/#creating-a-project-and-a-service-for-astro-static)

Projects and services can be added either through a [`Project add`](https://app.zerops.io/dashboard/project-add) wizard or imported using a yaml structure:

```

# see https://docs.zerops.io/references/import for full reference

project:

  name: recipe-astro

services:

  - hostname: app

    type: static
```

This will create a project called `recipe-astro` with a Zerops Static service called `app`.

### Deploying your Astro Static site

[Section titled Deploying your Astro Static site](https://docs.astro.build/en/guides/deploy/zerops/#deploying-your-astro-static-site)

To tell Zerops how to build and run your site, add a `zerops.yml` to your repository:

- [npm](https://docs.astro.build/en/guides/deploy/zerops/#tab-panel-3233)
- [pnpm](https://docs.astro.build/en/guides/deploy/zerops/#tab-panel-3234)
- [Yarn](https://docs.astro.build/en/guides/deploy/zerops/#tab-panel-3235)

```

# see https://docs.zerops.io/zerops-yml/specification for full reference

zerops:

  - setup: app

    build:

      base: nodejs@20

      buildCommands:

        - npm i

        - npm build

      deployFiles:

        - dist/~

    run:

      base: static
```

```

# see https://docs.zerops.io/zerops-yml/specification for full reference

zerops:

  - setup: app

    build:

      base: nodejs@20

      buildCommands:

        - pnpm i

        - pnpm build

      deployFiles:

        - dist/~

    run:

      base: static
```

```

# see https://docs.zerops.io/zerops-yml/specification for full reference

zerops:

  - setup: app

    build:

      base: nodejs@20

      buildCommands:

        - yarn

        - yarn build

      deployFiles:

        - dist/~

    run:

      base: static
```

Now you can [trigger the build & deploy pipeline using the Zerops CLI](https://docs.astro.build/en/guides/deploy/zerops/#trigger-the-pipeline-using-zerops-cli-zcli) or by connecting the `app` service with your [GitHub](https://docs.zerops.io/references/github-integration/) / [GitLab](https://docs.zerops.io/references/gitlab-integration) repository from inside the service detail.

## Astro SSR site on Zerops

[Section titled Astro SSR site on Zerops](https://docs.astro.build/en/guides/deploy/zerops/#astro-ssr-site-on-zerops)

### Update scripts

[Section titled Update scripts](https://docs.astro.build/en/guides/deploy/zerops/#update-scripts)

Update your `start` script to run the server output from the Node adapter.

```

"scripts": {

  "start": "node ./dist/server/entry.mjs",

}
```

### Creating a project and a service for Astro SSR (Node.js)

[Section titled Creating a project and a service for Astro SSR (Node.js)](https://docs.astro.build/en/guides/deploy/zerops/#creating-a-project-and-a-service-for-astro-ssr-nodejs)

Projects and services can be added either through a [`Project add`](https://app.zerops.io/dashboard/project-add) wizard or imported using a yaml structure:

```

# see https://docs.zerops.io/references/import for full reference

project:

  name: recipe-astro

services:

  - hostname: app

    type: nodejs@20
```

This will create a project called `recipe-astro` with Zerops Node.js service called `app`.

### Deploying your Astro SSR site

[Section titled Deploying your Astro SSR site](https://docs.astro.build/en/guides/deploy/zerops/#deploying-your-astro-ssr-site)

To tell Zerops how to build and run your site using the official [Astro Node.js adapter](https://docs.astro.build/en/guides/integrations-guide/node/) in `standalone` mode, add a `zerops.yml` file to your repository:

- [npm](https://docs.astro.build/en/guides/deploy/zerops/#tab-panel-3236)
- [pnpm](https://docs.astro.build/en/guides/deploy/zerops/#tab-panel-3237)
- [Yarn](https://docs.astro.build/en/guides/deploy/zerops/#tab-panel-3238)

```

# see https://docs.zerops.io/zerops-yml/specification for full reference

zerops:

  - setup: app

    build:

      base: nodejs@20

      buildCommands:

        - npm i

        - npm run build

      deployFiles:

        - dist

        - package.json

        - node_modules

    run:

      base: nodejs@20

      ports:

        - port: 3000

          httpSupport: true

      envVariables:

        PORT: 3000

        HOST: 0.0.0.0

      start: npm start
```

```

# see https://docs.zerops.io/zerops-yml/specification for full reference

zerops:

  - setup: app

    build:

      base: nodejs@20

      buildCommands:

        - pnpm i

        - pnpm run build

      deployFiles:

        - dist

        - package.json

        - node_modules

    run:

      base: nodejs@20

      ports:

        - port: 3000

          httpSupport: true

      envVariables:

        PORT: 3000

        HOST: 0.0.0.0

      start: pnpm start
```

```

# see https://docs.zerops.io/zerops-yml/specification for full reference

zerops:

  - setup: app

    build:

      base: nodejs@20

      buildCommands:

        - yarn

        - yarn build

      deployFiles:

        - dist

        - package.json

        - node_modules

    run:

      base: nodejs@20

      ports:

        - port: 3000

          httpSupport: true

      envVariables:

        PORT: 3000

        HOST: 0.0.0.0

      start: yarn start
```

Now you can [trigger the build & deploy pipeline using the Zerops CLI](https://docs.astro.build/en/guides/deploy/zerops/#trigger-the-pipeline-using-zerops-cli-zcli) or by connecting the `app` service with your [GitHub](https://docs.zerops.io/references/github-integration/) / [GitLab](https://docs.zerops.io/references/gitlab-integration) repository from inside the service detail.

## Trigger the pipeline using Zerops CLI (zcli)

[Section titled Trigger the pipeline using Zerops CLI (zcli)](https://docs.astro.build/en/guides/deploy/zerops/#trigger-the-pipeline-using-zerops-cli-zcli)

1. Install the Zerops CLI.



```


# To download the zcli binary directly,

# use https://github.com/zeropsio/zcli/releases

npm i -g @zerops/zcli
```

2. Open [`Settings > Access Token Management`](https://app.zerops.io/settings/token-management) in the Zerops app and generate a new access token.

3. Log in using your access token with the following command:



```


zcli login <token>
```

4. Navigate to the root of your app (where `zerops.yml` is located) and run the following command to trigger the deploy:



```


zcli push
```


## Resources

[Section titled Resources](https://docs.astro.build/en/guides/deploy/zerops/#resources)

### Official

[Section titled Official](https://docs.astro.build/en/guides/deploy/zerops/#official)

- [Create Zerops account](https://app.zerops.io/registration)
- [Zerops Documentation](https://docs.zerops.io/)
- [Zerops Astro recipe](https://app.zerops.io/recipe/astro)

### Community

[Section titled Community](https://docs.astro.build/en/guides/deploy/zerops/#community)

- [Deploying Astro to Zerops in 3 mins](https://medium.com/@arjunaditya/how-to-deploy-astro-to-zerops-4230816a62b4)
- [Deploying Astro SSG with Node.js on Zerops with One Click Deploy](https://youtu.be/-4KTa4VWtBE)
- [Deploying Astro SSR with Node.js on Zerops with One Click Deploy](https://youtu.be/eR6b_JnDH6g)

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fzerops%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=75384207)

## Astro Islands Tutorial
[Skip to content](https://docs.astro.build/en/tutorial/6-islands/#_top)

# Check in: Unit 6 - Astro Islands

Now that you have a fully functioning blog, it’s time to add some interactive islands to your site!

## Looking ahead

[Section titled Looking ahead](https://docs.astro.build/en/tutorial/6-islands/#looking-ahead)

In this unit, you’ll use **Astro islands** to bring frontend framework components into your Astro site.

You will:

- Add a UI framework, Preact, to your Astro project
- Use Preact to create an interactive greeting component
- Learn when you might _not_ choose islands for interactivity

## Checklist

[Section titled Checklist](https://docs.astro.build/en/tutorial/6-islands/#checklist)

- I am ready to add some interactivity to my site, and start living that island life!

Tutorials

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment Guide
[Skip to content](https://docs.astro.build/en/guides/deploy/vercel/#_top)

# Deploy your Astro Site to Vercel

You can use [Vercel](http://vercel.com/) to deploy an Astro site to their global edge network with zero configuration.

This guide includes instructions for deploying to Vercel through the website UI or Vercel’s CLI.

## Project configuration

[Section titled Project configuration](https://docs.astro.build/en/guides/deploy/vercel/#project-configuration)

Your Astro project can be deployed to Vercel as a static site, or a server-rendered site.

### Static site

[Section titled Static site](https://docs.astro.build/en/guides/deploy/vercel/#static-site)

Your Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site to Vercel.

### Adapter for on-demand rendering

[Section titled Adapter for on-demand rendering](https://docs.astro.build/en/guides/deploy/vercel/#adapter-for-on-demand-rendering)

Add [the Vercel adapter](https://docs.astro.build/en/guides/integrations-guide/vercel/) to enable [on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/) in your Astro project with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.

- [npm](https://docs.astro.build/en/guides/deploy/vercel/#tab-panel-3171)
- [pnpm](https://docs.astro.build/en/guides/deploy/vercel/#tab-panel-3172)
- [Yarn](https://docs.astro.build/en/guides/deploy/vercel/#tab-panel-3173)

```

npx astro add vercel
```

```

pnpm astro add vercel
```

```

yarn astro add vercel
```

See the [Vercel adapter guide](https://docs.astro.build/en/guides/integrations-guide/vercel/) to install manually instead, or for more configuration options, such as deploying your project’s Astro middleware using Vercel Edge Functions.

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/vercel/#how-to-deploy)

You can deploy to Vercel through the website UI or using Vercel’s CLI (command line interface). The process is the same for both static and on-demand rendered Astro sites.

### Website UI deployment

[Section titled Website UI deployment](https://docs.astro.build/en/guides/deploy/vercel/#website-ui-deployment)

1. Push your code to your online Git repository (GitHub, GitLab, BitBucket).

2. [Import your project](https://vercel.com/new) into Vercel.

3. Vercel will automatically detect Astro and configure the right settings.

4. Your application is deployed! (e.g. [astro.vercel.app](https://astro.vercel.app/))


After your project has been imported and deployed, all subsequent pushes to branches will generate [Preview Deployments](https://vercel.com/docs/concepts/deployments/preview-deployments), and all changes made to the Production Branch (commonly “main”) will result in a [Production Deployment](https://vercel.com/docs/concepts/deployments/environments#production).

Learn more about Vercel’s [Git Integration](https://vercel.com/docs/concepts/git).

### CLI deployment

[Section titled CLI deployment](https://docs.astro.build/en/guides/deploy/vercel/#cli-deployment)

1. Install the [Vercel CLI](https://vercel.com/cli) and run `vercel` to deploy.




- [npm](https://docs.astro.build/en/guides/deploy/vercel/#tab-panel-3174)
- [pnpm](https://docs.astro.build/en/guides/deploy/vercel/#tab-panel-3175)
- [Yarn](https://docs.astro.build/en/guides/deploy/vercel/#tab-panel-3176)

```

npm install -g vercel

vercel
```

```

pnpm add -g vercel

vercel
```

```

yarn global add vercel

vercel
```

2. Vercel will automatically detect Astro and configure the right settings.

3. When asked `Want to override the settings? [y/N]`, choose `N`.

4. Your application is deployed! (e.g. [astro.vercel.app](https://astro.vercel.app/))


### Project config with `vercel.json`

[Section titled Project config with vercel.json](https://docs.astro.build/en/guides/deploy/vercel/#project-config-with-verceljson)

You can use `vercel.json` to override the default behavior of Vercel and to configure additional settings. For example, you may wish to attach headers to HTTP responses from your Deployments.

Learn more about [Vercel’s project configuration](https://vercel.com/docs/project-configuration).

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fvercel%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=44998139)

## ApostropheCMS Integration Guide
[Skip to content](https://docs.astro.build/en/guides/cms/apostrophecms/#_top)

# ApostropheCMS & Astro

[ApostropheCMS](https://apostrophecms.com/) is a content management system supporting on-page editing in Astro.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/apostrophecms/#integrating-with-astro)

In this section, you will use the [Apostrophe integration](https://apostrophecms.com/extensions/astro-integration) to connect ApostropheCMS to Astro.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/apostrophecms/#prerequisites)

To get started, you will need to have the following:

1. **An on-demand rendered Astro project** with the [Node.js adapter](https://docs.astro.build/en/guides/integrations-guide/node/) installed and `output: 'server'` configured - If you don’t have an Astro project yet, our [installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **An ApostropheCMS project with a configured environment variable called `APOS_EXTERNAL_FRONT_KEY`** \- This environment variable can be set to any random string. If you don’t have an ApostropheCMS project yet, the [installation guide](https://docs.apostrophecms.org/guide/development-setup.html) will get one setup quickly. We highly recommend using the [Apostrophe CLI tool](https://apostrophecms.com/extensions/apos-cli) to facilitate this.


### Setting up project communication

[Section titled Setting up project communication](https://docs.astro.build/en/guides/cms/apostrophecms/#setting-up-project-communication)

Your Astro project needs to have an `APOS_EXTERNAL_FRONT_KEY` environment variable set to the same value as the one in your ApostropheCMS project to allow communication between the two. This shared key acts as a means to verify requests between the frontend (Astro) and the backend (ApostropheCMS).

Create a `.env` file in the root of your Astro project with the following variable:

```

APOS_EXTERNAL_FRONT_KEY='RandomStrongString'
```

Your root directory should now include this new file:

- Directorysrc/

- …

- **.env**
- astro.config.mjs
- package.json

### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/apostrophecms/#installing-dependencies)

To connect Astro with your ApostropheCMS project, install the official Apostrophe integration in your Astro project using the command below for your preferred package manager.

- [npm](https://docs.astro.build/en/guides/cms/apostrophecms/#tab-panel-3054)
- [pnpm](https://docs.astro.build/en/guides/cms/apostrophecms/#tab-panel-3055)
- [Yarn](https://docs.astro.build/en/guides/cms/apostrophecms/#tab-panel-3056)

```

npm install @apostrophecms/apostrophe-astro vite @astro/node
```

```

pnpm add @apostrophecms/apostrophe-astro vite @astro/node
```

```

yarn add @apostrophecms/apostrophe-astro vite @astro/node
```

### Configuring Astro

[Section titled Configuring Astro](https://docs.astro.build/en/guides/cms/apostrophecms/#configuring-astro)

Configure both the `apostrophe-astro` integration and `vite` in your `astro.config.mjs` file.

The following example provides the base URL of your Apostrophe instance and paths to folders in your project to map between the ApostropheCMS [widgets](https://docs.apostrophecms.org/guide/core-widgets.html) and [page template](https://docs.apostrophecms.org/guide/pages.html) types and your Astro project. It also configures Vite’s server-side rendering.

```

import { defineConfig } from 'astro/config';

import node from '@astrojs/node';

import apostrophe from '@apostrophecms/apostrophe-astro';

import { loadEnv } from 'vite';

const env = loadEnv("", process.cwd(), 'APOS');

export default defineConfig({

  output: 'server',

  adapter: node({

    mode: 'standalone'

  }),

  integrations: [\
\
    apostrophe({\
\
      aposHost: 'http://localhost:3000',\
\
      widgetsMapping: './src/widgets',\
\
      templatesMapping: './src/templates'\
\
    })\
\
  ],

  vite: {

    ssr: {

      // Do not externalize the @apostrophecms/apostrophe-astro plugin, we need

      // to be able to use virtual: URLs there

      noExternal: [ '@apostrophecms/apostrophe-astro' ],

    },

    define: {

      'process.env.APOS_EXTERNAL_FRONT_KEY': JSON.stringify(env.APOS_EXTERNAL_FRONT_KEY),

      'process.env.APOS_HOST': JSON.stringify(env.APOS_HOST)

    }

  }

});
```

For complete configuration options and explanations, see the [`apostrophe-astro` documentation](https://apostrophecms.com/extensions/astro-integration#configuration-astro).

### Connecting ApostropheCMS widgets to Astro components

[Section titled Connecting ApostropheCMS widgets to Astro components](https://docs.astro.build/en/guides/cms/apostrophecms/#connecting-apostrophecms-widgets-to-astro-components)

ApostropheCMS widgets are blocks of structured content that can be added to the page such as layout columns, images, and text blocks. You will need to create an Astro component for each widget in your Apostrophe project, plus a file to map those components to the corresponding Apostrophe widget.

Create a new folder at `src/widgets/` for your Astro components and the mapping file, `index.js`.

Mapped components located in this folder receive a `widget` property containing your widget’s schema fields, and any custom props, through `Astro.props`. These values are then available for on-page editing.

The following example shows a `RichTextWidget.astro` component accessing the content from its corresponding ApostropheCMS widget to allow for in-context editing:

```

---

const { widget } = Astro.props;

const { content } = widget;

---

<Fragment set:html={ content }></Fragment>
```

Some standard Apostrophe widgets, such as images and videos, require **placeholders** because they do not contain editable content by default. The following example creates a standard `ImageWidget.astro` component that sets the `src` value conditionally to either the value of the `aposPlaceholder` image passed by the widget, a fallback image from the Astro project, or the image selected by the content manager using the Apostrophe `attachment` helper:

```

---

const { widget } = Astro.props;

const placeholder = widget?.aposPlaceholder;

const src = placeholder ?

  '/images/image-widget-placeholder.jpg' :

  widget?._image[0]?.attachment?._urls['full'];

---

<style>

  .img-widget {

    width: 100%;

  }

</style>

<img class="img-widget" {src} />
```

For more examples, see [the `astro-frontend` starter project widget examples](https://github.com/apostrophecms/astro-frontend/tree/main/src/widgets).

Each `.astro` component must be mapped to the corresponding core Apostrophe widget in `src/widgets/index.js`.

The example below adds the previous two components to this file:

```

import RichTextWidget from './RichTextWidget.astro';

import ImageWidget from './ImageWidget.astro';

const widgetComponents = {

  '@apostrophecms/rich-text': RichTextWidget,

  '@apostrophecms/image': ImageWidget

};

export default widgetComponents;
```

See [the ApostropheCMS documentation](https://apostrophecms.com/extensions/astro-integration) for naming conventions for standard, pro, and custom-project-level widgets

The project directory should now look like this:

- Directorysrc/


- Directorywidgets/


- **index.js**
- **ImageWidget.astro**
- **RichTextWidget.astro**

- .env
- astro.config.mjs
- package.json

### Adding page types

[Section titled Adding page types](https://docs.astro.build/en/guides/cms/apostrophecms/#adding-page-types)

Much like widgets, any page type template in your ApostropheCMS project needs to have a corresponding template component in your Astro project. You will also need a file that maps the Apostrophe page types to individual components.

Create a new folder at `src/templates/` for your Astro components and the mapping file, `index.js`. Mapped components located in this folder receive a `page` property containing the schema fields of your page, and any custom props, through `Astro.props`. These components can also access an `AposArea` component to render Apostrophe areas.

The following example shows a `HomePage.astro` component rendering a page template from its corresponding `home-page` ApostropheCMS page type, including an area schema field named `main`:

```

---

import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';

const { page, user, query } = Astro.props.aposData;

const { main } = page;

---

<section class="bp-content">

  <h1>{ page.title }</h1>

  <AposArea area={main} />

</section>
```

Each `.astro` component must be mapped to the corresponding core Apostrophe page type in `src/templates/index.js`.

The example below adds the previous `HomePage.astro` component to this file:

```

import HomePage from './HomePage.astro';

const templateComponents = {

  '@apostrophecms/home-page': HomePage

};

export default templateComponents;
```

See [the ApostropheCMS documentation](https://apostrophecms.com/extensions/astro-integration/#how-apostrophe-template-names-work) for template naming conventions, including special pages and piece page types.

The project directory should now look like this:

- Directorysrc/


- Directorywidgets/


- index.js
- ImageWidget.astro
- RichTextWidget.astro

- Directorytemplates/


- **HomePage.astro**
- **index.js**

- .env
- astro.config.mjs
- package.json

### Creating the \[…slug.astro\] component and fetching Apostrophe data

[Section titled Creating the \[…slug.astro\] component and fetching Apostrophe data](https://docs.astro.build/en/guides/cms/apostrophecms/#creating-the-slugastro-component-and-fetching-apostrophe-data)

Since Apostrophe is responsible for connecting URLs to content, including creating new content and pages on the fly, you will only need one top-level Astro page component: the `[...slug].astro` route.

The following example shows a minimal `[...slug].astro` component:

```

---

import aposPageFetch from '@apostrophecms/apostrophe-astro/lib/aposPageFetch.js';

import AposLayout from '@apostrophecms/apostrophe-astro/components/layouts/AposLayout.astro';

import AposTemplate from '@apostrophecms/apostrophe-astro/components/AposTemplate.astro';

const aposData = await aposPageFetch(Astro.request);

const bodyClass = `myclass`;

if (aposData.redirect) {

  return Astro.redirect(aposData.url, aposData.status);

}

if (aposData.notFound) {

  Astro.response.status = 404;

}

---

<AposLayout title={aposData.page?.title} {aposData} {bodyClass}>

    <Fragment slot="standardHead">

      <meta name="description" content={aposData.page?.seoDescription} />

      <meta name="viewport" content="width=device-width, initial-scale=1" />

      <meta charset="UTF-8" />

    </Fragment>

    <AposTemplate {aposData} slot="main"/>

</AposLayout>
```

See [the ApostropheCMS documentation](https://apostrophecms.com/extensions/astro-integration#creating-the-slugastro-component-and-fetching-apostrophe-data) for additional templating options, including slots available in the `AposTemplate` component.

## Making a blog with Astro and ApostropheCMS

[Section titled Making a blog with Astro and ApostropheCMS](https://docs.astro.build/en/guides/cms/apostrophecms/#making-a-blog-with-astro-and-apostrophecms)

With the integration set up, you can now create a blog with Astro and ApostropheCMS. Your blog will use an Apostrophe piece, a stand-alone content type that can be included on any page, and a piece page type, a specialized page type that is used for displaying those pieces either individually or collectively.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/apostrophecms/#prerequisites-1)

1. **An ApostropheCMS project with the Apostrophe CLI tool installed** \- You can create a new project or use an existing one. However, this tutorial will only show how to create a blog piece and piece page type. You will have to integrate any other existing project code independently. If you don’t have the CLI tool installed, consult the [Apostrophe CLI installation instructions](https://docs.apostrophecms.org/guide/setting-up.html#the-apostrophe-cli-tool).
2. **An Astro project integrated with ApostropheCMS** \- To create a project from scratch, see [integrating with Astro](https://docs.astro.build/en/guides/cms/apostrophecms/#integrating-with-astro) for instructions on how to set up the integration, or use the [astro-frontend](https://github.com/apostrophecms/astro-frontend) starter project.

### Creating a blog piece and piece page type

[Section titled Creating a blog piece and piece page type](https://docs.astro.build/en/guides/cms/apostrophecms/#creating-a-blog-piece-and-piece-page-type)

To create your blog piece and piece page type for their display, navigate to the root of your ApostropheCMS project in your terminal. Use the ApostropheCMS CLI tool to create the new piece and piece page type with the following command:

```

apos add piece blog --page
```

This will create two new modules in your project, one for the blog piece type and one for the corresponding piece page type. Next, open the `app.js` file at the root of your ApostropheCMS project in your code editor and add your new modules.

```

require('apostrophe')({

  // other configuration options

  modules: {

    // other project modules

    blog: {},

    'blog-page': {}

  }

});
```

The `blog-page` module also needs to be added to the `@apostrophecms/page` module `types` option array so that it can be selected in the page creation modal. In your ApostropheCMS project, open the `modules/@apostrophecms/page/index.js` file and add the `blog-page`.

```

module.exports = {

  options: {

    types: [\
\
      {\
\
        name: '@apostrophecms/home-page',\
\
        label: 'Home'\
\
      },\
\
      // Any other project pages\
\
      {\
\
        name: 'blog-page',\
\
        label: 'Blog'\
\
      }\
\
    ]

  }

};
```

### Creating the blog schema

[Section titled Creating the blog schema](https://docs.astro.build/en/guides/cms/apostrophecms/#creating-the-blog-schema)

In an ApostropheCMS project, editors are offered a set of input fields for adding content. Here is an example of a simple blog post that adds three input fields, an `authorName`, `publicationDate` and `content` area where content managers can add multiple widget instances. In this case, we are specifying they can add the image and rich-text widgets we created during the [integration setup](https://docs.astro.build/en/guides/cms/apostrophecms/#connecting-apostrophecms-widgets-to-astro-components).

```

module.exports = {

  extend: '@apostrophecms/piece-type',

  options: {

    label: 'Blog',

    // Additionally add a `pluralLabel` option if needed.

  },

  fields: {

    add: {

      authorName: {

        type: 'string',

        label: 'Author'

      },

      publicationDate: {

        type: 'date',

        label: 'Publication date'

      },

      content: {

        type: 'area',

        label: 'Content',

        options: {

          widgets: {

            '@apostrophecms/rich-text': {},

            '@apostrophecms/image': {}

          }

        }

      }

    },

    group: {

      basics: {

        label: 'Basic',

        fields: [ 'authorName', 'publicationDate', 'content' ]

      }

    }

  }

};
```

At this point, all the components coming from the ApostropheCMS project are set up. Start the local site from the command line using `npm run dev`, making sure to pass in the `APOS_EXTERNAL_FRONT_KEY` environment variable set to your selected string:

```

APOS_EXTERNAL_FRONT_KEY='MyRandomString' npm run dev
```

### Displaying the blog posts

[Section titled Displaying the blog posts](https://docs.astro.build/en/guides/cms/apostrophecms/#displaying-the-blog-posts)

To display a page with all the blog posts create a `BlogIndex.astro` component file in the `src/templates` directory of your Astro project and add the following code:

After fetching both the page and pieces data from the `aposData` prop, this component creates markup using both fields from the blog piece schema we created, but also from the `piece.title` and `piece._url` that is added to each piece by Apostrophe.

```

---

import dayjs from 'dayjs';

const { page, pieces } = Astro.props.aposData;

---

<section class="bp-content">

  <h1>{ page.title }</h1>

  <h2>Blog Posts</h2>

  {pieces.map(piece => (

    <h4>

      Released On { dayjs(piece.publicationDate).format('MMMM D, YYYY') }

    </h4>

    <h3>

      <a href={ piece._url }>{ piece.title }</a>

    </h3>

    <h4>{ piece.authorName }</h4>

  ))}

</section>
```

To display individual blog posts, create a `BlogShow.astro` file in the Astro project `src/templates` folder with the following code:

This component uses the `<AposArea>` component to display any widgets added to the `content` area and the `authorName` and `publicationDate` content entered into the fields of the same names.

```

---

import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';

import dayjs from 'dayjs';

const { page, piece } = Astro.props.aposData;

const { main } = piece;

---

<section class="bp-content">

  <h1>{ piece.title }</h1>

  <h3>Created by: { piece.authorName }

  <h4>

    Released On { dayjs(piece.publicationDate).format('MMMM D, YYYY') }

  </h4>

  <AposArea area={content} />

</section>
```

Finally, these Astro components must be mapped to the corresponding ApostropheCMS page types. Open the Astro project `src/templates/index.js` file and modify it to contain the following code:

```

import HomePage from './HomePage.astro';

import BlogIndexPage from './BlogIndexPage.astro';

import BlogShowPage from './BlogShowPage.astro';

const templateComponents = {

  '@apostrophecms/home-page': HomePage,

  '@apostrophecms/blog-page:index': BlogIndexPage,

  '@apostrophecms/blog-page:show': BlogShowPage

};

export default templateComponents;
```

### Creating blog posts

[Section titled Creating blog posts](https://docs.astro.build/en/guides/cms/apostrophecms/#creating-blog-posts)

Adding blog posts to your site is accomplished by using the ApostropheCMS content and management tools to create those posts and by publishing at least one index page to display them.

With the Astro dev server running, navigate to the login page located at [http://localhost:4321/login](http://localhost:4321/login) in your browser preview. Use the credentials that were added during the [creation of the ApostropheCMS project](https://docs.apostrophecms.org/guide/development-setup.html#creating-a-project) to log in as an administrator. Your ApostropheCMS project should still be running.

Once you are logged in, your browser will be redirected to the home page of your project and will display an admin bar at the top for editing content and managing your project.

To add your first blog post, click on the `Blogs` button in the admin bar to open the blog piece creation modal. Clicking on the `New Blog` button in the upper right will open an editing modal where you can add content. The `content` area field will allow you to add as many image and rich text widgets as you desire.

You can repeat this step and add as many posts as you want. You will also follow these steps every time you want to add a new post.

To publish a page for displaying all your posts, click on the `Pages` button in the admin bar. From the page tree modal click on the `New Page` button. In the `Type` dropdown in the right column select `Blog`. Add a title for the page and then click `Publish and View`. You will only need to do this once.

Any new blog posts that are created will be automatically displayed on this page. Individual blog posts can be displayed by clicking on the link created on the index page.

The `content` area of individual posts can be edited directly on the page by navigating to the post and clicking `edit` in the admin bar. Other fields can be edited by using the editing modal opened when clicking the `Blogs` menu item in the admin bar.

### Deploying your site

[Section titled Deploying your site](https://docs.astro.build/en/guides/cms/apostrophecms/#deploying-your-site)

To deploy your website, you need to host both your Astro and ApostropheCMS projects.

For Astro, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

For the ApostropheCMS project, follow the instructions for your hosting type in our [hosting guide](https://docs.apostrophecms.org/guide/hosting.html). Finally, you’ll need to supply an `APOS_HOST` environment variable to the Astro project to reflect the correct URL where your ApostropheCMS site has been deployed.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/apostrophecms/#official-resources)

- [Astro integration for ApostropheCMS](https://apostrophecms.com/extensions/astro-integration) \- ApostropheCMS Astro plugin, integration guide and starter projects for both Apostrophe and Astro
- [Sample Astro project for use with ApostropheCMS](https://github.com/apostrophecms/astro-frontend) \- A simple Astro project with several pages and Apostrophe widgets already created.
- [Sample ApostropheCMS starter-kit for use with Astro](https://apostrophecms.com/starter-kits/astro-integration-starter-kit) \- An ApostropheCMS project with core page modifications for use with Astro.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/apostrophecms/#community-resources)

- [Integrating ApostropheCMS with Astro, Pt. 1](https://apostrophecms.com/blog/how-to-integrate-astro-with-apostrophecms-pt-1) by Antonello Zaini
- [Integrating ApostropheCMS with Astro, Pt. 2](https://apostrophecms.com/blog/how-to-integrate-astro-with-apostrophecms-pt-2) by Antonello Zaini
- [Show & Tell Live \| Astro & Apostrophe](https://youtu.be/cwJhtJhAhwA?si=6iUU9EjidfdnOdCh)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Flotiq Integration Guide
[Skip to content](https://docs.astro.build/en/guides/cms/flotiq/#_top)

# Flotiq & Astro

[Flotiq](https://flotiq.com/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) is a headless CMS designed for various frontends, such as static sites, mobile, and web applications. Developers and content creators manage and deliver content through REST and GraphQL-based APIs.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/flotiq/#integrating-with-astro)

This guide will use the Flotiq headless CMS API with an Astro project to display content on your website.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/flotiq/#prerequisites)

To get started, you will need:

1. **An Astro project** \- You can create a new project using the `npm create astro@latest` command.
2. **A Flotiq account** \- If you don’t have an account, [sign up for free](https://editor.flotiq.com/register?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro).
3. **Flotiq read-only API key** \- Find out [how to obtain your key](https://flotiq.com/docs/API/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro).

### Setting up the Environment variables

[Section titled Setting up the Environment variables](https://docs.astro.build/en/guides/cms/flotiq/#setting-up-the-environment-variables)

Add the read-only API key from your Flotiq account to the `.env` file in the root of your Astro project:

```

FLOTIQ_API_KEY=__YOUR_FLOTIQ_API_KEY__
```

### Defining a Content Type in Flotiq

[Section titled Defining a Content Type in Flotiq](https://docs.astro.build/en/guides/cms/flotiq/#defining-a-content-type-in-flotiq)

First, you need to define an example [Content Type Definition](https://flotiq.com/docs/panel/content-types/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) in Flotiq to store data.

Log in to your Flotiq account and create a custom Content Type Definition with the following example `Blog Post` configuration:

- **Label**: Blog Post
- **API Name**: blogpost
- **Fields**:

  - **Title**: text, required
  - **Slug**: text, required
  - **Content**: rich text, required

Then, create one or more example [Content Objects](https://flotiq.com/docs/panel/content-objects/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) using this `Blog Post` type.

### Installing the Flotiq TypeScript SDK

[Section titled Installing the Flotiq TypeScript SDK](https://docs.astro.build/en/guides/cms/flotiq/#installing-the-flotiq-typescript-sdk)

To connect your project with Flotiq, install the [Flotiq SDK](https://github.com/flotiq/flotiq-api-ts) using the package manager of your choice:

- [npm](https://docs.astro.build/en/guides/cms/flotiq/#tab-panel-3069)
- [pnpm](https://docs.astro.build/en/guides/cms/flotiq/#tab-panel-3070)
- [Yarn](https://docs.astro.build/en/guides/cms/flotiq/#tab-panel-3071)

```

npm install flotiq-api-ts
```

```

pnpm add flotiq-api-ts
```

```

yarn add flotiq-api-ts
```

Next, configure the SDK using your credentials. Create a new file named `flotiq.ts` inside the `src/lib` directory of your project:

```

import { FlotiqApi } from "flotiq-api-ts";

export const flotiq = new FlotiqApi(import.meta.env.FLOTIQ_API_KEY);
```

This configuration can now be used throughout your project.

### Fetching and Displaying Data from Flotiq

[Section titled Fetching and Displaying Data from Flotiq](https://docs.astro.build/en/guides/cms/flotiq/#fetching-and-displaying-data-from-flotiq)

1. Fetch the `Blog Post` data on an Astro page using your content’s custom API `BlogpostAPI`:



```


   ---

import { flotiq } from "../lib/flotiq";




const posts = await flotiq.BlogpostAPI.list();

   ---
```

2. Display the content in your Astro template. You will have access to the `title`, `slug`, and `content` of your posts as well as other `internal` post data:



```


   ---

import { flotiq } from "../lib/flotiq";




const posts = await flotiq.BlogpostAPI.list();

   ---

<html lang="en">

     <head>

       <title>Astro</title>

     </head>

     <body>

       {posts.data?.map((post) => (

         <section>

           <a href={`/posts/${post.slug}`}>

             <h2>{post.title}</h2>

           </a>

           <div>{post.internal?.createdAt}</div>

           <div set:html={post.content}/>

         </section>

       ))}

     </body>

</html>
```

3. Start the dev server and visit your page preview at `http://localhost:4321` to see the list of your blog posts. Each post will link to a page that does not yet exist. These will be created in the next step.


### Generating Individual Pages

[Section titled Generating Individual Pages](https://docs.astro.build/en/guides/cms/flotiq/#generating-individual-pages)

Astro supports both prerendering all your pages ahead of time, or creating routes on demand when they are requested. Follow the instructions for either [static site generation](https://docs.astro.build/en/guides/cms/flotiq/#static-site-generation) or [on-demand rendering](https://docs.astro.build/en/guides/cms/flotiq/#on-demand-rendering) to build the page routes for your blog posts.

#### Static Site Generation

[Section titled Static Site Generation](https://docs.astro.build/en/guides/cms/flotiq/#static-site-generation)

In static site generation (SSG) mode, use the `getStaticPaths()` method to fetch all possible blog post paths from Flotiq.

1. Create a new file `[slug].astro` in the `/src/pages/posts/` directory. Fetch all blog posts and return them within the `getStaticPaths()` method:



```


   ---

import type { Blogpost } from "flotiq-api-ts";

import { flotiq } from "../../lib/flotiq";




export async function getStaticPaths() {

     const posts = await flotiq.BlogpostAPI.list();

     return posts.data?.map((post) => ({

       params: { slug: post.slug },

       props: post

     })) || []

}

   ---
```

2. Add the templating to display an individual post:



```


   ---

import type { Blogpost } from "flotiq-api-ts";

import { flotiq } from "../../lib/flotiq";




export async function getStaticPaths() {

     const posts = await flotiq.BlogpostAPI.list();

     return posts.data?.map((post) => ({

       params: { slug: post.slug },

       props: post

     })) || []

}

const post: Blogpost = Astro.props;

   ---

<html lang="en">

     <title>{post.title}</title>

     <body>

       <h1>{post.title}</h1>

       <div set:html={post.content}/>

     </body>

</html>
```

3. Visit `http://localhost:4321` and click on a linked blog post in your list. You will now be able to navigate to the individual post’s page.


#### On-demand Rendering

[Section titled On-demand Rendering](https://docs.astro.build/en/guides/cms/flotiq/#on-demand-rendering)

If you are using [SSR](https://docs.astro.build/en/guides/on-demand-rendering/) mode, you will need to fetch a single post based on its `slug`.

1. Create a new file `[slug].astro` in the `/src/pages/posts/` directory. Fetch the post by its `slug` field, including logic to display a 404 page when the route is not found:



```


   ---

import type { Blogpost } from "flotiq-api-ts";

import { flotiq } from "../../lib/flotiq";




const { slug } = Astro.params;

let post: Blogpost;




const blogpostList = await flotiq.BlogpostAPI.list({

     filters: JSON.stringify({

       slug: {

         type: 'equals',

         filter: slug,

       }

     }),

     limit: 1

});




if (blogpostList.data?.[0]) {

     post = blogpostList.data[0]

} else {

     return Astro.redirect('/404');

}

   ---
```

2. Add the templating to display an individual post:



```


   ---

import type { Blogpost } from "flotiq-api-ts";

import { flotiq } from "../../lib/flotiq";




const { slug } = Astro.params;

let post: Blogpost;




const blogpostList = await flotiq.BlogpostAPI.list({

     filters: JSON.stringify({

       slug: {

         type: 'equals',

         filter: slug,

       }

     }),

     limit: 1

});




if (blogpostList.data?.[0]) {

     post = blogpostList.data[0]

} else {

     return Astro.redirect('/404');

}

   ---

<html lang="en">

     <title>{post.title}</title>

     <body>

       <h1>{post.title}</h1>

       <div set:html={post.content}/>

     </body>

</html>
```

3. Visit `http://localhost:4321` and click on a linked blog post in your list. You will now be able to navigate to the individual post’s page.


### Refreshing the SDK After Content Type Changes

[Section titled Refreshing the SDK After Content Type Changes](https://docs.astro.build/en/guides/cms/flotiq/#refreshing-the-sdk-after-content-type-changes)

When using the Flotiq TypeScript SDK ( `flotiq-api-ts`), all your data types are accurately mapped into the Astro project.

If you make changes to the structure of your content types (such as adding a new field or modifying an existing one), you’ll need to refresh the SDK to ensure that your project reflects the latest model updates.

To do this, run the rebuild command for your package manager:

- [npm](https://docs.astro.build/en/guides/cms/flotiq/#tab-panel-3072)
- [pnpm](https://docs.astro.build/en/guides/cms/flotiq/#tab-panel-3073)
- [Yarn](https://docs.astro.build/en/guides/cms/flotiq/#tab-panel-3074)

```

npm rebuild flotiq-api-ts
```

```

pnpm rebuild flotiq-api-ts
```

```

yarn rebuild flotiq-api-ts

// for yarn v1 (Classic):

// yarn add flotiq-api-ts
```

This will update the SDK, aligning object types, fields, and API methods with your current data model.

## Publishing Your Site

[Section titled Publishing Your Site](https://docs.astro.build/en/guides/cms/flotiq/#publishing-your-site)

To deploy your website, visit Astro’s [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

### Redeploy on Flotiq Changes

[Section titled Redeploy on Flotiq Changes](https://docs.astro.build/en/guides/cms/flotiq/#redeploy-on-flotiq-changes)

To update your published site, configure Flotiq to send a webhook your hosting provider to trigger a rebuild whenever your content changes.

In Flotiq, you can define which Content Type and events it should trigger on, and configure it accordingly. See the [Flotiq Webhooks documentation](https://flotiq.com/docs/panel/webhooks/async-co-webhook/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) for more details.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/flotiq/#official-resources)

- [Flotiq documentation](https://flotiq.com/docs/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro)

## Community resources

[Section titled Community resources](https://docs.astro.build/en/guides/cms/flotiq/#community-resources)

- [Flotiq x Astro](https://maciekpalmowski.dev/blog/flotiq-cms-astro/) by Maciek Palmowski

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fflotiq%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=48260740)

## KeystoneJS Guide
[Skip to content](https://docs.astro.build/en/guides/cms/keystonejs/#_top)

# KeystoneJS & Astro

[KeystoneJS](https://keystonejs.com/) is an open source, headless content-management system that allows you to describe the structure of your schema.

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fkeystonejs%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=95975084)

## Astro Project Configuration
[Skip to content](https://docs.astro.build/en/guides/configuring-astro/#_top)

# Configuration overview

Astro is a flexible, unopinionated framework that allows you to configure your project in many different ways. This means that getting started with a new project might feel overwhelming: there is no “one best way” to set up your Astro project!

The guides in this “Configuration” section will help you familiarize yourself with the various files that allow you to configure and customize aspects of your project and development environment.

If this is your first Astro project, or if it’s been a while since you’ve set up a new project, use the following guides and reference in the documentation for assistance.

## The Astro config File

[Section titled The Astro config File](https://docs.astro.build/en/guides/configuring-astro/#the-astro-config-file)

The [Astro config file](https://docs.astro.build/en/reference/configuration-reference/) is a JavaScript file included at the root of every starter project:

```

import { defineConfig } from "astro/config";

export default defineConfig({

  // your configuration options here...

});
```

It is only required if you have something to configure, but most projects will use this file. The `defineConfig()` helper provides automatic IntelliSense in your IDE and is where you will add all your configuration options to tell Astro how to build and render your project to HTML.

We recommend using the default file format `.mjs` in most cases, or `.ts` if you want to write TypeScript in your config file. However, `astro.config.js` and `astro.config.cjs` are also supported.

Read Astro’s [configuration reference](https://docs.astro.build/en/reference/configuration-reference/) for a full overview of all supported configuration options.

## The TypeScript config File

[Section titled The TypeScript config File](https://docs.astro.build/en/guides/configuring-astro/#the-typescript-config-file)

Every Astro starter project includes a `tsconfig.json` file in your project. Astro’s [component script](https://docs.astro.build/en/basics/astro-components/#the-component-script) is Typescript, which provides Astro’s editor tooling and allows you to optionally add syntax to your JavaScript for type checking of your own project code.

Use the `tsconfig.json` file to configure the TypeScript template that will perform type checks on your code, configure TypeScript plugins, set import aliases, and more.

Read Astro’s [TypeScript guide](https://docs.astro.build/en/guides/typescript/) for a full overview of TypeScript options and Astro’s built-in utility types.

## Development Experience

[Section titled Development Experience](https://docs.astro.build/en/guides/configuring-astro/#development-experience)

While you work in development mode, you can take advantage of your code editor and other tools to improve the Astro developer experience.

Astro provides its own official VS Code extension and is compatible with several other popular editor tools. Astro also provides a customizable toolbar that displays in your browser preview while the dev server is running. You can install and even build your own toolbar apps for additional functionality.

Read Astro’s guides to [editor setup options](https://docs.astro.build/en/editor-setup/) and [using the dev toolbar](https://docs.astro.build/en/guides/dev-toolbar/) to learn how to customize your development experience.

## Common new project tasks

[Section titled Common new project tasks](https://docs.astro.build/en/guides/configuring-astro/#common-new-project-tasks)

Here are some first steps you might choose to take with a new Astro project.

### Add your deployment domain

[Section titled Add your deployment domain](https://docs.astro.build/en/guides/configuring-astro/#add-your-deployment-domain)

For generating your sitemap and creating canonical URLs, configure your deployment URL in the [`site`](https://docs.astro.build/en/reference/configuration-reference/#site) option. If you are deploying to a path (e.g. `www.example/docs`), you can also configure a [`base`](https://docs.astro.build/en/reference/configuration-reference/#base) for the root of your project.

Additionally, different deployment hosts may have different behavior regarding trailing slashes at the end of your URLs. (e.g. `example.com/about` vs `example.com/about/`). Once your site is deployed, you may need to configure your [`trailingSlash`](https://docs.astro.build/en/reference/configuration-reference/#trailingslash) preference.

```

import { defineConfig } from "astro/config";

export default defineConfig({

  site: "https://www.example.com",

  base: "/docs",

  trailingSlash: "always",

});
```

### Add site metadata

[Section titled Add site metadata](https://docs.astro.build/en/guides/configuring-astro/#add-site-metadata)

Astro does not use its configuration file for common SEO or meta data, only for information required to build your project code and render it to HTML.

Instead, this information is added to your page `<head>` in HTML `<link>` and `<meta>` tags, just as if you were writing plain HTML pages.

One common pattern for Astro sites is to create a `<Head />` [`.astro` component](https://docs.astro.build/en/basics/astro-components/) that can be added to a common [layout component](https://docs.astro.build/en/basics/layouts/) so it can apply to all your pages.

```

---

import Head from "./Head.astro";

const { ...props } = Astro.props;

---

<html>

  <head>

    <meta charset="utf-8">

    <Head />

    <!-- Additional head elements -->

  </head>

  <body>

    <!-- Page content goes here -->

  </body>

</html>
```

Because `Head.astro` is just a regular Astro component, you can import files and receive props passed from other components, such as a specific page title.

```

---

import Favicon from "../assets/Favicon.astro";

import SomeOtherTags from "./SomeOtherTags.astro";

const { title = "My Astro Website", ...props } = Astro.props;

---

<link rel="sitemap" href="/sitemap-index.xml">

<title>{title}</title>

<meta name="description" content="Welcome to my new Astro site!">

<!-- Web analytics -->

<script data-goatcounter="https://my-account.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

<!-- Open Graph tags -->

<meta property="og:title" content="My New Astro Website" />

<meta property="og:type" content="website" />

<meta property="og:url" content="http://www.example.com/" />

<meta property="og:description" content="Welcome to my new Astro site!" />

<meta property="og:image" content="https://www.example.com/_astro/seo-banner.BZD7kegZ.webp">

<meta property="og:image:alt" content="">

<SomeOtherTags />

<Favicon />
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fconfiguring-astro%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=12813241)

## External Links with Icons
[Skip to content](https://docs.astro.build/en/recipes/external-links/#_top)

# Add icons to external links

Using a rehype plugin, you can identify and modify links in your Markdown files that point to external sites. This example adds icons to the end of each external link, so that visitors will know they are leaving your site.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/recipes/external-links/#prerequisites)

- An Astro project using Markdown for content pages.

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/external-links/#recipe)

1. Install the `rehype-external-links` plugin.




- [npm](https://docs.astro.build/en/recipes/external-links/#tab-panel-1710)
- [pnpm](https://docs.astro.build/en/recipes/external-links/#tab-panel-1711)
- [Yarn](https://docs.astro.build/en/recipes/external-links/#tab-panel-1712)

```

npm install rehype-external-links
```

```

pnpm add rehype-external-links
```

```

yarn add rehype-external-links
```

2. Import the plugin into your `astro.config.mjs` file.

Pass `rehypeExternalLinks` to the `rehypePlugins` array, along with an options object that includes a content property. Set this property’s `type` to `text` if you want to add plain text to the end of the link. To add HTML to the end of the link instead, set the property `type` to `raw`.



```


// ...

import rehypeExternalLinks from 'rehype-external-links';




export default defineConfig({

     // ...

     markdown: {

       rehypePlugins: [\
\
         [\
\
           rehypeExternalLinks,\
\
           {\
\
             content: { type: 'text', value: ' 🔗' }\
\
           }\
\
         ],\
\
       ]

     },

});
```


## Resources

[Section titled Resources](https://docs.astro.build/en/recipes/external-links/#resources)

- [rehype-external-links](https://www.npmjs.com/package/rehype-external-links)

Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Frecipes%2Fexternal-links%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=82372293)

## Xata Integration Guide
[Skip to content](https://docs.astro.build/en/guides/backend/xata/#_top)

# Xata & Astro

[Xata](https://xata.io/) is a **Serverless Data Platform** that combines the features of a relational database, a search engine, and an analytics engine by exposing a single consistent REST API.

## Adding a database with Xata

[Section titled Adding a database with Xata](https://docs.astro.build/en/guides/backend/xata/#adding-a-database-with-xata)

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/backend/xata/#prerequisites)

- A [Xata](https://app.xata.io/signin) account with a created database. (You can use the sample database from the Web UI.)
- An Access Token ( `XATA_API_KEY`).
- Your Database URL.

After you update and initialize the [Xata CLI](https://xata.io/docs/getting-started/installation), you will have your API token in your `.env` file and database URL defined.

By the end of the setup, you should have:

```

XATA_API_KEY=hash_key

# Xata branch that will be used

# if there's not a xata branch with

# the same name as your git branch

XATA_BRANCH=main
```

And the `databaseURL` defined:

```

{

  "databaseUrl": "https://your-database-url"

}
```

### Environment configuration

[Section titled Environment configuration](https://docs.astro.build/en/guides/backend/xata/#environment-configuration)

To have IntelliSense and type safety for your environment variables, edit or create the file `env.d.ts` in your `src/` directory:

```

interface ImportMetaEnv {

  readonly XATA_API_KEY: string;

  readonly XATA_BRANCH?: string;

}

interface ImportMeta {

  readonly env: ImportMetaEnv;

}
```

Using the code generation from the Xata CLI and choosing the TypeScript option, generated an instance of the SDK for you, with types tailored to your database schema. Additionally, `@xata.io/client` was added to your `package.json`.

Your Xata environment variables and database url were automatically pulled by the SDK instance, so there’s no more setup work needed.

Now, your project should have the following structure:

- Directorysrc/


- **xata.ts**
- **env.d.ts**

- **.env**
- astro.config.mjs
- package.json
- **.xatarc**

## Create your queries

[Section titled Create your queries](https://docs.astro.build/en/guides/backend/xata/#create-your-queries)

To query your posts, import and use `XataClient` class in a `.astro` file. The example below queries the first 50 posts from Xata’s Sample Blog Database.

```

---

import { XataClient } from '../../xata';

const xata = new XataClient({

  apiKey: import.meta.env.XATA_API_KEY,

  branch: import.meta.env.XATA_BRANCH

});

const { records } = await xata.db.Posts.getPaginated({

  pagination: {

    size: 50

  }

})

---

<ul>

  {records.map((post) => (

    <li>{post.title}</li>

  ))}

</ul>
```

It’s important to note the SDK needs to be regenerated everytime your schema changes. So, avoid making changes to the generated files the Xata CLI creates because once schema updates, your changes will be overwritten.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/backend/xata/#official-resources)

- [Xata Astro Starter](https://github.com/xataio/examples/tree/main/apps/getting-started-astro)
- [Xata Docs: Quick Start Guide](https://xata.io/docs/getting-started/quickstart-astro)

## More backend service guides

- ![](https://docs.astro.build/logos/appwriteio.svg)



### [Appwrite](https://docs.astro.build/en/guides/backend/appwriteio/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Firebase](https://docs.astro.build/en/guides/backend/google-firebase/)

- ![](https://docs.astro.build/logos/neon.svg)



### [Neon](https://docs.astro.build/en/guides/backend/neon/)

- ![](https://docs.astro.build/logos/sentry.svg)



### [Sentry](https://docs.astro.build/en/guides/backend/sentry/)

- ![](https://docs.astro.build/logos/supabase.svg)



### [Supabase](https://docs.astro.build/en/guides/backend/supabase/)

- ![](https://docs.astro.build/logos/turso.svg)



### [Turso](https://docs.astro.build/en/guides/backend/turso/)

- ![](https://docs.astro.build/logos/xata.svg)



### [Xata](https://docs.astro.build/en/guides/backend/xata/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fbackend%2Fxata%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=1732725)

## Drupal and Astro Integration
[Skip to content](https://docs.astro.build/en/guides/cms/drupal/#_top)

# Drupal & Astro

[Drupal](https://www.drupal.org/) is an open-source content management tool.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/drupal/#prerequisites)

To get started, you will need to have the following:

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **A Drupal site** \- If you haven’t set up a Drupal site, you can follow the official guidelines [Installing Drupal](https://www.drupal.org/docs/getting-started/installing-drupal).


## Integrating Drupal with Astro

[Section titled Integrating Drupal with Astro](https://docs.astro.build/en/guides/cms/drupal/#integrating-drupal-with-astro)

### Installing the JSON:API Drupal module

[Section titled Installing the JSON:API Drupal module](https://docs.astro.build/en/guides/cms/drupal/#installing-the-jsonapi-drupal-module)

To be able to get content from Drupal you need to enable the [Drupal JSON:API module](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module).

1. Navigate to the Extend page `admin/modules` via the Manage administrative menu
2. Locate the JSON:API module and check the box next to it
3. Click Install to install the new module

Now you can make `GET` requests to your Drupal application through JSON:API.

### Adding the Drupal URL in `.env`

[Section titled Adding the Drupal URL in .env](https://docs.astro.build/en/guides/cms/drupal/#adding-the-drupal-url-in-env)

To add your Drupal URL to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variable:

```

DRUPAL_BASE_URL="https://drupal.ddev.site/"
```

Restart the dev server to use this environment variable in your Astro project.

### Setting up Credentials

[Section titled Setting up Credentials](https://docs.astro.build/en/guides/cms/drupal/#setting-up-credentials)

By default, the Drupal JSON:API endpoint is accessible for external data-fetching requests without requiring authentication. This allows you to fetch data for your Astro project without credentials but it does not permit users to modify your data or site settings.

However, if you wish to restrict access and require authentication, Drupal provides [several authentication methods](https://www.drupal.org/docs/contributed-modules/api-authentication) including:

- [Basic Authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/setup-basic-authentication)
- [API Key-based authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/api-key-authentication)
- [Access Token/OAuth-based authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/setup-access-token-oauth-based-authentication)
- [JWT Token-based authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/jwt-authentication)
- [Third-Party Provider token authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/rest-api-authentication-using-external-identity-provider)

You can add your credentials to your `.env` file.

```

DRUPAL_BASIC_USERNAME="editor"

DRUPAL_BASIC_PASSWORD="editor"

DRUPAL_JWT_TOKEN="abc123"

...
```

Read more about [using environment variables](https://docs.astro.build/en/guides/environment-variables/) and `.env` files in Astro.

Your root directory should now include this new files:

- **.env**
- astro.config.mjs
- package.json

### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/drupal/#installing-dependencies)

JSON:API requests and responses can often be complex and deeply nested. To simplify working with them, you can use two npm packages that streamline both the requests and the handling of responses:

- [`JSONA`](https://www.npmjs.com/package/jsona): JSON API v1.0 specification serializer and deserializer for use on the server and in the browser.
- [`Drupal JSON-API Params`](https://www.npmjs.com/package/drupal-jsonapi-params): This module provides a helper Class to create the required query. While doing so, it also tries to optimise the query by using the short form, whenever possible.

- [npm](https://docs.astro.build/en/guides/cms/drupal/#tab-panel-3075)
- [pnpm](https://docs.astro.build/en/guides/cms/drupal/#tab-panel-3076)
- [Yarn](https://docs.astro.build/en/guides/cms/drupal/#tab-panel-3077)

```

npm install jsona drupal-jsonapi-params
```

```

pnpm add jsona drupal-jsonapi-params
```

```

yarn add jsona drupal-jsonapi-params
```

## Fetching data from Drupal

[Section titled Fetching data from Drupal](https://docs.astro.build/en/guides/cms/drupal/#fetching-data-from-drupal)

Your content is fetched from a JSON:API URL.

### Drupal JSON:API URL structure

[Section titled Drupal JSON:API URL structure](https://docs.astro.build/en/guides/cms/drupal/#drupal-jsonapi-url-structure)

The basic URL structure is: `/jsonapi/{entity_type_id}/{bundle_id}`

The URL is always prefixed by `jsonapi`.

- The `entity_type_id` refers to the Entity Type, such as node, block, user, etc.
- The `bundle_id` refers to the Entity Bundles. In the case of a Node entity type, the bundle could be article.
- In this case, to get the list of all articles, the URL will be `[DRUPAL_BASE_URL]/jsonapi/node/article`.

To retrieve an individual entity, the URL structure will be `/jsonapi/{entity_type_id}/{bundle_id}/{uuid}`, where the uuid is the UUID of the entity. For example the URL to get a specific article will be of the form `/jsonapi/node/article/2ee9f0ef-1b25-4bbe-a00f-8649c68b1f7e`.

#### Retrieving only certain fields

[Section titled Retrieving only certain fields](https://docs.astro.build/en/guides/cms/drupal/#retrieving-only-certain-fields)

Retrieve only certain field by adding the Query String field to the request.

GET: `/jsonapi/{entity_type_id}/{bundle_id}?field[entity_type]=field_list`

Examples:

- `/jsonapi/node/article?fields[node--article]=title,created`
- `/jsonapi/node/article/2ee9f0ef-1b25-4bbe-a00f-8649c68b1f7e?fields[node--article]=title,created,body`

#### Filtering

[Section titled Filtering](https://docs.astro.build/en/guides/cms/drupal/#filtering)

Add a filter to your request by adding the filter Query String.

The simplest, most common filter is a key-value filter:

GET: `/jsonapi/{entity_type_id}/{bundle_id}?filter[field_name]=value&filter[field_other]=value`

Examples:

- `/jsonapi/node/article?filter[title]=Testing JSON:API&filter[status]=1`
- `/jsonapi/node/article/2ee9f0ef-1b25-4bbe-a00f-8649c68b1f7e?fields[node--article]=title&filter[title]=Testing JSON:API`

You can find more query options in the [JSON:API Documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module).

### Building a Drupal query

[Section titled Building a Drupal query](https://docs.astro.build/en/guides/cms/drupal/#building-a-drupal-query)

Astro components can fetch data from your Drupal site by using `drupal-jsonapi-params` package to build the query.

The following example shows a component with a query for an “article” content type that has a text field for a title and a rich text field for content:

```

---

import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";

// Get the Drupal base URL

export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;

// Generate the JSON:API Query. Get all title and body from published articles.

const params: DrupalJsonApiParams = new DrupalJsonApiParams();

params.addFields("node--article", [\
\
        "title",\
\
        "body",\
\
    ])

    .addFilter("status", "1");

// Generates the query string.

const path: string = params.getQueryString();

const url: string = baseUrl + '/jsonapi/node/article?' + path;

// Get the articles

const request: Response = await fetch(url);

const json: string | TJsonApiBody = await request.json();

// Initiate Jsona.

const dataFormatter: Jsona = new Jsona();

// Deserialise the response.

const articles = dataFormatter.deserialize(json);

---

<body>

 {articles?.length ? articles.map((article: any) => (

    <section>

      <h2>{article.title}</h2>

      <article set:html={article.body.value}></article>

    </section>

 )): <div><h1>No Content found</h1></div> }

</body>
```

You can find more querying options in the [Drupal JSON:API Documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/jsonapi)

## Making a blog with Astro and Drupal

[Section titled Making a blog with Astro and Drupal](https://docs.astro.build/en/guides/cms/drupal/#making-a-blog-with-astro-and-drupal)

With the setup above, you are now able to create a blog that uses Drupal as the CMS.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/drupal/#prerequisites-1)

1. **An Astro project** with [`JSONA`](https://www.npmjs.com/package/jsona) and [`Drupal JSON-API Params`](https://www.npmjs.com/package/drupal-jsonapi-params) installed.

2. **A Drupal site with at least one entry** \- For this tutorial we recommend starting with a new Drupal site with Standard installation.

In the **Content** section of your Drupal site, create a new entry by clicking the **Add** button. Then, choose Article and fill in the fields:


   - **Title:** `My first article for Astro!`
   - **Alias:** `/articles/first-article-for astro`
   - **Description:** `This is my first Astro article! Let's see what it will look like!`

Click **Save** to create your first Article. Feel free to add as many articles as you want.

### Displaying a list of articles

[Section titled Displaying a list of articles](https://docs.astro.build/en/guides/cms/drupal/#displaying-a-list-of-articles)

1. Create `src/types.ts` if it does not already exist and add two new interfaces called `DrupalNode` and `Path` with the following code. These interfaces will match the fields of your article content type in Drupal and the Path fields. You will use it to type your article entries response.



```


export interface Path {

       alias: string

       pid: number

       langcode: string

}




export interface DrupalNode extends Record<string, any> {

       id: string

       type: string

       langcode: string

       status: boolean

       drupal_internal__nid: number

       drupal_internal__vid: number

       changed: string

       created: string

       title: string

       default_langcode: boolean

       sticky: boolean

       path: Path

}
```









Your src directory should now include the new file:


- .env
- astro.config.mjs
- package.json
- Directorysrc/


- **types.ts**

2. Create a new file called `drupal.ts` under `src/api` and add the following code:



```


import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {DrupalNode} from "../types.ts";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




// Get the Drupal Base Url.

export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;
```









This will import the required libraries such as `Jsona` to deserialize the response, `DrupalJsonApiParams` to format the request url and the Node and Jsona types. It will also get the `baseUrl` from the `.env` file.

Your src/api directory should now include the new file:


- .env
- astro.config.mjs
- package.json
- Directorysrc/


- Directoryapi/


- **drupal.ts**

- types.ts

3. In that same file, create the `fetchUrl` function to make the fetch request and deserialize the response.



```


import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {DrupalNode} from "../types.ts";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




// Get the Drupal Base Url.

export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;




/**

    * Fetch url from Drupal.

    *

    * @param url

    *

    * @return Promise<TJsonaModel | TJsonaModel[]> as Promise<any>

    */

export const fetchUrl = async (url: string): Promise<any> => {

       const request: Response = await fetch(url);

       const json: string | TJsonApiBody = await request.json();

       const dataFormatter: Jsona = new Jsona();

       return dataFormatter.deserialize(json);

}
```

4. Create the `getArticles()` function to get all published articles.



```


import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {DrupalNode} from "../types.ts";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




// Get the Drupal Base Url.

export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;




/**

    * Fetch url from Drupal.

    *

    * @param url

    *

    * @return Promise<TJsonaModel | TJsonaModel[]> as Promise<any>

    */

export const fetchUrl = async (url: string): Promise<any> => {

       const request: Response = await fetch(url);

       const json: string | TJsonApiBody = await request.json();

       const dataFormatter: Jsona = new Jsona();

       return dataFormatter.deserialize(json);

}




/**

    * Get all published articles.

    *

    * @return Promise<DrupalNode[]>

    */

export const getArticles = async (): Promise<DrupalNode[]> => {

       const params: DrupalJsonApiParams = new DrupalJsonApiParams();

       params

           .addFields("node--article", [\
\
               "title",\
\
               "path",\
\
               "body",\
\
               "created",\
\
           ])

           .addFilter("status", "1");

       const path: string = params.getQueryString();

       return await fetchUrl(baseUrl + '/jsonapi/node/article?' + path);

}
```









Now you can use the function `getArticles()` in an `.astro` component to get all published articles with data for each title, body, path and creation date.

5. Go to the Astro page where you will fetch data from Drupal. The following example creates an articles landing page at `src/pages/articles/index.astro`.

Import the necessary dependencies and fetch all the entries from Drupal with a content type of `article` using `getArticles()` while passing the `DrupalNode` interface to type your response.



```


   ---

import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




import type { DrupalNode } from "../../types";

import {getArticles} from "../../api/drupal";




// Get all published articles.

const articles = await getArticles();

   ---
```









This fetch call using getArticles() will return a typed array of entries that can be used in your page template.

Your `src/pages/` directory should now include the new file, if you used the same page file:


- .env
- astro.config.mjs
- package.json
- Directorysrc/


- Directoryapi/


- drupal.ts

- Directorypages/


- Directoryarticles/


- **index.astro**

- types.ts

6. Add content to your page, such as a title. Use `articles.map()` to show your Drupal entries as line items in a list.



```


   ---

import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




import type { DrupalNode } from "../types";

import {getArticles} from "../api/drupal";




// Get all published articles.

const articles = await getArticles();

   ---

<html lang="en">

     <head>

       <title>My news site</title>

     </head>

     <body>

       <h1>My news site</h1>

       <ul>

         {articles.map((article: DrupalNode) => (

           <li>

             <a href={article.path.alias.replace("internal:en/", "")}>

               <h2>{article.title}</h2>

               <p>Published on {article.created}</p>

             </a>

           </li>

         ))}

       </ul>

     </body>

</html>
```


### Generating individual blog posts

[Section titled Generating individual blog posts](https://docs.astro.build/en/guides/cms/drupal/#generating-individual-blog-posts)

Use the same method to fetch your data from Drupal as above, but this time, on a page that will create a unique page route for each article.

This example uses Astro’s default static mode, and creates [a dynamic routing page file](https://docs.astro.build/en/guides/routing/#dynamic-routes) with the `getStaticPaths()` function. This function will be called at build time to generate the list of paths that become pages.

1. Create a new file `src/pages/articles/[path].astro` and import the `DrupalNode` interface and `getArticle()` from `src/api/drupal.ts`. Fetch your data inside a `getStaticPaths()` function to create routes for your blog.



```


   ---

import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




import type { DrupalNode } from "../../types";

import {getArticles} from "../../api/drupal";




// Get all published articles.

export async function getStaticPaths() {

     const articles = await getArticles();

}

   ---
```









Your src/pages/articles directory should now include the new file:


- .env
- astro.config.mjs
- package.json
- Directorysrc/


- Directoryapi/


- drupal.ts

- Directorypages/


- Directoryarticles/


- index.astro
- **\[path\].astro**

- types.ts

2. In the same file, map each Drupal entry to an object with a `params` and `props` property. The `params` property will be used to generate the URL of the page and the `props` values will be passed to the page component as props.



```


   ---

import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




import type { DrupalNode } from "../../types";

import {getArticles} from "../../api/drupal";




// Get all published articles.

export async function getStaticPaths() {

       const articles = await getArticles();

       return articles.map((article: DrupalNode) => {

           return {

               params: {

                   // Choose `path` to match the `[path]` routing value

                   path: article.path.alias.split('/')[2]

               },

               props: {

                   title: article.title,

                   body: article.body,

                   date: new Date(article.created).toLocaleDateString('en-EN', {

                       day: "numeric",

                       month: "long",

                       year: "numeric"

                   })

               }

           }

       });

}

   ---
```









The property inside `params` must match the name of the dynamic route. Since the filename is `[path].astro`, the property name passed to `params` must be `path`.

In our example, the `props` object passes three properties to the page:
   - `title`: a string, representing the title of your post.
   - `body`: a string, representing the content of your entry.
   - `date`: a timestamp, based on your file creation date.
3. Use the page `props` to display your blog post.



```


   ---

import {Jsona} from "jsona";

import {DrupalJsonApiParams} from "drupal-jsonapi-params";

import type {TJsonApiBody} from "jsona/lib/JsonaTypes";




import type { DrupalNode } from "../../types";

import {getArticles} from "../../api/drupal";




// Get all published articles.

export async function getStaticPaths() {

       const articles = await getArticles();

       return articles.map((article: DrupalNode) => {

           return {

               params: {

                   path: article.path.alias.split('/')[2]

               },

               props: {

                   title: article.title,

                   body: article.body,

                   date: new Date(article.created).toLocaleDateString('en-EN', {

                       day: "numeric",

                       month: "long",

                       year: "numeric"

                   })

               }

           }

       });

}




const {title, date, body} = Astro.props;

   ---

<html lang="en">

     <head>

       <title>{title}</title>

     </head>

     <body>

       <h1>{title}</h1>

       <time>{date}</time>

       <article set:html={body.value} />

     </body>

</html>
```

4. Navigate to your dev server preview and click on one of your posts to make sure your dynamic route is working.


### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/drupal/#publishing-your-site)

To deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/drupal/#community-resources)

[Create a web application with Astro and Drupal](https://www.linkedin.com/pulse/create-web-application-astrojs-website-generator-using-gambino-kx6cf)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## GitCMS for Astro
[Skip to content](https://docs.astro.build/en/guides/cms/gitcms/#_top)

# GitCMS & Astro

[GitCMS](https://gitcms.blog/) turns GitHub into a Git-based headless CMS, offering a Notion-like markdown editing experience right in your browser.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/gitcms/#official-resources)

- [Introducing GitCMS](https://gitcms.blog/posts/introducing-gitcms/)
- [How to Configure GitCMS for an Astro Site](https://gitcms.blog/posts/how-to-configure-gitcms/)
- [Install GitCMS Chrome Extension](https://gitcms.blog/extension)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fgitcms%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=59378510)

## Cosmic CMS Integration
[Skip to content](https://docs.astro.build/en/guides/cms/cosmic/#_top)

# Cosmic & Astro

[Cosmic](https://www.cosmicjs.com/) is a [headless CMS](https://www.cosmicjs.com/headless-cms) that provides an admin dashboard to manage content and an API that can integrate with a diverse range of frontend tools.

## Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/cosmic/#prerequisites)

1. **An Astro project**\- If you’d like to start with a fresh Astro project, read the [installation guide](https://docs.astro.build/en/install-and-setup/). This guide follows a simplified version of the [Astro Headless CMS Theme](https://astro.build/themes/details/cosmic-cms-blog/) with [Tailwind CSS](https://tailwindcss.com/) for styling.
2. **A Cosmic account and Bucket** \- [Create a free Cosmic account](https://app.cosmicjs.com/signup) if you don’t have one. After creating your account, you’ll be prompted to create a new empty project. There’s also a [Simple Astro Blog template](https://www.cosmicjs.com/marketplace/templates/simple-astro-blog) available (this is the same template as the Astro Headless CMS Theme) to automatically import all of the content used in this guide.
3. **Your Cosmic API keys** \- From your Cosmic dashboard, you will need to locate both the **Bucket slug** and **Bucket read key** in order to connect to Cosmic.

## Integrating Cosmic with Astro

[Section titled Integrating Cosmic with Astro](https://docs.astro.build/en/guides/cms/cosmic/#integrating-cosmic-with-astro)

### Installing Necessary Dependencies

[Section titled Installing Necessary Dependencies](https://docs.astro.build/en/guides/cms/cosmic/#installing-necessary-dependencies)

Add the [Cosmic JavaScript SDK](https://www.npmjs.com/package/@cosmicjs/sdk) to fetch data from your Cosmic Bucket.

- [npm](https://docs.astro.build/en/guides/cms/cosmic/#tab-panel-3063)
- [pnpm](https://docs.astro.build/en/guides/cms/cosmic/#tab-panel-3064)
- [Yarn](https://docs.astro.build/en/guides/cms/cosmic/#tab-panel-3065)

```

npm install @cosmicjs/sdk
```

```

pnpm add @cosmicjs/sdk
```

```

yarn add @cosmicjs/sdk
```

### Configuring API Keys

[Section titled Configuring API Keys](https://docs.astro.build/en/guides/cms/cosmic/#configuring-api-keys)

Create a `.env` file at the root of your Astro project (if it does not already exist). Add both the **Bucket slug** and **Bucket read key** available from your Cosmic dashboard as public environment variables.

```

PUBLIC_COSMIC_BUCKET_SLUG=YOUR_BUCKET_SLUG

PUBLIC_COSMIC_READ_KEY=YOUR_READ_KEY
```

## Fetching Data from Cosmic

[Section titled Fetching Data from Cosmic](https://docs.astro.build/en/guides/cms/cosmic/#fetching-data-from-cosmic)

1. Create a new file called `cosmic.js`. Place this file inside of the `src/lib` folder in your project.

2. Add the following code to fetch data from Cosmic using the SDK and your environment variables.

The example below creates a function called `getAllPosts()` to fetch metadata from Cosmic `posts` objects:



```


import { createBucketClient } from '@cosmicjs/sdk'




const cosmic = createBucketClient({

     bucketSlug: import.meta.env.PUBLIC_COSMIC_BUCKET_SLUG,

     readKey: import.meta.env.PUBLIC_COSMIC_READ_KEY

})




export async function getAllPosts() {

     const data = await cosmic.objects

       .find({

         type: 'posts'

       })

       .props('title,slug,metadata,created_at')

     return data.objects

}
```









Read more about [queries in the Cosmic documentation](https://www.cosmicjs.com/docs/api/queries).

3. Import your query function in a `.astro` component. After fetching data, the results from the query can be used in your Astro template.

The following example shows fetching metadata from Cosmic `posts` and passing these values as props to a `<Card />` component to create a list of blog posts:



```


   ---

import Card from '../components/Card.astro'

import { getAllPosts } from '../lib/cosmic'




const data = await getAllPosts()

   ---




<section>

     <ul class="grid gap-8 md:grid-cols-2">

       {

         data.map((post) => (

           <Card

             title={post.title}

             href={post.slug}

             body={post.metadata.excerpt}

             tags={post.metadata.tags.map((tag) => tag)}

           />

         ))

       }

     </ul>

</section>
```









[View source code for the Card component](https://github.com/cosmicjs/simple-astro-blog/blob/main/src/components/Card.astro)


## Building a Blog with Astro and Cosmic

[Section titled Building a Blog with Astro and Cosmic](https://docs.astro.build/en/guides/cms/cosmic/#building-a-blog-with-astro-and-cosmic)

You can manage your Astro blog’s content using Cosmic and create webhooks to automatically redeploy your website when you update or add new content.

### Cosmic Content Objects

[Section titled Cosmic Content Objects](https://docs.astro.build/en/guides/cms/cosmic/#cosmic-content-objects)

The following instructions assume that you have an **Object Type** in Cosmic called **posts**. Each individual blog post is a `post` that is defined in the Cosmic dashboard with the following Metafields:

1. **Text input** \- Author
2. **Image** \- Cover Image
3. **Repeater** \- Tags

   - **Text input** \- Title
4. **Text area** \- Excerpt
5. **Rich Text** \- Content

### Displaying a List of Blog Posts in Astro

[Section titled Displaying a List of Blog Posts in Astro](https://docs.astro.build/en/guides/cms/cosmic/#displaying-a-list-of-blog-posts-in-astro)

Using the same [data-fetching method](https://docs.astro.build/en/guides/cms/cosmic/#fetching-data-from-cosmic) as above, import the `getAllPosts()` query from your script file and await the data. This function provides metadata about each `post` which can be displayed dynamically.

The example below passes these values to a `<Card />` component to display a formatted list of blog posts:

```

---

import Card from '../components/Card.astro'

import { getAllPosts } from '../lib/cosmic'

const data = await getAllPosts()

---

<section>

  <ul class="grid gap-8 md:grid-cols-2">

    {

      data.map((post) => (

        <Card

          title={post.title}

          href={post.slug}

          body={post.metadata.excerpt}

          tags={post.metadata.tags.map((tag) => tag)}

        />

      ))

    }

  </ul>

</section>
```

### Generating Individual Blog Posts with Astro

[Section titled Generating Individual Blog Posts with Astro](https://docs.astro.build/en/guides/cms/cosmic/#generating-individual-blog-posts-with-astro)

To generate an individual page with full content for each blog post, create a [dynamic routing page](https://docs.astro.build/en/guides/routing/#dynamic-routes) at `src/pages/blog/[slug].astro`.

This page will export a `getStaticPaths()` function to generate a page route at the `slug` returned from each `post` object. This function is called at build time and generates and renders all of your blog posts at once.

To access your data from Cosmic:

- Query Cosmic inside of `getStaticPaths()` to fetch data about each post and provide it to the function.
- Use each `post.slug` as a route parameter, creating the URLs for each blog post.
- Return each `post` inside of `Astro.props`, making the post data available to HTML template portion of the page component for rendering.

The HTML markup below uses various data from Cosmic, such as the post title, cover image, and the **rich text content** (full blog post content). Use [set:html](https://docs.astro.build/en/reference/directives-reference/#sethtml) on the element displaying the rich text content from Cosmic to render HTML elements on the page exactly as fetched from Cosmic.

```

---

import { getAllPosts } from '../../lib/cosmic'

import { Image } from 'astro:assets'

export async function getStaticPaths() {

  const data = (await getAllPosts()) || []

  return data.map((post) => {

    return {

      params: { slug: post.slug },

      props: { post }

    }

  })

}

const { post } = Astro.props

---

<article class="mx-auto max-w-screen-md pt-20">

  <section class="border-b pb-8">

    <h1 class="text-4xl font-bold">{post.title}</h1>

    <div class="my-4"></div>

    <span class="text-sm font-semibold">{post.metadata.author?.title}</span>

  </section>

  {

    post.metadata.cover_image && (

      <Image

        src={post.metadata.cover_image.imgix_url}

        format="webp"

        width={1200}

        height={675}

        aspectRatio={16 / 9}

        quality={50}

        alt={`Cover image for the blog ${post.title}`}

        class={'my-12 rounded-md shadow-lg'}

      />

    )

  }

  <div set:html={post.metadata.content} />

</article>
```

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/cosmic/#publishing-your-site)

To deploy your website, visit the [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

#### Rebuild on Cosmic content updates

[Section titled Rebuild on Cosmic content updates](https://docs.astro.build/en/guides/cms/cosmic/#rebuild-on-cosmic-content-updates)

You can set up a webhook in Cosmic directly to trigger a redeploy of your site on your hosting platform (e.g. Vercel) whenever you update or add content Objects.

Under “Settings” > “webhooks”, add the URL endpoint from Vercel and select the Object Type you would like to trigger the webhook. Click “Add webhook” to save it.

##### Netlify

[Section titled Netlify](https://docs.astro.build/en/guides/cms/cosmic/#netlify)

To set up a webhook in Netlify:

1. Go to your site dashboard and click on **Build & deploy**.

2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.

3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.


##### Vercel

[Section titled Vercel](https://docs.astro.build/en/guides/cms/cosmic/#vercel)

To set up a webhook in Vercel:

1. Go to your project dashboard and click on **Settings**.

2. Under the **Git** tab, find the **Deploy Hooks** section.

3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.


## Themes

[Section titled Themes](https://docs.astro.build/en/guides/cms/cosmic/#themes)

- [![](https://docs.astro.build/_astro/simple-astro-blog.Dl86rePH_ZijHC7.webp)Astro Headless CMS Blog](https://astro.build/themes/details/cosmic-cms-blog/)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Development Guide
[Skip to content](https://docs.astro.build/en/develop-and-build/#_top)

# Develop and build

Once you have an Astro project, now you’re ready to build with Astro! 🚀

## Edit your project

[Section titled Edit your project](https://docs.astro.build/en/develop-and-build/#edit-your-project)

To make changes to your project, open your project folder in your code editor. Working in development mode with the dev server running allows you to see updates to your site as you edit the code.

You can also [customize aspects of your development environment](https://docs.astro.build/en/develop-and-build/#configure-your-dev-environment) such as configuring TypeScript or installing the official Astro editor extensions.

### Start the Astro dev server

[Section titled Start the Astro dev server](https://docs.astro.build/en/develop-and-build/#start-the-astro-dev-server)

Astro comes with a built-in development server that has everything you need for project development. The `astro dev` CLI command will start the local development server so that you can see your new website in action for the very first time.

Every starter template comes with a pre-configured script that will run `astro dev` for you. After navigating into your project directory, use your favorite package manager to run this command and start the Astro development server.

- [npm](https://docs.astro.build/en/develop-and-build/#tab-panel-1271)
- [pnpm](https://docs.astro.build/en/develop-and-build/#tab-panel-1272)
- [yarn](https://docs.astro.build/en/develop-and-build/#tab-panel-1273)

```

npm run dev
```

```

pnpm run dev
```

```

yarn run dev
```

If all goes well, Astro will now be serving your project on [http://localhost:4321/](http://localhost:4321/). Visit that link in your browser and see your new site!

### Work in development mode

[Section titled Work in development mode](https://docs.astro.build/en/develop-and-build/#work-in-development-mode)

Astro will listen for live file changes in your `src/` directory and update your site preview as you build, so you will not need to restart the server as you make changes during development. You will always be able to see an up-to-date version of your site in your browser when the dev server is running.

When viewing your site in the browser, you’ll have access to the [Astro dev toolbar](https://docs.astro.build/en/guides/dev-toolbar/). As you build, it will help you inspect your [islands](https://docs.astro.build/en/concepts/islands/), spot accessibility issues, and more.

If you aren’t able to open your project in the browser after starting the dev server, go back to the terminal where you ran the `dev` command and check the message displayed. It should tell you if an error occurred, or if your project is being served at a different URL than [http://localhost:4321/](http://localhost:4321/).

## Build and preview your site

[Section titled Build and preview your site](https://docs.astro.build/en/develop-and-build/#build-and-preview-your-site)

To check the version of your site that will be created at build time, quit the dev server ( `Ctrl` \+ `C`) and run the appropriate build command for your package manager in your terminal:

- [npm](https://docs.astro.build/en/develop-and-build/#tab-panel-1274)
- [pnpm](https://docs.astro.build/en/develop-and-build/#tab-panel-1275)
- [yarn](https://docs.astro.build/en/develop-and-build/#tab-panel-1276)

```

npm run build
```

```

pnpm build
```

```

yarn run build
```

Astro will build a deploy-ready version of your site in a separate folder ( `dist/` by default) and you can watch its progress in the terminal. This will alert you to any build errors in your project before you deploy to production. If TypeScript is configured to `strict` or `strictest`, the `build` script will also check your project for type errors.

When the build is finished, run the appropriate `preview` command (e.g. `npm run preview`) in your terminal and you can view the built version of your site locally in the same browser preview window.

Note that this previews your code as it existed when the build command was last run. This is meant to give you a preview of how your site will look when it is deployed to the web. Any later changes you make to your code after building will **not** be reflected while you preview your site until you run the build command again.

Use ( `Ctrl` \+ `C`) to quit the preview and run another terminal command, such as restarting the dev server to go back to [working in development mode](https://docs.astro.build/en/develop-and-build/#work-in-development-mode) which does update as you edit to show a live preview of your code changes.

Read more about [the Astro CLI](https://docs.astro.build/en/reference/cli-reference/) and the terminal commands you will use as you build with Astro.

## Next Steps

[Section titled Next Steps](https://docs.astro.build/en/develop-and-build/#next-steps)

Success! You are now ready to start building with Astro! 🥳

Here are a few things that we recommend exploring next. You can read them in any order. You can even leave our documentation for a bit and go play in your new Astro project codebase, coming back here whenever you run into trouble or have a question.

### Configure your dev environment

[Section titled Configure your dev environment](https://docs.astro.build/en/develop-and-build/#configure-your-dev-environment)

Explore the guides below to customize your development experience.

[Editor Setup](https://docs.astro.build/en/editor-setup/) Customize your code editor to improve the Astro developer experience and unlock new features.

[Dev Toolbar](https://docs.astro.build/en/guides/dev-toolbar/) Explore the helpful features of the dev toolbar.

[TypeScript Configuration](https://docs.astro.build/en/guides/typescript/) Configure options for type-checking, IntelliSense, and more.

### Explore Astro’s Features

[Section titled Explore Astro’s Features](https://docs.astro.build/en/develop-and-build/#explore-astros-features)

[Understand your codebase](https://docs.astro.build/en/basics/project-structure/) Learn about Astro’s file structure in our Project Structure guide.

[Create content collections](https://docs.astro.build/en/guides/content-collections/) Add content to your new site with frontmatter validation and automatic type-safety.

[Add view transitions](https://docs.astro.build/en/guides/view-transitions/) Create seamless page transitions and animations.

[Learn about Islands](https://docs.astro.build/en/concepts/islands/) Read about Astro's islands architecture.

### Take the introductory tutorial

[Section titled Take the introductory tutorial](https://docs.astro.build/en/develop-and-build/#take-the-introductory-tutorial)

Build a fully functional Astro blog starting from a single blank page in our [introductory tutorial](https://docs.astro.build/en/tutorial/0-introduction/).

This is a great way to see how Astro works and walks you through the basics of pages, layouts, components, routing, islands, and more. It also includes an optional, beginner-friendly unit for those newer to web development concepts in general, which will guide you through installing the necessary applications on your computer, creating a GitHub account, and deploying your site.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fdevelop-and-build%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=26149096)

## Crystallize CMS Guide
[Skip to content](https://docs.astro.build/en/guides/cms/crystallize/#_top)

# Crystallize & Astro

[Crystallize](https://crystallize.com/) is a headless content management system for eCommerce that exposes a GraphQL API.

## Example

[Section titled Example](https://docs.astro.build/en/guides/cms/crystallize/#example)

```

---

// Fetch your catalogue paths from Crystallize GraphQL API

import BaseLayout from '../../layouts/BaseLayout.astro';

import { createClient } from '@crystallize/js-api-client';

const apiClient = createClient({

  tenantIdentifier: 'furniture'

});

const query = `

  query getCataloguePaths{

    catalogue(language: "en", path: "/shop") {

      name

      children {

        name

        path

      }

    }

  }

`

const { data: { catalogue } } = await apiClient.catalogueApi(query)

---

<BaseLayout>

  <h1>{catalogue.name}</h1>

  <nav>

    <ul>

      {catalogue.children.map(child => (

        <li><a href={child.path}>{child.name}</a></li>

      ))}

    </ul>

  </nav>

</BaseLayout>
```

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fcrystallize%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=86671558)

## Syntax Highlighting Guide
[Skip to content](https://docs.astro.build/en/guides/syntax-highlighting/#_top)

# Syntax Highlighting

Astro comes with built-in support for [Shiki](https://shiki.style/) and [Prism](https://prismjs.com/). This provides syntax highlighting for:

- all [code fences (\`\`\`)](https://docs.astro.build/en/guides/syntax-highlighting/#markdown-code-blocks) used in a Markdown or MDX file.
- content within the [built-in `<Code />` component](https://docs.astro.build/en/guides/syntax-highlighting/#code-) (powered by Shiki) in `.astro` files.
- content within the [`<Prism />` component](https://docs.astro.build/en/guides/syntax-highlighting/#prism-) (powered by Prism) in `.astro` files.

Add [community integrations such as Expressive Code](https://astro.build/integrations/?search=syntax+highlight) for even more text marking and annotation options in your code blocks.

## Markdown code blocks

[Section titled Markdown code blocks](https://docs.astro.build/en/guides/syntax-highlighting/#markdown-code-blocks)

A Markdown code block is indicated by a block with three backticks \`\`\` at the start and end. You can indicate the programming language being used after the opening backticks to indicate how to color and style your code to make it easier to read.

````

```js

// Javascript code with syntax highlighting.

var fun = function lang(l) {

dateformat.i18n = require('./lang/' + l);

return true;

};

```
````

Astro’s Markdown code blocks are styled by Shiki by default, preconfigured with the `github-dark` theme. The compiled output will be limited to inline `style` s without any extraneous CSS classes, stylesheets, or client-side JS.

You can [add a Prism stylesheet and switch to Prism’s highlighting](https://docs.astro.build/en/guides/syntax-highlighting/#add-a-prism-stylesheet), or disable Astro’s syntax highlighting entirely, with the [`markdown.syntaxHighlight`](https://docs.astro.build/en/reference/configuration-reference/#markdownsyntaxhighlight) configuration option.

See the full [`markdown.shikiConfig` reference](https://docs.astro.build/en/reference/configuration-reference/#markdownshikiconfig) for the complete set of Markdown syntax highlighting options available when using Shiki.

### Setting a default Shiki theme

[Section titled Setting a default Shiki theme](https://docs.astro.build/en/guides/syntax-highlighting/#setting-a-default-shiki-theme)

You can configure any [built-in Shiki theme](https://shiki.style/themes) for your Markdown code blocks in your Astro config:

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  markdown: {

    shikiConfig: {

      theme: 'dracula',

    },

  },

});
```

See the full [Shiki config reference](https://docs.astro.build/en/reference/configuration-reference/#markdownshikiconfig) for the complete set of Markdown code block options.

### Setting light and dark mode themes

[Section titled Setting light and dark mode themes](https://docs.astro.build/en/guides/syntax-highlighting/#setting-light-and-dark-mode-themes)

You can specify dual Shiki themes for light and dark mode in your Astro config:

```

import { defineConfig } from 'astro/config';

export default defineConfig({

  markdown: {

    shikiConfig: {

      themes: {

        light: 'github-light',

        dark: 'github-dark',

      },

    },

  },

});
```

Then, [add Shiki’s dark mode CSS variables via media query or classes](https://shiki.style/guide/dual-themes#query-based-dark-mode) to apply to all your Markdown code blocks by default. Replace the `.shiki` class in the examples from Shiki’s documentation with `.astro-code`:

```

@media (prefers-color-scheme: dark) {

  .shiki,

  .shiki span {

  .astro-code,

  .astro-code span {

    color: var(--shiki-dark) !important;

    background-color: var(--shiki-dark-bg) !important;

    /* Optional, if you also want font styles */

    font-style: var(--shiki-dark-font-style) !important;

    font-weight: var(--shiki-dark-font-weight) !important;

    text-decoration: var(--shiki-dark-text-decoration) !important;

  }

}
```

See the full [Shiki config reference](https://docs.astro.build/en/reference/configuration-reference/#markdownshikiconfig) for the complete set of Markdown code block options.

### Adding your own Shiki theme

[Section titled Adding your own Shiki theme](https://docs.astro.build/en/guides/syntax-highlighting/#adding-your-own-shiki-theme)

Instead of using one of Shiki’s predefined themes, you can import a custom Shiki theme from a local file.

```

import { defineConfig } from 'astro/config';

import customTheme from './my-shiki-theme.json';

export default defineConfig({

  markdown: {

    shikiConfig: {

      theme: customTheme,

    },

  },

});
```

### Customizing Shiki themes

[Section titled Customizing Shiki themes](https://docs.astro.build/en/guides/syntax-highlighting/#customizing-shiki-themes)

You can follow [Shiki’s own theme documentation](https://shiki.style/themes) for more customization options for themes, [light vs dark mode toggles](https://shiki.style/guide/dual-themes), or styling via [CSS variables](https://shiki.style/guide/theme-colors#css-variables-theme).

You will need to adjust the examples from Shiki’s documentation for your Astro project by making the following substitutions:

- Code blocks are styled using the `.astro-code` class instead of `.shiki`
- When using the `css-variables` theme, custom properties are prefixed with `--astro-code-` instead of `--shiki-`

## Components for code blocks

[Section titled Components for code blocks](https://docs.astro.build/en/guides/syntax-highlighting/#components-for-code-blocks)

There are two Astro components available for `.astro` and `.mdx` files to render code blocks: [`<Code />`](https://docs.astro.build/en/guides/syntax-highlighting/#code-) and [`<Prism />`](https://docs.astro.build/en/guides/syntax-highlighting/#prism-).

You can reference the `Props` of these components using the [`ComponentProps` type](https://docs.astro.build/en/guides/typescript/#componentprops-type) utility.

### `<Code />`

[Section titled &lt;Code /&gt;](https://docs.astro.build/en/guides/syntax-highlighting/#code-)

This component is powered internally by Shiki. It supports all popular Shiki themes and languages as well as several other Shiki options such as custom themes, languages, [transformers](https://docs.astro.build/en/guides/syntax-highlighting/#transformers), and default colors.

These values are passed to the `<Code />` component using the `theme`, `lang`, `transformers`, and `defaultColor` attributes respectively as props. The `<Code />` component will not inherit your `shikiConfig` settings for Markdown code blocks.

```

---

import { Code } from 'astro:components';

---

<!-- Syntax highlight some JavaScript code. -->

<Code code={`const foo = 'bar';`} lang="js" />

<!-- Optional: Customize your theme. -->

<Code code={`const foo = 'bar';`} lang="js" theme="dark-plus" />

<!-- Optional: Enable word wrapping. -->

<Code code={`const foo = 'bar';`} lang="js" wrap />

<!-- Optional: Output inline code. -->

<p>

  <Code code={`const foo = 'bar';`} lang="js" inline />

  will be rendered inline.

</p>

<!-- Optional: defaultColor -->

<Code code={`const foo = 'bar';`} lang="js" defaultColor={false} />
```

#### Transformers

[Section titled Transformers](https://docs.astro.build/en/guides/syntax-highlighting/#transformers)

**Added in:** `astro@4.11.0`

[Shiki transformers](https://shiki.style/packages/transformers#shikijs-transformers) can optionally be applied to code by passing them in through the `transformers` property as an array. Since Astro v4.14.0, you can also provide a string for [Shiki’s `meta` attribute](https://shiki.style/guide/transformers#meta) to pass options to transformers.

Note that `transformers` only applies classes and you must provide your own CSS rules to target the elements of your code block.

```

---

import { transformerNotationFocus, transformerMetaHighlight } from '@shikijs/transformers'

import { Code } from 'astro:components'

const code = `const foo = 'hello'

const bar = ' world'

console.log(foo + bar) // [!code focus]

`

---

<Code

  code={code}

  lang="js"

  transformers={[transformerMetaHighlight()]}

  meta="{1,3}"

/>

<style is:global>

  pre.has-focused .line:not(.focused) {

    filter: blur(1px);

  }

</style>
```

### `<Prism />`

[Section titled &lt;Prism /&gt;](https://docs.astro.build/en/guides/syntax-highlighting/#prism-)

This component provides language-specific syntax highlighting for code blocks by applying Prism’s CSS classes. Note that you must [provide a Prism CSS stylesheet](https://docs.astro.build/en/guides/syntax-highlighting/#add-a-prism-stylesheet) (or bring your own) to style the classes.

To use the `Prism` highlighter component, you must install the `@astrojs/prism` package:

- [npm](https://docs.astro.build/en/guides/syntax-highlighting/#tab-panel-1804)
- [pnpm](https://docs.astro.build/en/guides/syntax-highlighting/#tab-panel-1805)
- [Yarn](https://docs.astro.build/en/guides/syntax-highlighting/#tab-panel-1806)

```

npm install @astrojs/prism
```

```

pnpm add @astrojs/prism
```

```

yarn add @astrojs/prism
```

Then, you can import and use the `<Prism />` component like any other Astro component, passing a language and the code to render.

```

---

import { Prism } from '@astrojs/prism';

---

<Prism lang="js" code={`const foo = 'bar';`} />
```

In addition to the [list of languages supported by Prism](https://prismjs.com/#supported-languages), you can also use `lang="astro"` to display Astro code blocks.

## Add a Prism stylesheet

[Section titled Add a Prism stylesheet](https://docs.astro.build/en/guides/syntax-highlighting/#add-a-prism-stylesheet)

If you opt to use Prism (either by configuring `markdown.syntaxHighlight: 'prism'` or with the `<Prism />` component), Astro will apply Prism’s CSS classes instead of Shiki’s to your code. You will need to bring your own CSS stylesheet for syntax highlighting to appear.

1. Choose a premade stylesheet from the available [Prism Themes](https://github.com/PrismJS/prism-themes).

2. Add this stylesheet to [your project’s `public/` directory](https://docs.astro.build/en/basics/project-structure/#public).

3. Load this into your page’s `<head>` in a [layout component](https://docs.astro.build/en/basics/layouts/) via a `<link>` tag. (See [Prism basic usage](https://prismjs.com/#basic-usage).)


You can also visit the [list of languages supported by Prism](https://prismjs.com/#supported-languages) for options and usage.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Hashnode and Astro Integration
[Skip to content](https://docs.astro.build/en/guides/cms/hashnode/#_top)

# Hashnode & Astro

[Hashnode](https://hashnode.com/) is a hosted CMS that allows you to create a blog or publication.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/hashnode/#integrating-with-astro)

The [Hashnode Public API](https://apidocs.hashnode.com/) is a GraphQL API that allows you to interact with Hashnode. This guide uses [`graphql-request`](https://github.com/jasonkuhrt/graphql-request), a minimal GraphQL client that works well with Astro, to bring your Hashnode data into your Astro project.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/hashnode/#prerequisites)

To get started you will need to have the following:

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **A Hashnode site** \- You can create free personal site by visiting [Hashnode](https://hashnode.com/).


### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/hashnode/#installing-dependencies)

Install the `graphql-request` package using the package manager of your choice:

- [npm](https://docs.astro.build/en/guides/cms/hashnode/#tab-panel-3081)
- [pnpm](https://docs.astro.build/en/guides/cms/hashnode/#tab-panel-3082)
- [Yarn](https://docs.astro.build/en/guides/cms/hashnode/#tab-panel-3083)

```

npm install graphql-request
```

```

pnpm add graphql-request
```

```

yarn add graphql-request
```

## Making a blog with Astro and Hashnode

[Section titled Making a blog with Astro and Hashnode](https://docs.astro.build/en/guides/cms/hashnode/#making-a-blog-with-astro-and-hashnode)

This guide uses [`graphql-request`](https://github.com/jasonkuhrt/graphql-request), a minimal GraphQL client that works well with Astro, to bring your Hashnode data into your Astro project.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/hashnode/#prerequisites-1)

1. A Hashnode Blog
2. An Astro project integrated with the [graphql-request](https://github.com/jasonkuhrt/graphql-request) package installed.

This example will create an index page that lists posts with links to dynamically-generated individual post pages.

### Fetching Data

[Section titled Fetching Data](https://docs.astro.build/en/guides/cms/hashnode/#fetching-data)

1. To fetch your site’s data with the `graphql-request` package, make a `src/lib` directory and create two new files `client.ts` & `schema.ts`:


- Directorysrc/


- Directorylib/


- **client.ts**
- **schema.ts**

- Directorypages/


- index.astro

- astro.config.mjs
- package.json

2. Initialize an API instance with the GraphQLClient using the URL from your Hashnode Website.



```


import { gql, GraphQLClient } from "graphql-request";

import type { AllPostsData, PostData } from "./schema";




export const getClient = () => {

     return new GraphQLClient("https://gql.hashnode.com")

}




const myHashnodeURL = "astroplayground.hashnode.dev";




export const getAllPosts = async () => {

     const client = getClient();




     const allPosts = await client.request<AllPostsData>(

       gql`

         query allPosts {

           publication(host: "${myHashnodeURL}") {

             id

             title

             posts(first: 20) {

               pageInfo{

                 hasNextPage

                 endCursor

               }

               edges {

                 node {

                   id

                   author{

                     name

                     profilePicture

                   }

                   title

                   subtitle

                   brief

                   slug

                   coverImage {

                     url

                   }

                   tags {

                     name

                     slug

                   }

                   publishedAt

                   readTimeInMinutes

                 }

               }

             }

           }

         }

       `

     );




     return allPosts;

};







export const getPost = async (slug: string) => {

     const client = getClient();




     const data = await client.request<PostData>(

       gql`

         query postDetails($slug: String!) {

           publication(host: "${myHashnodeURL}") {

             id

             post(slug: $slug) {

               id

               author{

                 name

                 profilePicture

               }

               publishedAt

               title

               subtitle

               readTimeInMinutes

               content{

                 html

               }

               tags {

                 name

                 slug

               }

               coverImage {

                 url

               }

             }

           }

         }

       `,

       { slug: slug }

     );




     return data.publication.post;

};
```

3. Configure `schema.ts` to define the shape of the data returned from the Hashnode API.



```


import { z } from "astro/zod";




export const PostSchema = z.object({

       id: z.string(),

       author: z.object({

           name: z.string(),

           profilePicture: z.string(),

           }),

       publishedAt: z.string(),

       title: z.string(),

       subtitle: z.string(),

       brief: z.string(),

       slug: z.string(),

       readTimeInMinutes: z.number(),

       content: z.object({

           html: z.string(),

       }),

       tags: z.array(z.object({

           name: z.string(),

           slug: z.string(),

       })),

       coverImage: z.object({

           url: z.string(),

       }),

})




export const AllPostsDataSchema = z.object({

       id: z.string(),

       publication: z.object({

           title: z.string(),

           posts: z.object({

               pageInfo: z.object({

                   hasNextPage: z.boolean(),

                   endCursor: z.string(),

               }),

               edges: z.array(z.object({

                   node: PostSchema,

               })),

           }),

       }),

})




export const PostDataSchema = z.object({

       id: z.string(),

       publication: z.object({

           title: z.string(),

           post: PostSchema,

       }),

})




export type Post = z.infer<typeof PostSchema>

export type AllPostsData = z.infer<typeof AllPostsDataSchema>

export type PostData = z.infer<typeof PostDataSchema>
```


### Displaying a list of posts

[Section titled Displaying a list of posts](https://docs.astro.build/en/guides/cms/hashnode/#displaying-a-list-of-posts)

Fetching via `getAllPosts()` returns an array of objects containing the properties for each post such as:

- `title` \- the title of the post
- `brief` \- the HTML rendering of the content of the post
- `coverImage.url` \- the source URL of the featured image of the post
- `slug` \- the slug of the post

Use the `posts` array returned from the fetch to display a list of blog posts on the page.

```

---

import { getAllPosts } from '../lib/client';

const data = await getAllPosts();

const allPosts = data.publication.posts.edges;

---

<html lang="en">

    <head>

        <title>Astro + Hashnode</title>

    </head>

    <body>

        {

            allPosts.map((post) => (

                <div>

                    <h2>{post.node.title}</h2>

                    <p>{post.node.brief}</p>

                    <img src={post.node.coverImage.url} alt={post.node.title} />

                    <a href={`/post/${post.node.slug}`}>Read more</a>

                </div>

            ))

        }

    </body>

</html>
```

### Generating pages

[Section titled Generating pages](https://docs.astro.build/en/guides/cms/hashnode/#generating-pages)

1. Create the page `src/pages/post/[slug].astro` to [dynamically generate a page](https://docs.astro.build/en/guides/routing/#dynamic-routes) for each post.


- Directorysrc/


- Directorylib/


- client.ts
- schema.ts

- Directorypages/


- index.astro
- Directorypost/


- **\[slug\].astro**

- astro.config.mjs
- package.json

2. Import and use `getAllPosts()` and `getPost()` to fetch the data from Hashnode and generate individual page routes for each post.



```


   ---

import { getAllPosts, getPost } from '../../lib/client';







export async function getStaticPaths() {

     const data = await getAllPosts();

     const allPosts = data.publication.posts.edges;

     return allPosts.map((post) => {

       return {

         params: { slug: post.node.slug },

       }

     })

}

const { slug } = Astro.params;

const post = await getPost(slug);




   ---
```

3. Create the template for each page using the properties of each `post` object. The example below shows the post title and reading time, then the full post content:



```


   ---

import { getAllPosts, getPost } from '../../lib/client';







export async function getStaticPaths() {

     const data = await getAllPosts();

     const allPosts = data.publication.posts.edges;

     return allPosts.map((post) => {

       return {

         params: { slug: post.node.slug },

       }

     })

}

const { slug } = Astro.params;

const post = await getPost(slug);




   ---

<!DOCTYPE html>

<html lang="en">

       <head>

           <title>{post.title}</title>

       </head>

       <body>

           <img src={post.coverImage.url} alt={post.title} />




           <h1>{post.title}</h1>

           <p>{post.readTimeInMinutes} min read</p>




           <Fragment set:html={post.content.html} />

       </body>

</html>
```


### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/hashnode/#publishing-your-site)

To deploy your site visit our [deployment guide](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/hashnode/#community-resources)

- [`astro-hashnode`](https://github.com/matthiesenxyz/astro-hashnode) on GitHub

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## StudioCMS for Astro
[Skip to content](https://docs.astro.build/en/guides/cms/studiocms/#_top)

# StudioCMS & Astro

[StudioCMS](https://studiocms.dev/) is a headless CMS for Astro, built with Astro, that provides a user-friendly and configurable dashboard for content management as well as a custom rendering system to display your Astro components.

## Official resources

[Section titled Official resources](https://docs.astro.build/en/guides/cms/studiocms/#official-resources)

- [StudioCMS documentation](https://docs.studiocms.dev/)
- [StudioCMS GitHub repository](https://github.com/withstudiocms/studiocms)
- [StudioCMS Discord community](https://chat.studiocms.dev/)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Appwrite Backend Guide
[Skip to content](https://docs.astro.build/en/guides/backend/appwriteio/#_top)

# Appwrite & Astro

[Appwrite](https://appwrite.io/) is a self-hosted backend-as-a-service platform that provides authentication and account management, user preferences, database and storage persistence, cloud functions, localization, image manipulation, and other server-side utilities.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/backend/appwriteio/#official-resources)

- [Appwrite Demos for Astro](https://github.com/appwrite/demos-for-astro)

## More backend service guides

- ![](https://docs.astro.build/logos/appwriteio.svg)



### [Appwrite](https://docs.astro.build/en/guides/backend/appwriteio/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Firebase](https://docs.astro.build/en/guides/backend/google-firebase/)

- ![](https://docs.astro.build/logos/neon.svg)



### [Neon](https://docs.astro.build/en/guides/backend/neon/)

- ![](https://docs.astro.build/logos/sentry.svg)



### [Sentry](https://docs.astro.build/en/guides/backend/sentry/)

- ![](https://docs.astro.build/logos/supabase.svg)



### [Supabase](https://docs.astro.build/en/guides/backend/supabase/)

- ![](https://docs.astro.build/logos/turso.svg)



### [Turso](https://docs.astro.build/en/guides/backend/turso/)

- ![](https://docs.astro.build/logos/xata.svg)



### [Xata](https://docs.astro.build/en/guides/backend/xata/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Deploy Astro with Deno
[Skip to content](https://docs.astro.build/en/guides/deploy/deno/#_top)

# Deploy your Astro Site with Deno

You can deploy a static or on-demand rendered Astro site using Deno, either on your own server, or to [Deno Deploy](https://deno.com/deploy), a distributed system that runs JavaScript, TypeScript, and WebAssembly at the edge, worldwide.

This guide includes instructions for running your Astro site on your own server with Deno, and deploying to Deno Deploy through GitHub Actions or the Deno Deploy CLI.

## Requirements

[Section titled Requirements](https://docs.astro.build/en/guides/deploy/deno/#requirements)

This guide assumes you already have [Deno](https://deno.com/) installed.

## Project Configuration

[Section titled Project Configuration](https://docs.astro.build/en/guides/deploy/deno/#project-configuration)

Your Astro project can be deployed as a static site, or as an on-demand rendered site.

### Static Site

[Section titled Static Site](https://docs.astro.build/en/guides/deploy/deno/#static-site)

Your Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site with Deno, or to Deno Deploy.

### Adapter for on-demand rendering

[Section titled Adapter for on-demand rendering](https://docs.astro.build/en/guides/deploy/deno/#adapter-for-on-demand-rendering)

To enable on-demand rendering in your Astro project using Deno, and to deploy on Deno Deploy:

1. Install [the `@deno/astro-adapter` adapter](https://github.com/denoland/deno-astro-adapter) to your project’s dependencies using your preferred package manager:




- [npm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3135)
- [pnpm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3136)
- [Yarn](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3137)

```

npm install @deno/astro-adapter
```

```

pnpm install @deno/astro-adapter
```

```

yarn add @deno/astro-adapter
```

2. Update your `astro.config.mjs` project configuration file with the changes below.



```


import { defineConfig } from 'astro/config';

import deno from '@deno/astro-adapter';




export default defineConfig({

     output: 'server',

     adapter: deno(),

});
```

3. Update your `preview` script in `package.json` with the change below.



```


{

     // ...

     "scripts": {

       "dev": "astro dev",

       "start": "astro dev",

       "build": "astro build",

       "preview": "astro preview"

       "preview": "deno run --allow-net --allow-read --allow-env ./dist/server/entry.mjs"

     }

}
```









You can now use this command to preview your production Astro site locally with Deno.




- [npm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3138)
- [pnpm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3139)
- [Yarn](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3140)

```

npm run preview
```

```

pnpm run preview
```

```

yarn run preview
```

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/deno/#how-to-deploy)

You can run your Astro site on your own server, or deploy to Deno Deploy through GitHub Actions or using Deno Deploy’s CLI (command line interface).

### On your own server

[Section titled On your own server](https://docs.astro.build/en/guides/deploy/deno/#on-your-own-server)

1. Copy your project onto your server.

2. Install the project dependencies using your preferred package manager:




- [npm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3141)
- [pnpm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3142)
- [Yarn](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3143)

```

npm install
```

```

pnpm install
```

```

yarn
```

3. Build your Astro site with your preferred package manager:




- [npm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3144)
- [pnpm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3145)
- [Yarn](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3146)

```

npm run build
```

```

pnpm run build
```

```

yarn run build
```

4. Start your application with the following command:




- [Static](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3127)
- [On demand](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3128)

```

deno run -A jsr:@std/http/file-server dist
```

```

deno run -A ./dist/server/entry.mjs
```

### GitHub Actions Deployment

[Section titled GitHub Actions Deployment](https://docs.astro.build/en/guides/deploy/deno/#github-actions-deployment)

If your project is stored on GitHub, the [Deno Deploy website](https://dash.deno.com/) will guide you through setting up GitHub Actions to deploy your Astro site.

1. Push your code to a public or private GitHub repository.

2. Sign in on [Deno Deploy](https://dash.deno.com/) with your GitHub account, and click on [New Project](https://dash.deno.com/).

3. Select your repository, the branch you want to deploy from, and select **GitHub Action** mode. (Your Astro site requires a build step, and cannot use Automatic mode.)

4. In your Astro project, create a new file at `.github/workflows/deploy.yml` and paste in the YAML below. This is similar to the YAML given by Deno Deploy, with the additional steps needed for your Astro site.




- [Static](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3129)
- [On demand](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3130)

```

name: Deploy

on: [push]

jobs:

  deploy:

    name: Deploy

    runs-on: ubuntu-latest

    permissions:

      id-token: write # Needed for auth with Deno Deploy

      contents: read # Needed to clone the repository

    steps:

      - name: Clone repository

        uses: actions/checkout@v4

      # Not using npm? Change `npm ci` to `yarn install` or `pnpm i`

      - name: Install dependencies

        run: npm ci

      # Not using npm? Change `npm run build` to `yarn build` or `pnpm run build`

      - name: Build Astro

        run: npm run build

      - name: Upload to Deno Deploy

        uses: denoland/deployctl@v1

        with:

          project: my-deno-project # TODO: replace with Deno Deploy project name

          entrypoint: jsr:@std/http/file-server

          root: dist
```

```

name: Deploy

on: [push]

jobs:

  deploy:

    name: Deploy

    runs-on: ubuntu-latest

    permissions:

      id-token: write # Needed for auth with Deno Deploy

      contents: read # Needed to clone the repository

    steps:

      - name: Clone repository

        uses: actions/checkout@v4

      # Not using npm? Change `npm ci` to `yarn install` or `pnpm i`

      - name: Install dependencies

        run: npm ci

      # Not using npm? Change `npm run build` to `yarn build` or `pnpm run build`

      - name: Build Astro

        run: npm run build

      - name: Upload to Deno Deploy

        uses: denoland/deployctl@v1

        with:

          project: my-deno-project # TODO: replace with Deno Deploy project name

          entrypoint: dist/server/entry.mjs
```

5. After committing this YAML file, and pushing to GitHub on your configured deploy branch, the deploy should begin automatically!

You can track the progress using the “Actions” tab on your GitHub repository page, or on [Deno Deploy](https://dash.deno.com/).


### CLI Deployment

[Section titled CLI Deployment](https://docs.astro.build/en/guides/deploy/deno/#cli-deployment)

1. Install the [Deno Deploy CLI](https://docs.deno.com/deploy/manual/deployctl).



```


deno install -gArf jsr:@deno/deployctl
```

2. Build your Astro site with your preferred package manager:




- [npm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3147)
- [pnpm](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3148)
- [Yarn](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3149)

```

npm run build
```

```

pnpm run build
```

```

yarn run build
```

3. Run `deployctl` to deploy!




- [Static](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3131)
- [On demand](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3132)

```

cd dist && deployctl deploy jsr:@std/http/file-server
```

```

deployctl deploy ./dist/server/entry.mjs
```

You can track all your deploys on [Deno Deploy](https://dash.deno.com/).

4. (Optional) To simplify the build and deploy into one command, add a `deploy-deno` script in `package.json`.




- [Static](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3133)
- [On demand](https://docs.astro.build/en/guides/deploy/deno/#tab-panel-3134)

```

{

  // ...

  "scripts": {

  "dev": "astro dev",

  "start": "astro dev",

  "build": "astro build",

  "preview": "astro preview",

  "deno-deploy": "npm run build && cd dist && deployctl deploy jsr:@std/http/file-server"

  }

}
```

```

{

  // ...

  "scripts": {

    "dev": "astro dev",

    "start": "astro dev",

    "build": "astro build",

    "preview": "deno run --allow-net --allow-read --allow-env ./dist/server/entry.mjs",

    "deno-deploy": "npm run build && deployctl deploy ./dist/server/entry.mjs"

  }

}
```

Then you can use this command to build and deploy your Astro site in one step.

```

npm run deno-deploy
```

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Components Overview
[Skip to content](https://docs.astro.build/en/basics/astro-components/#_top)

# Components

**Astro components** are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the `.astro` file extension.

Astro components are extremely flexible. An Astro component can be as small as a snippet of HTML, like a collection of common `<meta>` tags that make SEO easy to work with. Components can be reusable UI elements, like a header or a profile card. Astro components can even contain an entire page layout or, when located in the special `src/pages/` folder, be an entire page itself.

The most important thing to know about Astro components is that they **don’t render on the client**. They render to HTML either at build-time or on-demand. You can include JavaScript code inside of your component frontmatter, and all of it will be stripped from the final page sent to your users’ browsers. The result is a faster site, with zero JavaScript footprint added by default.

When your Astro component does need client-side interactivity, you can add [standard HTML `<script>` tags](https://docs.astro.build/en/guides/client-side-scripts/) or [UI Framework components](https://docs.astro.build/en/guides/framework-components/#hydrating-interactive-components) as “client islands”.

For components that need to render personalized or dynamic content, you can defer their server rendering by adding a [server directive](https://docs.astro.build/en/reference/directives-reference/#server-directives). These “server islands” will render their content when it is available, without delaying the entire page load.

## Component Structure

[Section titled Component Structure](https://docs.astro.build/en/basics/astro-components/#component-structure)

An Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.

```

---

// Component Script (JavaScript)

---

<!-- Component Template (HTML + JS Expressions) -->
```

### The Component Script

[Section titled The Component Script](https://docs.astro.build/en/basics/astro-components/#the-component-script)

Astro uses a code fence ( `---`) to identify the component script in your Astro component. If you’ve ever written Markdown before, you may already be familiar with a similar concept called _frontmatter._ Astro’s idea of a component script was directly inspired by this concept.

You can use the component script to write any JavaScript code that you need to render your template. This can include:

- importing other Astro components
- importing other framework components, like React
- importing data, like a JSON file
- fetching content from an API or database
- creating variables that you will reference in your template

```

---

import SomeAstroComponent from '../components/SomeAstroComponent.astro';

import SomeReactComponent from '../components/SomeReactComponent.jsx';

import someData from '../data/pokemon.json';

// Access passed-in component props, like `<X title="Hello, World" />`

const { title } = Astro.props;

// Fetch external data, even from a private API or database

const data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());

---

<!-- Your template here! -->
```

The code fence is designed to guarantee that the JavaScript that you write in it is “fenced in.” It won’t escape into your frontend application, or fall into your user’s hands. You can safely write code here that is expensive or sensitive (like a call to your private database) without worrying about it ever ending up in your user’s browser.

### The Component Template

[Section titled The Component Template](https://docs.astro.build/en/basics/astro-components/#the-component-template)

The component template is below the code fence and determines the HTML output of your component.

If you write plain HTML here, your component will render that HTML in any Astro page it is imported and used.

However, [Astro’s component template syntax](https://docs.astro.build/en/reference/astro-syntax/) also supports **JavaScript expressions**, Astro [`<style>`](https://docs.astro.build/en/guides/styling/#styling-in-astro) and [`<script>`](https://docs.astro.build/en/guides/client-side-scripts/#using-script-in-astro) tags, **imported components**, and [**special Astro directives**](https://docs.astro.build/en/reference/directives-reference/). Data and values defined in the component script can be used in the component template to produce dynamically-created HTML.

```

---

// Your component script here!

import Banner from '../components/Banner.astro';

import Avatar from '../components/Avatar.astro';

import ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';

const myFavoritePokemon = [/* ... */];

const { title } = Astro.props;

---

<!-- HTML comments supported! -->

{/* JS comment syntax is also valid! */}

<Banner />

<h1>Hello, world!</h1>

<!-- Use props and other variables from the component script: -->

<p>{title}</p>

<!-- Delay component rendering and provide fallback loading content: -->

<Avatar server:defer>

  <svg slot="fallback" class="generic-avatar" transition:name="avatar">...</svg>

</Avatar>

<!-- Include other UI framework components with a `client:` directive to hydrate: -->

<ReactPokemonComponent client:visible />

<!-- Mix HTML with JavaScript expressions, similar to JSX: -->

<ul>

  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}

</ul>

<!-- Use a template directive to build class names from multiple strings or even objects! -->

<p class:list={["add", "dynamic", { classNames: true }]} />
```

## Component-based design

[Section titled Component-based design](https://docs.astro.build/en/basics/astro-components/#component-based-design)

Components are designed to be **reusable** and **composable**. You can use components inside of other components to build more and more advanced UI. For example, a `Button` component could be used to create a `ButtonGroup` component:

```

---

import Button from './Button.astro';

---

<div>

  <Button title="Button 1" />

  <Button title="Button 2" />

  <Button title="Button 3" />

</div>
```

## Component Props

[Section titled Component Props](https://docs.astro.build/en/basics/astro-components/#component-props)

An Astro component can define and accept props. These props then become available to the component template for rendering HTML. Props are available on the `Astro.props` global in your frontmatter script.

Here is an example of a component that receives a `greeting` prop and a `name` prop. Notice that the props to be received are destructured from the global `Astro.props` object.

```

---

// Usage: <GreetingHeadline greeting="Howdy" name="Partner" />

const { greeting, name } = Astro.props;

---

<h2>{greeting}, {name}!</h2>
```

This component, when imported and rendered in other Astro components, layouts or pages, can pass these props as attributes:

```

---

import GreetingHeadline from './GreetingHeadline.astro';

const name = 'Astro';

---

<h1>Greeting Card</h1>

<GreetingHeadline greeting="Hi" name={name} />

<p>I hope you have a wonderful day!</p>
```

You can also define your props with TypeScript with a `Props` type interface. Astro will automatically pick up the `Props` interface in your frontmatter and give type warnings/errors. These props can also be given default values when destructured from `Astro.props`.

```

---

interface Props {

  name: string;

  greeting?: string;

}

const { greeting = "Hello", name } = Astro.props;

---

<h2>{greeting}, {name}!</h2>
```

Component props can be given default values to use when none are provided.

```

---

const { greeting = "Hello", name = "Astronaut" } = Astro.props;

---

<h2>{greeting}, {name}!</h2>
```

## Slots

[Section titled Slots](https://docs.astro.build/en/basics/astro-components/#slots)

The `<slot />` element is a placeholder for external HTML content, allowing you to inject (or “slot”) child elements from other files into your component template.

By default, all child elements passed to a component will be rendered in its `<slot />`.

```

---

import Header from './Header.astro';

import Logo from './Logo.astro';

import Footer from './Footer.astro';

const { title } = Astro.props;

---

<div id="content-wrapper">

  <Header />

  <Logo />

  <h1>{title}</h1>

  <slot />  <!-- children will go here -->

  <Footer />

</div>
```

```

---

import Wrapper from '../components/Wrapper.astro';

---

<Wrapper title="Fred's Page">

  <h2>All about Fred</h2>

  <p>Here is some stuff about Fred.</p>

</Wrapper>
```

This pattern is the basis of an [Astro layout component](https://docs.astro.build/en/basics/layouts/): an entire page of HTML content can be “wrapped” with `<SomeLayoutComponent></SomeLayoutComponent>` tags and sent to the component to render inside of common page elements defined there.

### Named Slots

[Section titled Named Slots](https://docs.astro.build/en/basics/astro-components/#named-slots)

An Astro component can also have named slots. This allows you to pass only HTML elements with the corresponding slot name into a slot’s location.

Slots are named using the `name` attribute:

```

---

import Header from './Header.astro';

import Logo from './Logo.astro';

import Footer from './Footer.astro';

const { title } = Astro.props;

---

<div id="content-wrapper">

  <Header />

  <!--  children with the `slot="after-header"` attribute will go here -->

  <slot name="after-header" />

  <Logo />

  <h1>{title}</h1>

  <!--  children without a `slot`, or with `slot="default"` attribute will go here -->

  <slot />

  <Footer />

  <!--  children with the `slot="after-footer"` attribute will go here -->

  <slot name="after-footer" />

</div>
```

To inject HTML content into a particular slot, use the `slot` attribute on any child element to specify the name of the slot. All other child elements of the component will be injected into the default (unnamed) `<slot />`.

```

---

import Wrapper from '../components/Wrapper.astro';

---

<Wrapper title="Fred's Page">

  <img src="https://my.photo/fred.jpg" slot="after-header" />

  <h2>All about Fred</h2>

  <p>Here is some stuff about Fred.</p>

  <p slot="after-footer">Copyright 2022</p>

</Wrapper>
```

To pass multiple HTML elements into a component’s `<slot/>` placeholder without a wrapping `<div>`, use the `slot=""` attribute on [Astro’s `<Fragment/>` component](https://docs.astro.build/en/reference/astro-syntax/#fragments):

```

---

// Create a custom table with named slot placeholders for header and body content

---

<table class="bg-white">

  <thead class="sticky top-0 bg-white"><slot name="header" /></thead>

  <tbody class="[&_tr:nth-child(odd)]:bg-gray-100"><slot name="body" /></tbody>

</table>
```

Inject multiple rows and columns of HTML content using a `slot=""` attribute to specify the `"header"` and `"body"` content. Individual HTML elements can also be styled:

```

---

import CustomTable from './CustomTable.astro';

---

<CustomTable>

  <Fragment slot="header"> <!-- pass table header -->

    <tr><th>Product name</th><th>Stock units</th></tr>

  </Fragment>

  <Fragment slot="body"> <!-- pass table body -->

    <tr><td>Flip-flops</td><td>64</td></tr>

    <tr><td>Boots</td><td>32</td></tr>

    <tr><td>Sneakers</td><td class="text-red-500">0</td></tr>

  </Fragment>

</CustomTable>
```

Note that named slots must be an immediate child of the component. You cannot pass named slots through nested elements.

### Fallback Content for Slots

[Section titled Fallback Content for Slots](https://docs.astro.build/en/basics/astro-components/#fallback-content-for-slots)

Slots can also render **fallback content**. When there are no matching children passed to a slot, a `<slot />` element will render its own placeholder children.

```

---

import Header from './Header.astro';

import Logo from './Logo.astro';

import Footer from './Footer.astro';

const { title } = Astro.props;

---

<div id="content-wrapper">

  <Header />

  <Logo />

  <h1>{title}</h1>

  <slot>

    <p>This is my fallback content, if there is no child passed into slot</p>

  </slot>

  <Footer />

</div>
```

Fallback content will only be displayed when there are no matching elements with the `slot="name"` attribute being passed in to a named slot.

Astro will pass an empty slot when a slot element exists but has no content to pass. Fallback content cannot be used as a default when an empty slot is passed. Fallback content is only displayed when no slot element can be found.

### Transferring slots

[Section titled Transferring slots](https://docs.astro.build/en/basics/astro-components/#transferring-slots)

Slots can be transferred to other components. For example, when creating nested layouts:

```

---

---

<html lang="en">

  <head>

    <meta charset="utf-8" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta name="viewport" content="width=device-width" />

    <meta name="generator" content={Astro.generator} />

    <slot name="head" />

  </head>

  <body>

    <slot />

  </body>

</html>
```

```

---

import BaseLayout from './BaseLayout.astro';

---

<BaseLayout>

  <slot name="head" slot="head" />

  <slot />

</BaseLayout>
```

Now, the default and `head` slots passed to `HomeLayout` will be transferred to the `BaseLayout` parent.

```

---

import HomeLayout from '../layouts/HomeLayout.astro';

---

<HomeLayout>

  <title slot="head">Astro</title>

  <h1>Astro</h1>

</HomeLayout>
```

## HTML Components

[Section titled HTML Components](https://docs.astro.build/en/basics/astro-components/#html-components)

Astro supports importing and using `.html` files as components or placing these files within the `src/pages/` subdirectory as pages. You may want to use HTML components if you’re reusing code from an existing site built without a framework, or if you want to ensure that your component has no dynamic features.

HTML components must contain only valid HTML, and therefore lack key Astro component features:

- They don’t support frontmatter, server-side imports, or dynamic expressions.
- Any `<script>` tags are left unbundled, treated as if they had an [`is:inline` directive](https://docs.astro.build/en/reference/directives-reference/#isinline).
- They can only [reference assets that are in the `public/` folder](https://docs.astro.build/en/basics/project-structure/#public).

## Next Steps

[Section titled Next Steps](https://docs.astro.build/en/basics/astro-components/#next-steps)

Read more about using [UI framework components](https://docs.astro.build/en/guides/framework-components/) in your Astro project.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Dev Toolbar
[Skip to content](https://docs.astro.build/en/guides/dev-toolbar/#_top)

# Dev toolbar

While the dev server is running, Astro includes a dev toolbar at the bottom of every page in your local browser preview.

This toolbar includes a number of useful tools for debugging and inspecting your site during development and can be [extended with more dev toolbar apps](https://docs.astro.build/en/guides/dev-toolbar/#extending-the-dev-toolbar) found in the integrations directory. You can even [build your own toolbar apps](https://docs.astro.build/en/recipes/making-toolbar-apps/) using the [Dev Toolbar API](https://docs.astro.build/en/reference/dev-toolbar-app-reference/)!

This toolbar is enabled by default and appears when you hover over the bottom of the page. It is a development tool only and will not appear on your published site.

## Built-in apps

[Section titled Built-in apps](https://docs.astro.build/en/guides/dev-toolbar/#built-in-apps)

### Astro Menu

[Section titled Astro Menu](https://docs.astro.build/en/guides/dev-toolbar/#astro-menu)

The Astro Menu app provides easy access to various information about the current project and links to extra resources. Notably, it provides one-click access to the Astro documentation, GitHub repository, and Discord server.

This app also includes a “Copy debug info” button which will run the [`astro info`](https://docs.astro.build/en/reference/cli-reference/#astro-info) command and copy the output to your clipboard. This can be useful when asking for help or reporting issues.

### Inspect

[Section titled Inspect](https://docs.astro.build/en/guides/dev-toolbar/#inspect)

The Inspect app provides information about any [islands](https://docs.astro.build/en/concepts/islands/) on the current page. This will show you the properties passed to each island, and the client directive that is being used to render them.

### Audit

[Section titled Audit](https://docs.astro.build/en/guides/dev-toolbar/#audit)

The Audit app automatically runs a series of audits on the current page, checking for the most common performance and accessibility issues. When an issue is found, a red dot will appear in the toolbar. Clicking on the app will pop up a list of results from the audit and will highlight the related elements directly in the page.

### Settings

[Section titled Settings](https://docs.astro.build/en/guides/dev-toolbar/#settings)

The Settings app allows you to configure options for the dev toolbar, such as verbose logging, disabling notifications, and adjusting its placement on your screen.

## Extending the dev toolbar

[Section titled Extending the dev toolbar](https://docs.astro.build/en/guides/dev-toolbar/#extending-the-dev-toolbar)

Astro integrations can add new apps to the dev toolbar, allowing you to extend it with custom tools that are specific to your project. You can find [more dev tool apps to install in the integrations directory](https://astro.build/integrations/?search=&categories%5B%5D=toolbar) or using the [Astro Menu](https://docs.astro.build/en/guides/dev-toolbar/#astro-menu).

Install additional dev toolbar app integrations in your project just like any other [Astro integration](https://docs.astro.build/en/guides/integrations-guide/) according to its own installation instructions.

![](https://docs.astro.build/houston_chef.webp)**Related recipe:** [Create a dev toolbar app](https://docs.astro.build/en/recipes/making-toolbar-apps/)

## Disabling the dev toolbar

[Section titled Disabling the dev toolbar](https://docs.astro.build/en/guides/dev-toolbar/#disabling-the-dev-toolbar)

The dev toolbar is enabled by default for every site. You can choose to disable it for individual projects and/or users as needed.

### Per-project

[Section titled Per-project](https://docs.astro.build/en/guides/dev-toolbar/#per-project)

To disable the dev toolbar for everyone working on a project, set `devToolbar: false` in the [Astro config file](https://docs.astro.build/en/reference/configuration-reference/#devtoolbarenabled).

```

import { defineConfig } from "astro/config";

export default defineConfig({

  devToolbar: {

    enabled: false

  }

});
```

To enable the dev toolbar again, remove these lines from your configuration, or set `enabled: true`.

### Per-user

[Section titled Per-user](https://docs.astro.build/en/guides/dev-toolbar/#per-user)

To disable the dev toolbar for yourself on a specific project, run the [`astro preferences`](https://docs.astro.build/en/reference/cli-reference/#astro-preferences) command.

```

astro preferences disable devToolbar
```

To disable the dev toolbar in all Astro projects for a user on the current machine, add the `--global` flag when running `astro-preferences`:

```

astro preferences disable --global devToolbar
```

The dev toolbar can later be enabled with:

```

astro preferences enable devToolbar
```

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Pages Overview
[Skip to content](https://docs.astro.build/en/basics/astro-pages/#_top)

# Pages

**Pages** are files that live in the `src/pages/` subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.

## Supported page files

[Section titled Supported page files](https://docs.astro.build/en/basics/astro-pages/#supported-page-files)

Astro supports the following file types in the `src/pages/` directory:

- [`.astro`](https://docs.astro.build/en/basics/astro-pages/#astro-pages)
- [`.md`](https://docs.astro.build/en/basics/astro-pages/#markdownmdx-pages)
- `.mdx` (with the [MDX Integration installed](https://docs.astro.build/en/guides/integrations-guide/mdx/#installation))
- [`.html`](https://docs.astro.build/en/basics/astro-pages/#html-pages)
- `.js`/ `.ts` (as [endpoints](https://docs.astro.build/en/guides/endpoints/))

## File-based routing

[Section titled File-based routing](https://docs.astro.build/en/basics/astro-pages/#file-based-routing)

Astro leverages a routing strategy called **file-based routing**. Each file in your `src/pages/` directory becomes an endpoint on your site based on its file path.

A single file can also generate multiple pages using [dynamic routing](https://docs.astro.build/en/guides/routing/#dynamic-routes). This allows you to create pages even if your content lives outside of the special `/pages/` directory, such as in a [content collection](https://docs.astro.build/en/guides/content-collections/) or a [CMS](https://docs.astro.build/en/guides/cms/).

Read more about [Routing in Astro](https://docs.astro.build/en/guides/routing/).

### Link between pages

[Section titled Link between pages](https://docs.astro.build/en/basics/astro-pages/#link-between-pages)

Write standard HTML [`<a>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) in your Astro pages to link to other pages on your site. Use a **URL path relative to your root domain** as your link, not a relative file path.

For example, to link to `https://example.com/authors/sonali/` from any other page on `example.com`:

```

Read more <a href="/authors/sonali/">about Sonali</a>.
```

## Astro Pages

[Section titled Astro Pages](https://docs.astro.build/en/basics/astro-pages/#astro-pages)

Astro pages use the `.astro` file extension and support the same features as [Astro components](https://docs.astro.build/en/basics/astro-components/).

```

---

---

<html lang="en">

  <head>

    <title>My Homepage</title>

  </head>

  <body>

    <h1>Welcome to my website!</h1>

  </body>

</html>
```

A page must produce a full HTML document. If not explicitly included, Astro will add the necessary `<!DOCTYPE html>` declaration and `<head>` content to any `.astro` component located within `src/pages/` by default. You can opt-out of this behavior on a per-component basis by marking it as a [partial](https://docs.astro.build/en/basics/astro-pages/#page-partials) page.

To avoid repeating the same HTML elements on every page, you can move common `<head>` and `<body>` elements into your own [layout components](https://docs.astro.build/en/basics/layouts/). You can use as many or as few layout components as you’d like.

```

---

import MySiteLayout from "../layouts/MySiteLayout.astro";

---

<MySiteLayout>

  <p>My page content, wrapped in a layout!</p>

</MySiteLayout>
```

Read more about [layout components](https://docs.astro.build/en/basics/layouts/) in Astro.

## Markdown/MDX Pages

[Section titled Markdown/MDX Pages](https://docs.astro.build/en/basics/astro-pages/#markdownmdx-pages)

Astro also treats any Markdown ( `.md`) files inside of `src/pages/` as pages in your final website. If you have the [MDX Integration installed](https://docs.astro.build/en/guides/integrations-guide/mdx/#installation), it also treats MDX ( `.mdx`) files the same way.

Markdown files can use the special `layout` frontmatter property to specify a [layout component](https://docs.astro.build/en/basics/layouts/) that will wrap their Markdown content in a full `<html>...</html>` page document.

```

---

layout: ../layouts/MySiteLayout.astro

title: My Markdown page

---

# Title

This is my page, written in **Markdown.**
```

Read more about [Markdown](https://docs.astro.build/en/guides/markdown-content/) in Astro.

## HTML Pages

[Section titled HTML Pages](https://docs.astro.build/en/basics/astro-pages/#html-pages)

Files with the `.html` file extension can be placed in the `src/pages/` directory and used directly as pages on your site. Note that some key Astro features are not supported in [HTML Components](https://docs.astro.build/en/basics/astro-components/#html-components).

## Custom 404 Error Page

[Section titled Custom 404 Error Page](https://docs.astro.build/en/basics/astro-pages/#custom-404-error-page)

For a custom 404 error page, you can create a `404.astro` or `404.md` file in `src/pages`.

This will build to a `404.html` page. Most [deploy services](https://docs.astro.build/en/guides/deploy/) will find and use it.

## Custom 500 Error Page

[Section titled Custom 500 Error Page](https://docs.astro.build/en/basics/astro-pages/#custom-500-error-page)

For a custom 500 error page to show for pages that are [rendered on demand](https://docs.astro.build/en/guides/on-demand-rendering/), create the file `src/pages/500.astro`. This custom page is not available for prerendered pages and can’t be prerendered.

If an error occurs rendering this page, your host’s default 500 error page will be shown to your visitor.

**Added in:** `astro@4.10.3`

During development, if you have a `500.astro`, the error thrown at runtime is logged in your terminal, as opposed to being shown in the error overlay.

### `error`

[Section titled error](https://docs.astro.build/en/basics/astro-pages/#error)

**Added in:** `astro@4.11.0`

`src/pages/500.astro` is a special page that is automatically passed an `error` prop for any error thrown during rendering. This allows you to use the details of an error (e.g. from a page, from middleware, etc.) to display information to your visitor.

The `error` prop’s data type can be anything, which may affect how you type or use the value in your code:

```

---

interface Props {

  error: unknown;

}

const { error } = Astro.props;

---

<div>{error instanceof Error ? error.message : "Unknown error"}</div>
```

To avoid leaking sensitive information when displaying content from the `error` prop, consider evaluating the error first, and returning appropriate content based on the error thrown. For example, you should avoid displaying the error’s stack as it contains information about how your code is structured on the server.

## Page Partials

[Section titled Page Partials](https://docs.astro.build/en/basics/astro-pages/#page-partials)

**Added in:** `astro@3.4.0`

Partials are page components located within `src/pages/` that are not intended to render as full pages.

Like components located outside of this folder, these files do not automatically include the `<!DOCTYPE html>` declaration, nor any `<head>` content such as scoped styles and scripts.

However, because they are located in the special `src/pages/` directory, the generated HTML is available at a URL corresponding to its file path. This allows a rendering library (e.g. [htmx](https://htmx.org/), [Stimulus](https://stimulus.hotwired.dev/), [jQuery](https://jquery.com/)) to access it on the client and load sections of HTML dynamically on a page without a browser refresh or page navigation.

Partials, when combined with a rendering library, provide an alternative to [Astro islands](https://docs.astro.build/en/concepts/islands/) and [`<script>` tags](https://docs.astro.build/en/guides/client-side-scripts/) for building dynamic content in Astro.

Page files that can export a value for [`partial`](https://docs.astro.build/en/reference/routing-reference/#partial) (e.g. `.astro` and `.mdx`, but not `.md`) can be marked as partials.

```

---

export const partial = true;

---

<li>I'm a partial!</li>
```

### Using with a library

[Section titled Using with a library](https://docs.astro.build/en/basics/astro-pages/#using-with-a-library)

Partials are used to dynamically update a section of a page using a library such as [htmx](https://htmx.org/).

The following example shows an `hx-post` attribute set to a partial’s URL. The content from the partial page will be used to update the targeted HTML element on this page.

```

<html>

  <head>

    <title>My page</title>

    <script src="https://unpkg.com/htmx.org@1.9.6"

      integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni"

      crossorigin="anonymous"></script>

  </head>

  <body>

    <section>

      <div id="parent-div">Target here</div>

      <button hx-post="/partials/clicked/"

        hx-trigger="click"

        hx-target="#parent-div"

        hx-swap="innerHTML"

      >

        Click Me!

      </button>

    </section>

  </body>

</html>
```

The `.astro` partial must exist at the corresponding file path, and include an export defining the page as a partial:

```

---

export const partial = true;

---

<div>I was clicked!</div>
```

See the [htmx documentation](https://htmx.org/docs/) for more details on using htmx.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Site Deployment
[Skip to content](https://docs.astro.build/en/guides/deploy/surge/#_top)

# Deploy your Astro Site to Surge

You can deploy your Astro project to [Surge](https://surge.sh/), a single-command web publishing platform designed for front-end developers.

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/surge/#how-to-deploy)

1. Install [the Surge CLI](https://www.npmjs.com/package/surge) globally from the terminal, if you haven’t already.



```


npm install -g surge
```

2. Build your Astro site from your project’s root directory.



```


npm run build
```

3. Deploy to Surge using the CLI.



```


surge dist
```









You can [use a custom domain with Surge](http://surge.sh/help/adding-a-custom-domain) when deploying by running `surge dist yourdomain.com`.


## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2Fsurge%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=68702555)

## CloudCannon with Astro
[Skip to content](https://docs.astro.build/en/guides/cms/cloudcannon/#_top)

# CloudCannon & Astro

[CloudCannon](https://cloudcannon.com/) is a Git-based headless content management system that provides a visual editor for your content.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/cloudcannon/#official-resources)

- [Astro Starter Template](https://cloudcannon.com/templates/astro-starter/)
- [Astro Multilingual Starter Template](https://cloudcannon.com/templates/astro-multilingual-starter/)
- [Astro Starter Guide](https://cloudcannon.com/documentation/guides/astro-starter-guide/)
- [Bookshop & Astro Guide](https://cloudcannon.com/documentation/guides/bookshop-astro-guide/)
- [Astro Beginner Tutorial Series](https://cloudcannon.com/tutorials/astro-beginners-tutorial-series/)
- Blog: [How CloudCannon’s live editing works with Astro and Bookshop](https://cloudcannon.com/blog/how-cloudcannons-live-editing-works-with-astro-and-bookshop/)
- Blog: [Out-of-this-world support for all Astro users](https://cloudcannon.com/blog/out-of-this-world-support-for-all-astro-users/)

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/cloudcannon/#community-resources)

- [CloudCannon announces official support for Astro](https://astro.build/blog/astro-cloudcannon-support/)

## Themes

[Section titled Themes](https://docs.astro.build/en/guides/cms/cloudcannon/#themes)

- [![](https://docs.astro.build/_astro/sendit.Cu8vxERj_ZX2Pho.webp)Sendit](https://astro.build/themes/details/sendit/)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Sentry Integration
[Skip to content](https://docs.astro.build/en/guides/backend/sentry/#_top)

# Monitor your Astro Site with Sentry

[Sentry](https://sentry.io/) offers a comprehensive application monitoring and error tracking service designed to help developers identify, diagnose, and resolve issues in real-time.

Read more on our blog about [Astro’s partnership with Sentry](https://astro.build/blog/sentry-official-monitoring-partner/) and Sentry’s Spotlight dev toolbar app that brings a rich debug overlay into your Astro development environment. Spotlight shows errors, traces, and important context right in your browser during local development.

Sentry’s Astro SDK enables automatic reporting of errors and tracing data in your Astro application.

## Project Configuration

[Section titled Project Configuration](https://docs.astro.build/en/guides/backend/sentry/#project-configuration)

A full list of prerequisites can be found in [the Sentry guide for Astro](https://docs.sentry.io/platforms/javascript/guides/astro/#prerequisites).

## Install

[Section titled Install](https://docs.astro.build/en/guides/backend/sentry/#install)

Sentry captures data by using an SDK within your application’s runtime.

Install the SDK by running the following command for the package manager of your choice in the Astro CLI:

- [npm](https://docs.astro.build/en/guides/backend/sentry/#tab-panel-3045)
- [pnpm](https://docs.astro.build/en/guides/backend/sentry/#tab-panel-3046)
- [Yarn](https://docs.astro.build/en/guides/backend/sentry/#tab-panel-3047)

```

npx astro add @sentry/astro
```

```

pnpm astro add @sentry/astro
```

```

yarn astro add @sentry/astro
```

The astro CLI installs the SDK package and adds the Sentry integration to your `astro.config.mjs` file.

## Configure

[Section titled Configure](https://docs.astro.build/en/guides/backend/sentry/#configure)

To configure the Sentry integration, you need to provide the following credentials in your `astro.config.mjs` file.

1. **Client key (DSN)** \- You can find the DSN in your Sentry project settings under _Client keys (DSN)_.
2. **Project name** \- You can find the project name in your Sentry project settings under _General settings_.
3. **Auth token** \- You can create an auth token in your Sentry organization settings under _Auth tokens_.

```

import { defineConfig } from 'astro/config';

import sentry from '@sentry/astro';

export default defineConfig({

  integrations: [\
\
    sentry({\
\
      dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',\
\
      sourceMapsUploadOptions: {\
\
        project: 'example-project',\
\
        authToken: process.env.SENTRY_AUTH_TOKEN,\
\
      },\
\
    }),\
\
  ],

});
```

Once you’ve configured your `sourceMapsUploadOptions` and added your `dsn`, the SDK will automatically capture and send errors and performance events to Sentry.

## Test your setup

[Section titled Test your setup](https://docs.astro.build/en/guides/backend/sentry/#test-your-setup)

Add the following `<button>` element to one of your `.astro` pages. This will allow you to manually trigger an error so you can test the error reporting process.

```

<button onclick="throw new Error('This is a test error')">Throw test error</button>
```

To view and resolve the recorded error, log into [sentry.io](https://sentry.io/) and open your project.

## More backend service guides

- ![](https://docs.astro.build/logos/appwriteio.svg)



### [Appwrite](https://docs.astro.build/en/guides/backend/appwriteio/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Firebase](https://docs.astro.build/en/guides/backend/google-firebase/)

- ![](https://docs.astro.build/logos/neon.svg)



### [Neon](https://docs.astro.build/en/guides/backend/neon/)

- ![](https://docs.astro.build/logos/sentry.svg)



### [Sentry](https://docs.astro.build/en/guides/backend/sentry/)

- ![](https://docs.astro.build/logos/supabase.svg)



### [Supabase](https://docs.astro.build/en/guides/backend/supabase/)

- ![](https://docs.astro.build/logos/turso.svg)



### [Turso](https://docs.astro.build/en/guides/backend/turso/)

- ![](https://docs.astro.build/logos/xata.svg)



### [Xata](https://docs.astro.build/en/guides/backend/xata/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fbackend%2Fsentry%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=94821983)

## Astro Components Tutorial
[Skip to content](https://docs.astro.build/en/tutorial/3-components/#_top)

# Check in: Unit 3 - Components

Now that you have `.astro` and `.md` files generating entire pages on your website, it’s time to make and reuse smaller bits of HTML with Astro components!

## Looking ahead

[Section titled Looking ahead](https://docs.astro.build/en/tutorial/3-components/#looking-ahead)

In this unit, you’ll learn how to create **Astro components** to reuse code for common elements across your website.

You’ll build:

- A Navigation component that presents a menu of links to your pages
- A Footer component to include at the bottom of each page
- A Social Media component, used in the Footer, that links to profile pages
- An interactive Hamburger component to toggle the Navigation on mobile

Along the way, you’ll use CSS and JavaScript to build a responsive design that reacts to screen sizes and user input.

## Checklist

[Section titled Checklist](https://docs.astro.build/en/tutorial/3-components/#checklist)

- I am ready to build some Astro components!

Tutorials

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Add Reading Time
[Skip to content](https://docs.astro.build/en/recipes/reading-time/#_top)

# Add reading time

Create a [remark plugin](https://github.com/remarkjs/remark) which adds a reading time property to the frontmatter of your Markdown or MDX files. Use this property to display the reading time for each page.

## Recipe

[Section titled Recipe](https://docs.astro.build/en/recipes/reading-time/#recipe)

1. Install Helper Packages

Install these two helper packages:


   - [`reading-time`](https://www.npmjs.com/package/reading-time) to calculate minutes read
   - [`mdast-util-to-string`](https://www.npmjs.com/package/mdast-util-to-string) to extract all text from your markdown

- [npm](https://docs.astro.build/en/recipes/reading-time/#tab-panel-1726)
- [pnpm](https://docs.astro.build/en/recipes/reading-time/#tab-panel-1727)
- [Yarn](https://docs.astro.build/en/recipes/reading-time/#tab-panel-1728)

```

npm install reading-time mdast-util-to-string
```

```

pnpm add reading-time mdast-util-to-string
```

```

yarn add reading-time mdast-util-to-string
```

2. Create a remark plugin.

This plugin uses the `mdast-util-to-string` package to get the Markdown file’s text. This text is then passed to the `reading-time` package to calculate the reading time in minutes.



```


import getReadingTime from 'reading-time';

import { toString } from 'mdast-util-to-string';




export function remarkReadingTime() {

     return function (tree, { data }) {

       const textOnPage = toString(tree);

       const readingTime = getReadingTime(textOnPage);

       // readingTime.text will give us minutes read as a friendly string,

       // i.e. "3 min read"

       data.astro.frontmatter.minutesRead = readingTime.text;

     };

}
```

3. Add the plugin to your config:



```


import { defineConfig } from 'astro/config';

import { remarkReadingTime } from './remark-reading-time.mjs';




export default defineConfig({

     markdown: {

       remarkPlugins: [remarkReadingTime],

     },

});
```









Now all Markdown documents will have a calculated `minutesRead` property in their frontmatter.

4. Display Reading Time

If your blog posts are stored in a [content collection](https://docs.astro.build/en/guides/content-collections/), access the `remarkPluginFrontmatter` from the `render(entry)` function. Then, render `minutesRead` in your template wherever you would like it to appear.



```


   ---

import { getCollection, render } from 'astro:content';




export async function getStaticPaths() {

     const blog = await getCollection('blog');

     return blog.map(entry => ({

       params: { slug: entry.id },

       props: { entry },

     }));

}




const { entry } = Astro.props;

const { Content, remarkPluginFrontmatter } = await render(entry);

   ---




<html>

     <head>...</head>

     <body>

       ...

       <p>{remarkPluginFrontmatter.minutesRead}</p>

       ...

     </body>

</html>
```









If you’re using a [Markdown layout](https://docs.astro.build/en/basics/layouts/#markdown-layouts), use the `minutesRead` frontmatter property from `Astro.props` in your layout template.



```


   ---

const { minutesRead } = Astro.props.frontmatter;

   ---




<html>

     <head>...</head>

     <body>

       <p>{minutesRead}</p>

       <slot />

     </body>

</html>
```


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Storyblok Integration Guide
[Skip to content](https://docs.astro.build/en/guides/cms/storyblok/#_top)

# Storyblok & Astro

[Storyblok](https://www.storyblok.com/) is a component-based headless CMS that allows you to manage your content using reusable components called Bloks.

## Integrating with Astro

[Section titled Integrating with Astro](https://docs.astro.build/en/guides/cms/storyblok/#integrating-with-astro)

In this section, you will use the [Storyblok integration](https://github.com/storyblok/storyblok-astro) to connect Storyblok to Astro.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/storyblok/#prerequisites)

To get started, you will need to have the following:

1. **An Astro project** \- If you don’t have an Astro project yet, our [Installation guide](https://docs.astro.build/en/install-and-setup/) will get you up and running in no time.

2. **A Storyblok account and space** \- If you don’t have an account yet, [sign up for free](https://app.storyblok.com/#/signup) and create a new space.

3. **Storyblok Preview token** \- This token will be used to fetch drafts and published versions of your content. You can find and generate your API token in the Access Tokens tab of your Storyblok space settings.


### Setting up credentials

[Section titled Setting up credentials](https://docs.astro.build/en/guides/cms/storyblok/#setting-up-credentials)

To add your Storyblok credentials to Astro, create a `.env` file in the root of your project with the following variable:

```

STORYBLOK_TOKEN=YOUR_PREVIEW_TOKEN
```

Now, you should be able to use these environment variables in your project.

Your root directory should now include this new file:

- Directorysrc/

- …

- **.env**
- astro.config.mjs
- package.json

### Installing dependencies

[Section titled Installing dependencies](https://docs.astro.build/en/guides/cms/storyblok/#installing-dependencies)

To connect Astro with your Storyblok space, install the official [Storyblok integration](https://github.com/storyblok/storyblok-astro) using the command below for your preferred package manager:

- [npm](https://docs.astro.build/en/guides/cms/storyblok/#tab-panel-3102)
- [pnpm](https://docs.astro.build/en/guides/cms/storyblok/#tab-panel-3103)
- [Yarn](https://docs.astro.build/en/guides/cms/storyblok/#tab-panel-3104)

```

npm install @storyblok/astro vite
```

```

pnpm add @storyblok/astro vite
```

```

yarn add @storyblok/astro vite
```

### Configuring Storyblok

[Section titled Configuring Storyblok](https://docs.astro.build/en/guides/cms/storyblok/#configuring-storyblok)

Modify your Astro config file to include the Storyblok integration:

```

import { defineConfig } from 'astro/config';

import { storyblok } from '@storyblok/astro';

import { loadEnv } from 'vite';

const env = loadEnv("", process.cwd(), 'STORYBLOK');

export default defineConfig({

  integrations: [\
\
    storyblok({\
\
      accessToken: env.STORYBLOK_TOKEN,\
\
      components: {\
\
        // Add your components here\
\
      },\
\
      apiOptions: {\
\
        // Choose your Storyblok space region\
\
        region: 'us', // optional,  or 'eu' (default)\
\
      },\
\
    })\
\
  ],

});
```

The Storyblok integration requires an object with the following properties:

1. `accessToken` \- This references the Storyblok API token that you added in the previous step.

2. `components` \- An object that maps Storyblok component names to paths to your local components. This is required to render your Storyblok Bloks in Astro.

3. `apiOptions` \- An object containing [Storyblok API options](https://github.com/storyblok/storyblok-astro#options).


### Connecting Bloks to Astro components

[Section titled Connecting Bloks to Astro components](https://docs.astro.build/en/guides/cms/storyblok/#connecting-bloks-to-astro-components)

To connect your Bloks to Astro, create a new folder named `storyblok` in the `src` directory. This folder will contain all the Astro components that will match your Bloks in your Storyblok Blok library.

In this example, you have a `blogPost` Blok content type in your Storyblok library with the following fields:

- `title` \- A text field
- `description` \- A text field
- `content` \- A rich text field

Our goal is to create the equivalent Astro component that will use these fields to render its content. To do this, create a new file named `BlogPost.astro` inside `src/storyblok` with the following content:

```

---

import { storyblokEditable, renderRichText } from '@storyblok/astro'

const { blok } = Astro.props

const content = renderRichText(blok.content)

---

<article {...storyblokEditable(blok)}>

  <h1>{blok.title}</h1>

  <p>{blok.description}</p>

  <Fragment set:html={content} />

</article>
```

The `blok` property contains the data that you will receive from Storyblok. It also contains the fields that were defined in the `blogPost` content type Blok in Storyblok.

To render our content, the integration provides utility functions such as:

- `storyblokEditable` \- it adds the necessary attributes to the elements so that you can edit them in Storyblok.
- `renderRichText` \- it transforms the rich text field into HTML.

Your root directory should include this new file:

- Directorysrc/


- Directorystoryblok/


- **BlogPost.astro**

- .env
- astro.config.mjs
- package.json

Finally, to connect the `blogPost` Blok to the `BlogPost` component, add a new property to your components object in your Astro config file.

- The key is the name of the Blok in Storyblok. In this case, it is `blogPost`.
- The value is the path to the component. In this case, it is `storyblok/BlogPost`.

```

import { defineConfig } from 'astro/config';

import { storyblok } from '@storyblok/astro';

import { loadEnv } from 'vite';

const env = loadEnv("", process.cwd(), 'STORYBLOK');

export default defineConfig({

  integrations: [\
\
    storyblok({\
\
      accessToken: env.STORYBLOK_TOKEN,\
\
      components: {\
\
        blogPost: 'storyblok/BlogPost',\
\
      },\
\
      apiOptions: {\
\
        region: 'us',\
\
      },\
\
    })\
\
  ],

});
```

### Fetching data

[Section titled Fetching data](https://docs.astro.build/en/guides/cms/storyblok/#fetching-data)

To test the setup, in Storyblok create a new story with the `blogPost` content type named `test-post`.
In Astro, create a new page in the `src/pages/` directory named `test-post.astro` with the following content:

```

---

import { useStoryblokApi } from '@storyblok/astro'

import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'

const storyblokApi = useStoryblokApi()

const { data } = await storyblokApi.get("cdn/stories/test-post", {

  version: import.meta.env.DEV ? "draft" : "published",

});

const content = data.story.content;

---

<StoryblokComponent blok={content} />
```

To query your data, use the `useStoryblokApi` hook. This will initialize a new client instance using your integration configuration.

To render your content, pass the `content` property of the Story to the `StoryblokComponent` as a `blok` prop. This component will render the Bloks that are defined inside the `content` property. In this case, it will render the `BlogPost` component.

## Making a blog with Astro and Storyblok

[Section titled Making a blog with Astro and Storyblok](https://docs.astro.build/en/guides/cms/storyblok/#making-a-blog-with-astro-and-storyblok)

With the integration set up, you can now create a blog with Astro and Storyblok.

### Prerequisites

[Section titled Prerequisites](https://docs.astro.build/en/guides/cms/storyblok/#prerequisites-1)

1. **A Storyblok space** \- For this tutorial, we recommend using a new space. If you already have a space with Bloks, feel free to use them, but you will need to modify the code to match the Blok names and content types.

2. **An Astro project integrated with Storyblok** \- See [integrating with Astro](https://docs.astro.build/en/guides/cms/storyblok/#integrating-with-astro) for instructions on how to set up the integration.


### Creating a blok library

[Section titled Creating a blok library](https://docs.astro.build/en/guides/cms/storyblok/#creating-a-blok-library)

To create Bloks, go to the Storyblok app and click on the **Block Library** tab. Click on the `+ New blok` button and create the following Bloks:

1. `blogPost` \- A content type Blok with the following fields:
   - `title` \- A text field
   - `description` \- A text field
   - `content` \- A rich text field
2. `blogPostList` \- An empty nestable Blok

3. `page` \- A content type Blok with the following fields:
   - `body` \- A nestable Blok

### Creating content

[Section titled Creating content](https://docs.astro.build/en/guides/cms/storyblok/#creating-content)

To add new content, go to the content section by clicking on the **Content** tab. Using the Blok library that you created in the previous step, create the following stories:

1. `home` \- A content type story with the `page` Blok. Inside the `body` field, add a `blogPostList` Blok.

2. `blog/no-javascript` \- A story with the `blogPost` content type inside the blog folder.



```


title: No JavaScript

description: A sample blog post

content: Hi there! This blog post doesn't use JavaScript.
```

3. `blog/astro-is-amazing` \- A story with the `blogPost` content type inside the blog folder.



```


title: Astro is amazing

description: We love Astro

content: Hi there! This blog post was build with Astro.
```


Now that you have your content ready, return to your Astro project and start building your blog.

### Connecting Bloks to components

[Section titled Connecting Bloks to components](https://docs.astro.build/en/guides/cms/storyblok/#connecting-bloks-to-components)

To connect your newly created Bloks to Astro components, create a new folder named `storyblok` in your `src` directory and add the following files:

`Page.astro` is a nestable Block content type component that will recursively render all the Bloks inside the `body` property of the `page` Blok. It also adds the `storyblokEditable` attributes to the parent element which will allow us to edit the page in Storyblok.

```

---

import { storyblokEditable } from '@storyblok/astro'

import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";

const { blok } = Astro.props

---

<main {...storyblokEditable(blok)}>

  {

    blok.body?.map((blok) => {

      return <StoryblokComponent blok={blok} />

    })

  }

</main>
```

`BlogPost.astro` will render the `title`, `description` and `content` properties of the `blogPost` Blok.

To transform the `content` property from a rich text field to HTML, you can use the `renderRichText` helper function.

```

---

import { storyblokEditable, renderRichText } from '@storyblok/astro'

const { blok } = Astro.props

const content = renderRichText(blok.content)

---

<article {...storyblokEditable(blok)}>

  <h1>{blok.title}</h1>

  <p>{blok.description}</p>

  <Fragment set:html={content} />

</article>
```

`BlogPostList.astro` is a nestable Blok content type component that will render a list of blog post previews.

It uses the `useStoryblokApi` hook to fetch all the stories with the content type of `blogPost`. It uses the `version` query parameter to fetch the draft versions of the stories when in development mode and the published versions when building for production.

`Astro.props` is used to set up the editor in Storyblok. Additional props can also be passed to your component here, if needed.

```

---

import { storyblokEditable } from '@storyblok/astro'

import { useStoryblokApi } from '@storyblok/astro'

const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get('cdn/stories', {

  version: import.meta.env.DEV ? "draft" : "published",

  content_type: 'blogPost',

})

const posts = data.stories.map(story => {

  return {

    title: story.content.title,

    date: new Date(story.published_at).toLocaleDateString("en-US", {dateStyle: "full"}),

    description: story.content.description,

    slug: story.full_slug,

  }

})

const { blok } = Astro.props

---

<ul {...storyblokEditable(blok)}>

  {posts.map(post => (

    <li>

      <time>{post.date}</time>

      <a href={post.slug}>{post.title}</a>

      <p>{post.description}</p>

    </li>

  ))}

</ul>
```

Finally, add your components to the `components` property of the `storyblok` config object in `astro.config.mjs`. The key is the name of the Blok in Storyblok, and the value is the path to the component relative to `src`.

```

import { defineConfig } from 'astro/config';

import { storyblok } from '@storyblok/astro';

import { loadEnv } from 'vite';

const env = loadEnv("", process.cwd(), 'STORYBLOK');

export default defineConfig({

  integrations: [\
\
    storyblok({\
\
      accessToken: env.STORYBLOK_TOKEN,\
\
      components: {\
\
        blogPost: 'storyblok/BlogPost',\
\
        blogPostList: 'storyblok/BlogPostList',\
\
        page: 'storyblok/Page',\
\
      },\
\
      apiOptions: {\
\
        region: 'us',\
\
      },\
\
    })\
\
  ],

});
```

### Generating pages

[Section titled Generating pages](https://docs.astro.build/en/guides/cms/storyblok/#generating-pages)

To create a route for a specific `page`, you can fetch its content directly from the Storyblok API and pass it to the `StoryblokComponent` component. Remember to make sure you have added the `Page` component to your astro.config.mjs.

Create an `index.astro` file in `src/pages/` to render the `home` page:

```

---

import { useStoryblokApi } from '@storyblok/astro'

import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'

import BaseLayout from '../layouts/BaseLayout.astro'

const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get('cdn/stories/home', {

  version: import.meta.env.DEV ? "draft" : "published",

});

const content = data.story.content;

---

<html lang="en">

  <head>

    <title>Storyblok & Astro</title>

  </head>

  <body>

    <StoryblokComponent blok={content} />

  </body>

</html>
```

To generate pages for all of your blog posts, create a `.astro` page that will create dynamic routes. This approach varies depending on whether your routes are prerendered (the default in Astro) or [rendered on demand](https://docs.astro.build/en/guides/on-demand-rendering/).

#### Static site generation

[Section titled Static site generation](https://docs.astro.build/en/guides/cms/storyblok/#static-site-generation)

If you are using Astro’s default static site generation, you will use [dynamic routes](https://docs.astro.build/en/guides/routing/#dynamic-routes) and the `getStaticPaths` function to generate your project pages.

Create a new directory `src/pages/blog/` and add a new file called `[...slug].astro` with the following code:

```

---

import { useStoryblokApi } from '@storyblok/astro'

import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'

export async function getStaticPaths() {

  const sbApi = useStoryblokApi();

  const { data } = await sbApi.get("cdn/stories", {

    content_type: "blogPost",

    version: import.meta.env.DEV ? "draft" : "published",

  });

  const stories = Object.values(data.stories);

  return stories.map((story) => {

    return {

      params: { slug: story.slug },

    };

  });

}

const sbApi = useStoryblokApi();

const { slug } = Astro.params;

const { data } = await sbApi.get(`cdn/stories/blog/${slug}`, {

  version: import.meta.env.DEV ? "draft" : "published",

});

const story = data.story;

---

<html lang="en">

  <head>

    <title>Storyblok & Astro</title>

  </head>

  <body>

    <StoryblokComponent blok={story.content} />

  </body>

</html>
```

This file will generate a page for each story, with the slug and content fetched from the Storyblok API.

#### On-demand rendering

[Section titled On-demand rendering](https://docs.astro.build/en/guides/cms/storyblok/#on-demand-rendering)

If you are [rendering your routes on demand with an adapter](https://docs.astro.build/en/guides/on-demand-rendering/), you will use dynamic routes to fetch the page data from Storyblok.

Create a new directory `src/pages/blog/` and add a new file called `[...slug].astro` with the following code:

```

---

import { useStoryblokApi } from '@storyblok/astro'

import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'

const storyblokApi = useStoryblokApi()

const slug = Astro.params.slug;

let content;

try {

  const { data } = await storyblokApi.get(`cdn/stories/blog/${slug}`, {

    version: import.meta.env.DEV ? "draft" : "published",

  });

  content = data.story.content

} catch (error) {

  return Astro.redirect('/404')

}

---

<html lang="en">

  <head>

    <title>Storyblok & Astro</title>

  </head>

  <body>

    <StoryblokComponent blok={content} />

  </body>

</html>
```

This file will fetch and render the page data from Storyblok that matches the dynamic `slug` parameter.

Since you are using a redirect to `/404`, create a 404 page in `src/pages`:

```

<html lang="en">

  <head>

    <title>Not found</title>

  </head>

  <body>

    <p>Sorry, this page does not exist.</p>

  </body>

</html>
```

If the story is not found, the request will be redirected to the 404 page.

### Publishing your site

[Section titled Publishing your site](https://docs.astro.build/en/guides/cms/storyblok/#publishing-your-site)

To deploy your website, visit our [deployment guides](https://docs.astro.build/en/guides/deploy/) and follow the instructions for your preferred hosting provider.

#### Rebuild on Storyblok changes

[Section titled Rebuild on Storyblok changes](https://docs.astro.build/en/guides/cms/storyblok/#rebuild-on-storyblok-changes)

If your project is using Astro’s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Storyblok events.

##### Netlify

[Section titled Netlify](https://docs.astro.build/en/guides/cms/storyblok/#netlify)

To set up a webhook in Netlify:

1. Go to your site dashboard and click on **Build & deploy**.

2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.

3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.


##### Vercel

[Section titled Vercel](https://docs.astro.build/en/guides/cms/storyblok/#vercel)

To set up a webhook in Vercel:

1. Go to your project dashboard and click on **Settings**.

2. Under the **Git** tab, find the **Deploy Hooks** section.

3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.


##### Adding a webhook to Storyblok

[Section titled Adding a webhook to Storyblok](https://docs.astro.build/en/guides/cms/storyblok/#adding-a-webhook-to-storyblok)

In your Storyblok space **Settings**, click on the **Webhooks** tab. Paste the webhook URL you copied in the **Story published & unpublished** field and hit `Save` to create a webhook.

Now, whenever you publish a new story, a new build will be triggered and your blog will be updated.

## Official Resources

[Section titled Official Resources](https://docs.astro.build/en/guides/cms/storyblok/#official-resources)

- Storyblok provides an [Astro Integration](https://www.storyblok.com/mp/announcing-storyblok-astro) to add Storyblok to your project.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/storyblok/#community-resources)

- [Getting the Visual Editor to work for Storyblok + Astro](https://dev.to/sandrarodgers/getting-the-visual-editor-to-work-for-storyblok-astro-2gja) by Sandra Rodgers
- [Astro + Storyblok: SSR preview for instant visual editing](https://dev.to/jgierer12/astro-storyblok-ssr-preview-for-instant-visual-editing-3g9m) by Jonas Gierer
- [Astro-Storyblok Previews Site with Netlify’s Branch Deploys Feature](https://dev.to/sandrarodgers/astro-storyblok-previews-site-with-netlifys-branch-deploys-feature-44dh) by Sandra Rodgers

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Framework Components
[Skip to content](https://docs.astro.build/en/guides/framework-components/#_top)

# Front-end frameworks

Build your Astro website without sacrificing your favorite component framework. Create Astro [islands](https://docs.astro.build/en/concepts/islands/) with the UI frameworks of your choice.

## Official front-end framework integrations

[Section titled Official front-end framework integrations](https://docs.astro.build/en/guides/framework-components/#official-front-end-framework-integrations)

Astro supports a variety of popular frameworks including [React](https://react.dev/), [Preact](https://preactjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [SolidJS](https://www.solidjs.com/), and [AlpineJS](https://alpinejs.dev/) with official integrations.

Find even more [community-maintained framework integrations](https://astro.build/integrations/?search=&categories%5B%5D=frameworks) (e.g. Angular, Qwik, Elm) in our integrations directory.

### Front-end frameworks

- ![](https://docs.astro.build/logos/alpine-js.svg)



### [@astrojs/alpinejs](https://docs.astro.build/en/guides/integrations-guide/alpinejs/)

- ![](https://docs.astro.build/logos/preact.svg)



### [@astrojs/preact](https://docs.astro.build/en/guides/integrations-guide/preact/)

- ![](https://docs.astro.build/logos/react.svg)



### [@astrojs/react](https://docs.astro.build/en/guides/integrations-guide/react/)

- ![](https://docs.astro.build/logos/solid.svg)



### [@astrojs/solid⁠-⁠js](https://docs.astro.build/en/guides/integrations-guide/solid-js/)

- ![](https://docs.astro.build/logos/svelte.svg)



### [@astrojs/svelte](https://docs.astro.build/en/guides/integrations-guide/svelte/)

- ![](https://docs.astro.build/logos/vue.svg)



### [@astrojs/vue](https://docs.astro.build/en/guides/integrations-guide/vue/)


## Installing integrations

[Section titled Installing integrations](https://docs.astro.build/en/guides/framework-components/#installing-integrations)

One or several of these Astro integrations can be installed and configured in your project.

See the [Integrations Guide](https://docs.astro.build/en/guides/integrations-guide/) for more details on installing and configuring Astro integrations.

## Using framework components

[Section titled Using framework components](https://docs.astro.build/en/guides/framework-components/#using-framework-components)

Use your JavaScript framework components in your Astro pages, layouts and components just like Astro components! All your components can live together in `/src/components`, or can be organized in any way you like.

To use a framework component, import it from its relative path in your Astro component script. Then, use the component alongside other components, HTML elements and JSX-like expressions in the component template.

```

---

import MyReactComponent from '../components/MyReactComponent.jsx';

---

<html>

  <body>

    <h1>Use React components directly in Astro!</h1>

    <MyReactComponent />

  </body>

</html>
```

By default, your framework components will only render on the server, as static HTML. This is useful for templating components that are not interactive and avoids sending any unnecessary JavaScript to the client.

## Hydrating interactive components

[Section titled Hydrating interactive components](https://docs.astro.build/en/guides/framework-components/#hydrating-interactive-components)

A framework component can be made interactive (hydrated) using a [`client:*` directive](https://docs.astro.build/en/reference/directives-reference/#client-directives). These are component attributes that determine when your component’s JavaScript should be sent to the browser.

With all client directives except `client:only`, your component will first render on the server to generate static HTML. Component JavaScript will be sent to the browser according to the directive you chose. The component will then hydrate and become interactive.

```

---

// Example: hydrating framework components in the browser.

import InteractiveButton from '../components/InteractiveButton.jsx';

import InteractiveCounter from '../components/InteractiveCounter.jsx';

import InteractiveModal from '../components/InteractiveModal.svelte';

---

<!-- This component's JS will begin importing when the page loads -->

<InteractiveButton client:load />

<!-- This component's JS will not be sent to the client until

the user scrolls down and the component is visible on the page -->

<InteractiveCounter client:visible />

<!-- This component won't render on the server, but will render on the client when the page loads -->

<InteractiveModal client:only="svelte" />
```

The JavaScript framework (React, Svelte, etc.) needed to render the component will be sent to the browser along with the component’s own JavaScript. If two or more components on a page use the same framework, the framework will only be sent once.

### Available hydration directives

[Section titled Available hydration directives](https://docs.astro.build/en/guides/framework-components/#available-hydration-directives)

There are several hydration directives available for UI framework components: `client:load`, `client:idle`, `client:visible`, `client:media={QUERY}` and `client:only={FRAMEWORK}`.

See our [directives reference](https://docs.astro.build/en/reference/directives-reference/#client-directives) page for a full description of these hydration directives, and their usage.

## Mixing frameworks

[Section titled Mixing frameworks](https://docs.astro.build/en/guides/framework-components/#mixing-frameworks)

You can import and render components from multiple frameworks in the same Astro component.

```

---

// Example: Mixing multiple framework components on the same page.

import MyReactComponent from '../components/MyReactComponent.jsx';

import MySvelteComponent from '../components/MySvelteComponent.svelte';

import MyVueComponent from '../components/MyVueComponent.vue';

---

<div>

  <MySvelteComponent />

  <MyReactComponent />

  <MyVueComponent />

</div>
```

## Passing props to framework components

[Section titled Passing props to framework components](https://docs.astro.build/en/guides/framework-components/#passing-props-to-framework-components)

You can pass props from Astro components to framework components:

```

---

import TodoList from '../components/TodoList.jsx';

import Counter from '../components/Counter.svelte';

---

<div>

  <TodoList initialTodos={["learn Astro", "review PRs"]} />

  <Counter startingCount={1} />

</div>
```

## Passing children to framework components

[Section titled Passing children to framework components](https://docs.astro.build/en/guides/framework-components/#passing-children-to-framework-components)

Inside of an Astro component, you **can** pass children to framework components. Each framework has its own patterns for how to reference these children: React, Preact, and Solid all use a special prop named `children`, while Svelte and Vue use the `<slot />` element.

```

---

import MyReactSidebar from '../components/MyReactSidebar.jsx';

---

<MyReactSidebar>

  <p>Here is a sidebar with some text and a button.</p>

</MyReactSidebar>
```

Additionally, you can use [Named Slots](https://docs.astro.build/en/basics/astro-components/#named-slots) to group specific children together.

For React, Preact, and Solid, these slots will be converted to a top-level prop. Slot names using `kebab-case` will be converted to `camelCase`.

```

---

import MySidebar from '../components/MySidebar.jsx';

---

<MySidebar>

  <h2 slot="title">Menu</h2>

  <p>Here is a sidebar with some text and a button.</p>

  <ul slot="social-links">

    <li><a href="https://twitter.com/astrodotbuild">Twitter</a></li>

    <li><a href="https://github.com/withastro">GitHub</a></li>

  </ul>

</MySidebar>
```

```

export default function MySidebar(props) {

  return (

    <aside>

      <header>{props.title}</header>

      <main>{props.children}</main>

      <footer>{props.socialLinks}</footer>

    </aside>

  )

}
```

For Svelte and Vue these slots can be referenced using a `<slot>` element with the `name` attribute. Slot names using `kebab-case` will be preserved.

```

<aside>

  <header><slot name="title" /></header>

  <main><slot /></main>

  <footer><slot name="social-links" /></footer>

</aside>
```

## Nesting framework components

[Section titled Nesting framework components](https://docs.astro.build/en/guides/framework-components/#nesting-framework-components)

Inside of an Astro file, framework component children can also be hydrated components. This means that you can recursively nest components from any of these frameworks.

```

---

import MyReactSidebar from '../components/MyReactSidebar.jsx';

import MyReactButton from '../components/MyReactButton.jsx';

import MySvelteButton from '../components/MySvelteButton.svelte';

---

<MyReactSidebar>

  <p>Here is a sidebar with some text and a button.</p>

  <div slot="actions">

    <MyReactButton client:idle />

    <MySvelteButton client:idle />

  </div>

</MyReactSidebar>
```

This allows you to build entire “apps” in your preferred JavaScript framework and render them, via a parent component, to an Astro page.

## Can I use Astro components inside my framework components?

[Section titled Can I use Astro components inside my framework components?](https://docs.astro.build/en/guides/framework-components/#can-i-use-astro-components-inside-my-framework-components)

Any UI framework component becomes an “island” of that framework. These components must be written entirely as valid code for that framework, using only its own imports and packages. You cannot import `.astro` components in a UI framework component (e.g. `.jsx` or `.svelte`).

You can, however, use [the Astro `<slot />` pattern](https://docs.astro.build/en/basics/astro-components/#slots) to pass static content generated by Astro components as children to your framework components **inside an `.astro` component**.

```

---

import MyReactComponent from  '../components/MyReactComponent.jsx';

import MyAstroComponent from '../components/MyAstroComponent.astro';

---

<MyReactComponent>

  <MyAstroComponent slot="name" />

</MyReactComponent>
```

## Can I hydrate Astro components?

[Section titled Can I hydrate Astro components?](https://docs.astro.build/en/guides/framework-components/#can-i-hydrate-astro-components)

If you try to hydrate an Astro component with a `client:` modifier, you will get an error.

[Astro components](https://docs.astro.build/en/basics/astro-components/) are HTML-only templating components with no client-side runtime. But, you can use a `<script>` tag in your Astro component template to send JavaScript to the browser that executes in the global scope.

Learn more about [client-side `<script>` tags in Astro components](https://docs.astro.build/en/guides/client-side-scripts/)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fframework-components%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=26257073)

## Prismic and Astro Guide
[Skip to content](https://docs.astro.build/en/guides/cms/prismic/#_top)

# Prismic & Astro

[Prismic](https://prismic.io/) is a headless content management system.

## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/prismic/#community-resources)

- [Building with Astro & Prismic - w/ Nate Moore](https://www.youtube.com/watch?v=qFUfuDSLdxM) (livestream) and the [repo from the show](https://github.com/natemoo-re/miles-of-code).

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Deployment Guide
[Skip to content](https://docs.astro.build/en/guides/deploy/stormkit/#_top)

# Deploy your Astro Site to Stormkit

You can deploy your Astro project to [Stormkit](https://stormkit.io/), a deployment platform for static websites, single-page applications (SPAs), and serverless functions.

## How to deploy

[Section titled How to deploy](https://docs.astro.build/en/guides/deploy/stormkit/#how-to-deploy)

1. [Log in to Stormkit](https://app.stormkit.io/auth).

2. Using the user interface, import your Astro project from one of the three supported Git providers (GitHub, GitLab, or Bitbucket).

3. Navigate to the project’s production environment in Stormkit or create a new environment if needed.

4. Verify the build command in your [Stormkit configuration](https://stormkit.io/docs/deployments/configuration). By default, Stormkit CI will run `npm run build` but you can specify a custom build command on this page.

5. Click the “Deploy Now” button to deploy your site.


Read more in the [Stormkit Documentation](https://stormkit.io/docs).

## More Deployment Guides

- ![](https://docs.astro.build/logos/netlify.svg)



### [Netlify](https://docs.astro.build/en/guides/deploy/netlify/)

- ![](https://docs.astro.build/logos/vercel.svg)



### [Vercel](https://docs.astro.build/en/guides/deploy/vercel/)

- ![](https://docs.astro.build/logos/deno.svg)



### [Deno Deploy](https://docs.astro.build/en/guides/deploy/deno/)

- ![](https://docs.astro.build/logos/github.svg)



### [GitHub Pages](https://docs.astro.build/en/guides/deploy/github/)

- ![](https://docs.astro.build/logos/gitlab.svg)



### [GitLab Pages](https://docs.astro.build/en/guides/deploy/gitlab/)

- ![](https://docs.astro.build/logos/cloudflare-pages.svg)



### [Cloudflare Pages](https://docs.astro.build/en/guides/deploy/cloudflare/)

- ![](https://docs.astro.build/logos/aws.svg)



### [AWS](https://docs.astro.build/en/guides/deploy/aws/)

- ![](https://docs.astro.build/logos/flightcontrol.svg)



### [AWS via Flightcontrol](https://docs.astro.build/en/guides/deploy/flightcontrol/)

- ![](https://docs.astro.build/logos/sst.svg)



### [AWS via SST](https://docs.astro.build/en/guides/deploy/sst/)

- ![](https://docs.astro.build/logos/clever-cloud.svg)



### [Clever Cloud](https://docs.astro.build/en/guides/deploy/clever-cloud/)

- ![](https://docs.astro.build/logos/azion.svg)



### [Azion](https://docs.astro.build/en/guides/deploy/azion/)

- ![](https://docs.astro.build/logos/google-cloud.svg)



### [Google Cloud](https://docs.astro.build/en/guides/deploy/google-cloud/)

- ![](https://docs.astro.build/logos/firebase.svg)



### [Google Firebase](https://docs.astro.build/en/guides/deploy/google-firebase/)

- ![](https://docs.astro.build/logos/heroku.svg)



### [Heroku](https://docs.astro.build/en/guides/deploy/heroku/)

- ![](https://docs.astro.build/logos/microsoft-azure.svg)



### [Microsoft Azure](https://docs.astro.build/en/guides/deploy/microsoft-azure/)

- ![](https://docs.astro.build/logos/buddy.svg)



### [Buddy](https://docs.astro.build/en/guides/deploy/buddy/)

- ![](https://docs.astro.build/logos/fleek.svg)



### [Fleek](https://docs.astro.build/en/guides/deploy/fleek/)

- ![](https://docs.astro.build/logos/flyio.svg)



### [Fly.io](https://docs.astro.build/en/guides/deploy/flyio/)

- ![](https://docs.astro.build/logos/render.svg)



### [Render](https://docs.astro.build/en/guides/deploy/render/)

- ![](https://docs.astro.build/logos/stormkit.svg)



### [Stormkit](https://docs.astro.build/en/guides/deploy/stormkit/)

- ![](https://docs.astro.build/logos/surge.svg)



### [Surge](https://docs.astro.build/en/guides/deploy/surge/)

- ![](https://docs.astro.build/logos/cleavr.svg)



### [Cleavr](https://docs.astro.build/en/guides/deploy/cleavr/)

- ![](https://docs.astro.build/logos/kinsta.svg)



### [Kinsta](https://docs.astro.build/en/guides/deploy/kinsta/)

- ![](https://docs.astro.build/logos/zeabur.svg)



### [Zeabur](https://docs.astro.build/en/guides/deploy/zeabur/)

- ![](https://docs.astro.build/logos/zerops.svg)



### [Zerops](https://docs.astro.build/en/guides/deploy/zerops/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Page Not Found
[Skip to content](https://docs.astro.build/en/guides/deploy/edgio#_top)

# 404

![](https://docs.astro.build/_astro/not_found.G3W9mD6c_2rDj7k.webp)![](https://docs.astro.build/_astro/houston_astronaut.DYzk4h7T_ZTTc73.webp)

# 404

This page isn’t in our solar system.

[Take me home.](https://docs.astro.build/en/)

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro Project Structure
[Skip to content](https://docs.astro.build/en/basics/project-structure/#_top)

# Project structure

Your new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro’s existing file structure.

Here’s how an Astro project is organized, and some files you will find in your new project.

## Directories and Files

[Section titled Directories and Files](https://docs.astro.build/en/basics/project-structure/#directories-and-files)

Astro leverages an opinionated folder layout for your project. Every Astro project root should include the following directories and files:

- `src/*` \- Your project source code (components, pages, styles, images, etc.)
- `public/*` \- Your non-code, unprocessed assets (fonts, icons, etc.)
- `package.json` \- A project manifest.
- `astro.config.mjs` \- An Astro configuration file. (recommended)
- `tsconfig.json` \- A TypeScript configuration file. (recommended)

### Example Project Tree

[Section titled Example Project Tree](https://docs.astro.build/en/basics/project-structure/#example-project-tree)

A common Astro project directory might look like this:

- Directorypublic/


- robots.txt
- favicon.svg
- my-cv.pdf

- Directorysrc/


- Directoryblog/


- post1.md
- post2.md
- post3.md

- Directorycomponents/


- Header.astro
- Button.jsx

- Directoryimages/


- image1.jpg
- image2.jpg
- image3.jpg

- Directorylayouts/


- PostLayout.astro

- Directorypages/


- Directoryposts/


- \[post\].astro

- about.astro
- **index.astro**
- rss.xml.js

- Directorystyles/


- global.css

- content.config.ts

- astro.config.mjs
- package.json
- tsconfig.json

### `src/`

[Section titled src/](https://docs.astro.build/en/basics/project-structure/#src)

The `src/` folder is where most of your project source code lives. This includes:

- [Pages](https://docs.astro.build/en/basics/astro-pages/)
- [Layouts](https://docs.astro.build/en/basics/layouts/)
- [Astro components](https://docs.astro.build/en/basics/astro-components/)
- [UI framework components (React, etc.)](https://docs.astro.build/en/guides/framework-components/)
- [Styles (CSS, Sass)](https://docs.astro.build/en/guides/styling/)
- [Markdown](https://docs.astro.build/en/guides/markdown-content/)
- [Images to be optimized and processed by Astro](https://docs.astro.build/en/guides/images/)

Astro processes, optimizes, and bundles your `src/` files to create the final website that is shipped to the browser. Unlike the static `public/` directory, your `src/` files are built and handled for you by Astro.

Some files (like Astro components) are not even sent to the browser as written but are instead rendered to static HTML. Other files (like CSS) are sent to the browser but may be optimized or bundled with other CSS files for performance.

### `src/pages`

[Section titled src/pages](https://docs.astro.build/en/basics/project-structure/#srcpages)

Pages routes are created for your site by adding [supported file types](https://docs.astro.build/en/basics/astro-pages/#supported-page-files) to this directory.

### `src/components`

[Section titled src/components](https://docs.astro.build/en/basics/project-structure/#srccomponents)

**Components** are reusable units of code for your HTML pages. These could be [Astro components](https://docs.astro.build/en/basics/astro-components/), or [UI framework components](https://docs.astro.build/en/guides/framework-components/) like React or Vue. It is common to group and organize all of your project components together in this folder.

This is a common convention in Astro projects, but it is not required. Feel free to organize your components however you like!

### `src/layouts`

[Section titled src/layouts](https://docs.astro.build/en/basics/project-structure/#srclayouts)

[Layouts](https://docs.astro.build/en/basics/layouts/) are Astro components that define the UI structure shared by one or more [pages](https://docs.astro.build/en/basics/astro-pages/).

Just like `src/components`, this directory is a common convention but not required.

### `src/styles`

[Section titled src/styles](https://docs.astro.build/en/basics/project-structure/#srcstyles)

It is a common convention to store your CSS or Sass files in a `src/styles` directory, but this is not required. As long as your styles live somewhere in the `src/` directory and are imported correctly, Astro will handle and optimize them.

### `public/`

[Section titled public/](https://docs.astro.build/en/basics/project-structure/#public)

The `public/` directory is for files and assets in your project that do not need to be processed during Astro’s build process. The files in this folder will be copied into the build folder untouched, and then your site will be built.

This behavior makes `public/` ideal for common assets that do not require any processing, like some images and fonts, or special files such as `robots.txt` and `manifest.webmanifest`.

You can place CSS and JavaScript in your `public/` directory, but be aware that those files will not be bundled or optimized in your final build.

### `package.json`

[Section titled package.json](https://docs.astro.build/en/basics/project-structure/#packagejson)

This is a file used by JavaScript package managers to manage your dependencies. It also defines the scripts that are commonly used to run Astro (ex: `npm run dev`, `npm run build`).

There are [two kinds of dependencies](https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file) you can specify in a `package.json`: `dependencies` and `devDependencies`. In most cases, these work the same: Astro needs all dependencies at build time, and your package manager will install both. We recommend putting all of your dependencies in `dependencies` to start, and only use `devDependencies` if you find a specific need to do so.

For help creating a new `package.json` file for your project, check out the [manual setup](https://docs.astro.build/en/install-and-setup/#manual-setup) instructions.

### `astro.config.mjs`

[Section titled astro.config.mjs](https://docs.astro.build/en/basics/project-structure/#astroconfigmjs)

This file is generated in every starter template and includes configuration options for your Astro project. Here you can specify integrations to use, build options, server options, and more.

Astro supports several file formats for its JavaScript configuration file: `astro.config.js`, `astro.config.mjs`, `astro.config.cjs` and `astro.config.ts`. We recommend using `.mjs` in most cases or `.ts` if you want to write TypeScript in your config file.

TypeScript config file loading is handled using [`tsm`](https://github.com/lukeed/tsm) and will respect your project’s `tsconfig` options.

See the [configuration reference](https://docs.astro.build/en/reference/configuration-reference/) for complete details.

### `tsconfig.json`

[Section titled tsconfig.json](https://docs.astro.build/en/basics/project-structure/#tsconfigjson)

This file is generated in every starter template and includes TypeScript configuration options for your Astro project. Some features (like npm package imports) aren’t fully supported in the editor without a `tsconfig.json` file.

See the [TypeScript Guide](https://docs.astro.build/en/guides/typescript/) for details on setting configurations.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Sitecore and Astro Integration
[Skip to content](https://docs.astro.build/en/guides/cms/sitecore/#_top)

# Sitecore Experience Manager & Astro

[Sitecore Experience Manager (XM)](https://www.sitecore.com/products/experience-manager) is an enterprise-level content management system built on ASP.NET.

## Getting started

[Section titled Getting started](https://docs.astro.build/en/guides/cms/sitecore/#getting-started)

1. [Create a Sitecore Headless website](https://doc.sitecore.com/xp/en/developers/sxa/103/sitecore-experience-accelerator/create-a-headless-tenant-and-site.html) following Sitecore’s official documentation.

2. Run the following project initialization command in your terminal:



```


npx @astro-sitecore-jss/create-astro-sitecore-jss@latest
```

3. Follow the instructions in the terminal to create your project.


## Community Resources

[Section titled Community Resources](https://docs.astro.build/en/guides/cms/sitecore/#community-resources)

- [Sitecore JavaScript Software Development Kit for Astro](https://github.com/exdst/jss-astro-public) on GitHub
- [Introduction to Sitecore with Astro](https://exdst.com/posts/20231002-sitecore-astro)
- [Starting Your First Sitecore Astro Project](https://exdst.com/posts/20240103-first-sitecore-astro-project)

## More CMS guides

- ![](https://docs.astro.build/logos/apostrophecms.svg)



### [Apostrophe](https://docs.astro.build/en/guides/cms/apostrophecms/)

- ![](https://docs.astro.build/logos/builderio.svg)



### [Builder.io](https://docs.astro.build/en/guides/cms/builderio/)

- ![](https://docs.astro.build/logos/buttercms.svg)



### [ButterCMS](https://docs.astro.build/en/guides/cms/buttercms/)

- ![](https://docs.astro.build/logos/caisy.svg)



### [Caisy](https://docs.astro.build/en/guides/cms/caisy/)

- ![](https://docs.astro.build/logos/cloudcannon.svg)



### [CloudCannon](https://docs.astro.build/en/guides/cms/cloudcannon/)

- ![](https://docs.astro.build/logos/contentful.svg)



### [Contentful](https://docs.astro.build/en/guides/cms/contentful/)

- ![](https://docs.astro.build/logos/cosmic.svg)



### [Cosmic](https://docs.astro.build/en/guides/cms/cosmic/)

- ![](https://docs.astro.build/logos/craft-cms.svg)



### [Craft CMS](https://docs.astro.build/en/guides/cms/craft-cms/)

- ![](https://docs.astro.build/logos/crystallize.svg)



### [Crystallize](https://docs.astro.build/en/guides/cms/crystallize/)

- ![](https://docs.astro.build/logos/datocms.svg)



### [DatoCMS](https://docs.astro.build/en/guides/cms/datocms/)

- ![](https://docs.astro.build/logos/decap-cms.svg)



### [Decap CMS](https://docs.astro.build/en/guides/cms/decap-cms/)

- ![](https://docs.astro.build/logos/directus.svg)



### [Directus](https://docs.astro.build/en/guides/cms/directus/)

- ![](https://docs.astro.build/logos/drupal.svg)



### [Drupal](https://docs.astro.build/en/guides/cms/drupal/)

- ![](https://docs.astro.build/logos/flotiq.svg)



### [Flotiq](https://docs.astro.build/en/guides/cms/flotiq/)

- ![](https://docs.astro.build/logos/frontmatter-cms.svg)



### [Front Matter CMS](https://docs.astro.build/en/guides/cms/frontmatter-cms/)

- ![](https://docs.astro.build/logos/ghost.png)



### [Ghost](https://docs.astro.build/en/guides/cms/ghost/)

- ![](https://docs.astro.build/logos/gitcms.svg)



### [GitCMS](https://docs.astro.build/en/guides/cms/gitcms/)

- ![](https://docs.astro.build/logos/hashnode.png)



### [Hashnode](https://docs.astro.build/en/guides/cms/hashnode/)

- ![](https://docs.astro.build/logos/hygraph.svg)



### [Hygraph](https://docs.astro.build/en/guides/cms/hygraph/)

- ![](https://docs.astro.build/logos/keystatic.svg)



### [Keystatic](https://docs.astro.build/en/guides/cms/keystatic/)

- ![](https://docs.astro.build/logos/keystonejs.svg)



### [KeystoneJS](https://docs.astro.build/en/guides/cms/keystonejs/)

- ![](https://docs.astro.build/logos/kontent-ai.svg)



### [Kontent.ai](https://docs.astro.build/en/guides/cms/kontent-ai/)

- ![](https://docs.astro.build/logos/microcms.svg)



### [microCMS](https://docs.astro.build/en/guides/cms/microcms/)

- ![](https://docs.astro.build/logos/payload.svg)



### [Payload CMS](https://docs.astro.build/en/guides/cms/payload/)

- ![](https://docs.astro.build/logos/preprcms.svg)



### [Prepr CMS](https://docs.astro.build/en/guides/cms/preprcms/)

- ![](https://docs.astro.build/logos/prismic.svg)



### [Prismic](https://docs.astro.build/en/guides/cms/prismic/)

- ![](https://docs.astro.build/logos/sanity.svg)



### [Sanity](https://docs.astro.build/en/guides/cms/sanity/)

- ![](https://docs.astro.build/logos/sitecore.svg)



### [Sitecore XM](https://docs.astro.build/en/guides/cms/sitecore/)

- ![](https://docs.astro.build/logos/spinal.svg)



### [Spinal](https://docs.astro.build/en/guides/cms/spinal/)

- ![](https://docs.astro.build/logos/statamic.svg)



### [Statamic](https://docs.astro.build/en/guides/cms/statamic/)

- ![](https://docs.astro.build/logos/storyblok.svg)



### [Storyblok](https://docs.astro.build/en/guides/cms/storyblok/)

- ![](https://docs.astro.build/logos/strapi.svg)



### [Strapi](https://docs.astro.build/en/guides/cms/strapi/)

- ![](https://docs.astro.build/logos/studiocms.svg)



### [StudioCMS](https://docs.astro.build/en/guides/cms/studiocms/)

- ![](https://docs.astro.build/logos/tina-cms.svg)



### [Tina CMS](https://docs.astro.build/en/guides/cms/tina-cms/)

- ![](https://docs.astro.build/logos/umbraco.svg)



### [Umbraco](https://docs.astro.build/en/guides/cms/umbraco/)

- ![](https://docs.astro.build/logos/wordpress.svg)



### [WordPress](https://docs.astro.build/en/guides/cms/wordpress/)


Recipes

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fcms%2Fsitecore%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=70154677)

## Astro DB Guide
[Skip to content](https://docs.astro.build/en/guides/astro-db/#_top)

# Astro DB

Astro DB is a fully-managed SQL database designed for the Astro ecosystem. Develop locally in Astro and deploy to any libSQL-compatible database.

Astro DB is a complete solution to configuring, developing, and querying your data. A local database is created in `.astro/content.db` whenever you run `astro dev` to manage your data without the need for Docker or a network connection.

## Installation

[Section titled Installation](https://docs.astro.build/en/guides/astro-db/#installation)

Install the [`@astrojs/db` integration](https://docs.astro.build/en/guides/integrations-guide/db/) using the built-in `astro add` command:

- [npm](https://docs.astro.build/en/guides/astro-db/#tab-panel-1767)
- [pnpm](https://docs.astro.build/en/guides/astro-db/#tab-panel-1768)
- [Yarn](https://docs.astro.build/en/guides/astro-db/#tab-panel-1769)

```

npx astro add db
```

```

pnpm astro add db
```

```

yarn astro add db
```

## Define your database

[Section titled Define your database](https://docs.astro.build/en/guides/astro-db/#define-your-database)

Installing `@astrojs/db` with the `astro add` command will automatically create a `db/config.ts` file in your project where you will define your database tables:

```

import { defineDb } from 'astro:db';

export default defineDb({

  tables: { },

})
```

### Tables

[Section titled Tables](https://docs.astro.build/en/guides/astro-db/#tables)

Data in Astro DB is stored using SQL tables. Tables structure your data into rows and columns, where columns enforce the type of each row value.

Define your tables in your `db/config.ts` file by providing the structure of the data in your existing libSQL database, or the data you will collect in a new database. This will allow Astro to generate a TypeScript interface to query that table from your project. The result is full TypeScript support when you access your data with property autocompletion and type-checking.

To configure a database table, import and use the `defineTable()` and `column` utilities from `astro:db`. Then, define a name (case-sensitive) for your table and the type of data in each column.

This example configures a `Comment` table with required text columns for `author` and `body`. Then, makes it available to your project through the `defineDb()` export.

```

import { defineDb, defineTable, column } from 'astro:db';

const Comment = defineTable({

  columns: {

    author: column.text(),

    body: column.text(),

  }

})

export default defineDb({

  tables: { Comment },

})
```

See the [table configuration reference](https://docs.astro.build/en/guides/integrations-guide/db/#table-configuration-reference) for a complete reference of table options.

### Columns

[Section titled Columns](https://docs.astro.build/en/guides/astro-db/#columns)

Astro DB supports the following column types:

```

import { defineTable, column } from 'astro:db';

const Comment = defineTable({

  columns: {

    // A string of text.

    author: column.text(),

    // A whole integer value.

    likes: column.number(),

    // A true or false value.

    flagged: column.boolean(),

    // Date/time values queried as JavaScript Date objects.

    published: column.date(),

    // An untyped JSON object.

    metadata: column.json(),

  }

});
```

See the [table columns reference](https://docs.astro.build/en/guides/integrations-guide/db/#table-configuration-reference) for more details.

### Table References

[Section titled Table References](https://docs.astro.build/en/guides/astro-db/#table-references)

Relationships between tables are a common pattern in database design. For example, a `Blog` table may be closely related to other tables of `Comment`, `Author`, and `Category`.

You can define these relations between tables and save them into your database schema using **reference columns**. To establish a relationship, you will need:

- An **identifier column** on the referenced table. This is usually an `id` column with the `primaryKey` property.
- A column on the base table to **store the referenced `id`**. This uses the `references` property to establish a relationship.

This example shows a `Comment` table’s `authorId` column referencing an `Author` table’s `id` column.

```

const Author = defineTable({

  columns: {

    id: column.number({ primaryKey: true }),

    name: column.text(),

  }

});

const Comment = defineTable({

  columns: {

    authorId: column.number({ references: () => Author.columns.id }),

    body: column.text(),

  }

});
```

## Seed your database for development

[Section titled Seed your database for development](https://docs.astro.build/en/guides/astro-db/#seed-your-database-for-development)

In development, Astro will use your DB config to generate local types according to your schemas. These will be generated fresh from your seed file each time the dev server is started, and will allow you to query and work with the shape of your data with type safety and autocompletion.

You will not have access to production data during development unless you [connect to a remote database](https://docs.astro.build/en/guides/astro-db/#connecting-to-remote-databases) during development. This protects your data while allowing you to test and develop with a working database with type-safety.

To seed development data for testing and debugging into your Astro project, create a `db/seed.ts` file. Import both the `db` object and your tables defined in `astro:db`. `insert` some initial data into each table. This development data should match the form of both your database schema and production data.

The following example defines two rows of development data for a `Comment` table, and an `Author` table:

```

import { db, Comment, Author } from 'astro:db';

export default async function() {

  await db.insert(Author).values([\
\
    { id: 1, name: "Kasim" },\
\
    { id: 2, name: "Mina" },\
\
  ]);

  await db.insert(Comment).values([\
\
    { authorId: 1, body: 'Hope you like Astro DB!' },\
\
    { authorId: 2, body: 'Enjoy!'},\
\
  ])

}
```

Your development server will automatically restart your database whenever this file changes, regenerating your types and seeding this development data from `seed.ts` fresh each time.

## Connect a libSQL database for production

[Section titled Connect a libSQL database for production](https://docs.astro.build/en/guides/astro-db/#connect-a-libsql-database-for-production)

Astro DB can connect to any local libSQL database or to any server that exposes the libSQL remote protocol, whether managed or self-hosted.

To connect Astro DB to a libSQL database, set the following environment variables obtained from your database provider:

- `ASTRO_DB_REMOTE_URL`: the connection URL to the location of your local or remote libSQL DB. This may include [URL configuration options](https://docs.astro.build/en/guides/astro-db/#remote-url-configuration-options) such as sync and encryption as parameters.
- `ASTRO_DB_APP_TOKEN`: the auth token to your libSQL server. This is required for remote databases, and not needed for [local DBs like files or in-memory](https://docs.astro.build/en/guides/astro-db/#url-scheme-and-host) databases

Depending on your service, you may have access to a CLI or web UI to retrieve these values. The following section will demonstrate connecting to Turso and setting these values as an example, but you are free to use any provider.

### Getting started with Turso

[Section titled Getting started with Turso](https://docs.astro.build/en/guides/astro-db/#getting-started-with-turso)

Turso is the company behind [libSQL](https://github.com/tursodatabase/libsql), the open-source fork of SQLite that powers Astro DB. They provide a fully managed libSQL database platform and are fully compatible with Astro.

The steps below will guide you through the process of installing the Turso CLI, logging in (or signing up), creating a new database, getting the required environmental variables, and pushing the schema to the remote database.

1. Install the [Turso CLI](https://docs.turso.tech/cli/installation).

2. [Log in or sign up](https://docs.turso.tech/cli/authentication) to Turso.

3. Create a new database. In this example the database name is `andromeda`.



```


turso db create andromeda
```

4. Run the `show` command to see information about the newly created database:



```


turso db show andromeda
```









Copy the `URL` value and set it as the value for `ASTRO_DB_REMOTE_URL`.



```


ASTRO_DB_REMOTE_URL=libsql://andromeda-houston.turso.io
```

5. Create a new token to authenticate requests to the database:



```


turso db tokens create andromeda
```









Copy the output of the command and set it as the value for `ASTRO_DB_APP_TOKEN`.



```


ASTRO_DB_REMOTE_URL=libsql://andromeda-houston.turso.io

ASTRO_DB_APP_TOKEN=eyJhbGciOiJF...3ahJpTkKDw
```

6. Push your DB schema and metadata to the new Turso database.



```


astro db push --remote
```

7. Congratulations, now you have a database connected! Give yourself a break. 👾



```


turso relax
```


To explore more features of Turso, check out the [Turso docs](https://docs.turso.tech/).

### Connecting to remote databases

[Section titled Connecting to remote databases](https://docs.astro.build/en/guides/astro-db/#connecting-to-remote-databases)

Astro DB allows you to connect to both local and remote databases. By default, Astro uses a local database file for `dev` and `build` commands, recreating tables and inserting development seed data each time.

To connect to a hosted remote database, use the `--remote` flag. This flag enables both readable and writable access to your remote database, allowing you to [accept and persist user data](https://docs.astro.build/en/guides/astro-db/#insert) in production environments.

Configure your build command to use the `--remote` flag:

```

{

  "scripts": {

    "build": "astro build --remote"

  }

}
```

You can also use the flag directly in the command line:

```

# Build with a remote connection

astro build --remote

# Develop with a remote connection

astro dev --remote
```

The `--remote` flag uses the connection to the remote DB both locally during the build and on the server. Ensure you set the necessary environment variables in both your local development environment and your deployment platform.

When deploying your Astro DB project, make sure your deployment platform’s build command is set to `npm run build` (or the equivalent for your package manager) to utilize the `--remote` flag configured in your `package.json`.

### Remote URL configuration options

[Section titled Remote URL configuration options](https://docs.astro.build/en/guides/astro-db/#remote-url-configuration-options)

The `ASTRO_DB_REMOTE_URL` environment variable configures the location of your database as well as other options like sync and encryption.

#### URL scheme and host

[Section titled URL scheme and host](https://docs.astro.build/en/guides/astro-db/#url-scheme-and-host)

libSQL supports both HTTP and WebSockets as the transport protocol for a remote server. It also supports using a local file or an in-memory DB. Those can be configured using the following URL schemes in the connection URL:

- `memory:` will use an in-memory DB. The host must be empty in this case.
- `file:` will use a local file. The host is the path to the file ( `file:path/to/file.db`).
- `libsql:` will use a remote server through the protocol preferred by the library (this might be different across versions). The host is the address of the server ( `libsql://your.server.io`).
- `http:` will use a remote server through HTTP. `https:` can be used to enable a secure connection. The host is the same as for `libsql:`.
- `ws:` will use a remote server through WebSockets. `wss:` can be used to enable a secure connection. The host is the same as for `libsql:`.

Details of the libSQL connection (e.g. encryption key, replication, sync interval) can be configured as query parameters in the remote connection URL.

For example, to have an encrypted local file work as an embedded replica to a libSQL server, you can set the following environment variables:

```

ASTRO_DB_REMOTE_URL=file://local-copy.db?encryptionKey=your-encryption-key&syncInterval=60&syncUrl=libsql%3A%2F%2Fyour.server.io

ASTRO_DB_APP_TOKEN=token-to-your-remote-url
```

#### `encryptionKey`

[Section titled encryptionKey](https://docs.astro.build/en/guides/astro-db/#encryptionkey)

libSQL has native support for encrypted databases. Passing this search parameter will enable encryption using the given key:

```

ASTRO_DB_REMOTE_URL=file:path/to/file.db?encryptionKey=your-encryption-key
```

#### `syncUrl`

[Section titled syncUrl](https://docs.astro.build/en/guides/astro-db/#syncurl)

Embedded replicas are a feature of libSQL clients that creates a full synchronized copy of your database on a local file or in memory for ultra-fast reads. Writes are sent to a remote database defined on the `syncUrl` and synchronized with the local copy.

Use this property to pass a separate connection URL to turn the database into an embedded replica of another database. This should only be used with the schemes `file:` and `memory:`. The parameter must be URL encoded.

For example, to have an in-memory embedded replica of a database on `libsql://your.server.io`, you can set the connection URL as such:

```

ASTRO_DB_REMOTE_URL=memory:?syncUrl=libsql%3A%2F%2Fyour.server.io
```

#### `syncInterval`

[Section titled syncInterval](https://docs.astro.build/en/guides/astro-db/#syncinterval)

Interval between embedded replica synchronizations in seconds. By default it only synchronizes on startup and after writes.

This property is only used when `syncUrl` is also set. For example, to set an in-memory embedded replica to synchronize every minute set the following environment variable:

```

ASTRO_DB_REMOTE_URL=memory:?syncUrl=libsql%3A%2F%2Fyour.server.io&syncInterval=60
```

## Query your database

[Section titled Query your database](https://docs.astro.build/en/guides/astro-db/#query-your-database)

You can query your database from any [Astro page](https://docs.astro.build/en/basics/astro-pages/#astro-pages), [endpoint](https://docs.astro.build/en/guides/endpoints/), or [action](https://docs.astro.build/en/guides/actions/) in your project using the provided `db` ORM and query builder.

### Drizzle ORM

[Section titled Drizzle ORM](https://docs.astro.build/en/guides/astro-db/#drizzle-orm)

```

import { db } from 'astro:db';
```

Astro DB includes a built-in [Drizzle ORM](https://orm.drizzle.team/) client. There is no setup or manual configuration required to use the client. The Astro DB `db` client is automatically configured to communicate with your database (local or remote) when you run Astro. It uses your exact database schema definition for type-safe SQL queries with TypeScript errors when you reference a column or table that doesn’t exist.

### Select

[Section titled Select](https://docs.astro.build/en/guides/astro-db/#select)

The following example selects all rows of a `Comment` table. This returns the complete array of seeded development data from `db/seed.ts` which is then available for use in your page template:

```

---

import { db, Comment } from 'astro:db';

const comments = await db.select().from(Comment);

---

<h2>Comments</h2>

{

  comments.map(({ author, body }) => (

    <article>

      <p>Author: {author}</p>

      <p>{body}</p>

    </article>

  ))

}
```

See the [Drizzle `select()` API reference](https://orm.drizzle.team/docs/select) for a complete overview.

### Insert

[Section titled Insert](https://docs.astro.build/en/guides/astro-db/#insert)

To accept user input, such as handling form requests and inserting data into your remote hosted database, configure your Astro project for [on-demand rendering](https://docs.astro.build/en/guides/on-demand-rendering/) and [add an adapter](https://docs.astro.build/en/guides/on-demand-rendering/#add-an-adapter) for your deployment environment.

This example inserts a row into a `Comment` table based on a parsed form POST request:

```

---

import { db, Comment } from 'astro:db';

if (Astro.request.method === 'POST') {

  // Parse form data

  const formData = await Astro.request.formData();

  const author = formData.get('author');

  const body = formData.get('body');

  if (typeof author === 'string' && typeof body === 'string') {

    // Insert form data into the Comment table

    await db.insert(Comment).values({ author, body });

  }

}

// Render the new list of comments on each request

const comments = await db.select().from(Comment);

---

<form method="POST" style="display: grid">

  <label for="author">Author</label>

  <input id="author" name="author" />

  <label for="body">Body</label>

  <textarea id="body" name="body"></textarea>

  <button type="submit">Submit</button>

</form>

<!-- Render `comments` -->
```

You can also use [Astro actions](https://docs.astro.build/en/guides/actions/) to insert data into an Astro DB table. The following example inserts a row into a `Comment` table using an action:

```

import { db, Comment } from 'astro:db';

import { defineAction } from 'astro:actions';

import { z } from 'astro:schema';

export const server = {

  addComment: defineAction({

    // Actions include type safety with Zod, removing the need

    // to check if typeof {value} === 'string' in your pages

    input: z.object({

      author: z.string(),

      body: z.string(),

    }),

    handler: async (input) => {

      const updatedComments = await db

        .insert(Comment)

        .values(input)

        .returning(); // Return the updated comments

      return updatedComments;

    },

  }),

};
```

See the [Drizzle `insert()` API reference](https://orm.drizzle.team/docs/insert) for a complete overview.

### Delete

[Section titled Delete](https://docs.astro.build/en/guides/astro-db/#delete)

You can also query your database from an API endpoint. This example deletes a row from a `Comment` table by the `id` parameter:

```

import type { APIRoute } from "astro";

import { db, Comment, eq } from 'astro:db';

export const DELETE: APIRoute = async (ctx) => {

  await db.delete(Comment).where(eq(Comment.id, ctx.params.id ));

  return new Response(null, { status: 204 });

}
```

See the [Drizzle `delete()` API reference](https://orm.drizzle.team/docs/delete) for a complete overview.

### Filtering

[Section titled Filtering](https://docs.astro.build/en/guides/astro-db/#filtering)

To query for table results by a specific property, use [Drizzle options for partial selects](https://orm.drizzle.team/docs/select#partial-select). For example, add [a `.where()` call](https://orm.drizzle.team/docs/select#filtering) to your `select()` query and pass the comparison you want to make.

The following example queries for all rows in a `Comment` table that contain the phrase “Astro DB.” Use [the `like()` operator](https://orm.drizzle.team/docs/operators#like) to check if a phrase is present within the `body`:

```

---

import { db, Comment, like } from 'astro:db';

const comments = await db.select().from(Comment).where(

    like(Comment.body, '%Astro DB%')

);

---
```

### Drizzle utilities

[Section titled Drizzle utilities](https://docs.astro.build/en/guides/astro-db/#drizzle-utilities)

All Drizzle utilities for building queries are exposed from the `astro:db` module. This includes:

- [Filter operators](https://orm.drizzle.team/docs/operators) like `eq()` and `gt()`
- [Aggregation helpers](https://orm.drizzle.team/docs/select#aggregations-helpers) like `count()`
- [The `sql` helper](https://orm.drizzle.team/docs/sql) for writing raw SQL queries

```

import { eq, gt, count, sql } from 'astro:db';
```

### Relationships

[Section titled Relationships](https://docs.astro.build/en/guides/astro-db/#relationships)

You can query related data from multiple tables using a SQL join. To create a join query, extend your `db.select()` statement with a join operator. Each function accepts a table to join with and a condition to match rows between the two tables.

This example uses an `innerJoin()` function to join `Comment` authors with their related `Author` information based on the `authorId` column. This returns an array of objects with each `Author` and `Comment` row as top-level properties:

```

---

import { db, eq, Comment, Author } from 'astro:db';

const comments = await db.select()

  .from(Comment)

  .innerJoin(Author, eq(Comment.authorId, Author.id));

---

<h2>Comments</h2>

{

  comments.map(({ Author, Comment }) => (

    <article>

      <p>Author: {Author.name}</p>

      <p>{Comment.body}</p>

    </article>

  ))

}
```

See the [Drizzle join reference](https://orm.drizzle.team/docs/joins#join-types) for all available join operators and config options.

### Batch Transactions

[Section titled Batch Transactions](https://docs.astro.build/en/guides/astro-db/#batch-transactions)

All remote database queries are made as a network request. You may need to “batch” queries together into a single transaction when making a large number of queries, or to have automatic rollbacks if any query fails.

This example seeds multiple rows in a single request using the `db.batch()` method:

```

import { db, Author, Comment } from 'astro:db';

export default async function () {

  const queries = [];

  // Seed 100 sample comments into your remote database

  // with a single network request.

  for (let i = 0; i < 100; i++) {

    queries.push(db.insert(Comment).values({ body: `Test comment ${i}` }));

  }

  await db.batch(queries);

}
```

See the [Drizzle `db.batch()`](https://orm.drizzle.team/docs/batch-api) docs for more details.

## Pushing changes to your database

[Section titled Pushing changes to your database](https://docs.astro.build/en/guides/astro-db/#pushing-changes-to-your-database)

You can push changes made during development to your database.

### Pushing table schemas

[Section titled Pushing table schemas](https://docs.astro.build/en/guides/astro-db/#pushing-table-schemas)

Your table schema may change over time as your project grows. You can safely test configuration changes locally and push to your remote database when you deploy.

You can push your local schema changes to your remote database via the CLI using the `astro db push --remote` command:

- [npm](https://docs.astro.build/en/guides/astro-db/#tab-panel-1770)
- [pnpm](https://docs.astro.build/en/guides/astro-db/#tab-panel-1771)
- [Yarn](https://docs.astro.build/en/guides/astro-db/#tab-panel-1772)

```

npm run astro db push --remote
```

```

pnpm astro db push --remote
```

```

yarn astro db push --remote
```

This command will verify that your local changes can be made without data loss and, if necessary, suggest how to safely make changes to your schema in order to resolve conflicts.

#### Pushing breaking schema changes

[Section titled Pushing breaking schema changes](https://docs.astro.build/en/guides/astro-db/#pushing-breaking-schema-changes)

If you must change your table schema in a way that is incompatible with your existing data hosted on your remote database, you will need to reset your production database.

To push a table schema update that includes a breaking change, add the `--force-reset` flag to reset all production data:

- [npm](https://docs.astro.build/en/guides/astro-db/#tab-panel-1773)
- [pnpm](https://docs.astro.build/en/guides/astro-db/#tab-panel-1774)
- [Yarn](https://docs.astro.build/en/guides/astro-db/#tab-panel-1775)

```

npm run astro db push --remote --force-reset
```

```

pnpm astro db push --remote --force-reset
```

```

yarn astro db push --remote --force-reset
```

### Renaming tables

[Section titled Renaming tables](https://docs.astro.build/en/guides/astro-db/#renaming-tables)

It is possible to rename a table after pushing your schema to your remote database.

If you **do not have any important production data**, then you can [reset your database](https://docs.astro.build/en/guides/astro-db/#pushing-breaking-schema-changes) using the `--force-reset` flag. This flag will drop all of the tables in the database and create new ones so that it matches your current schema exactly.

To rename a table while preserving your production data, you must perform a series of non-breaking changes to push your local schema to your remote database safely.

The following example renames a table from `Comment` to `Feedback`:

1. In your database config file, add the `deprecated: true` property to the table you want to rename:



```


const Comment = defineTable({

     deprecated: true,

     columns: {

       author: column.text(),

       body: column.text(),

     }

});
```

2. Add a new table schema (matching the existing table’s properties exactly) with the new name:



```


const Comment = defineTable({

     deprecated: true,

     columns: {

       author: column.text(),

       body: column.text(),

     }

});

const Feedback = defineTable({

     columns: {

       author: column.text(),

       body: column.text(),

     }

});
```

3. [Push to your remote database](https://docs.astro.build/en/guides/astro-db/#pushing-table-schemas) with `astro db push --remote`. This will add the new table and mark the old as deprecated.

4. Update any of your local project code to use the new table instead of the old table. You might need to migrate data to the new table as well.

5. Once you are confident that the old table is no longer used in your project, you can remove the schema from your `config.ts`:



```


const Comment = defineTable({

     deprecated: true,

     columns: {

       author: column.text(),

       body: column.text(),

     }

});




const Feedback = defineTable({

     columns: {

       author: column.text(),

       body: column.text(),

     }

});
```

6. Push to your remote database again with `astro db push --remote`. The old table will be dropped, leaving only the new, renamed table.


### Pushing table data

[Section titled Pushing table data](https://docs.astro.build/en/guides/astro-db/#pushing-table-data)

You may need to push data to your remote database for seeding or data migrations. You can author a `.ts` file with the `astro:db` module to write type-safe queries. Then, execute the file against your remote database using the command `astro db execute <file-path> --remote`:

The following Comments can be seeded using the command `astro db execute db/seed.ts --remote`:

```

import { Comment } from 'astro:db';

export default async function () {

  await db.insert(Comment).values([\
\
    { authorId: 1, body: 'Hope you like Astro DB!' },\
\
    { authorId: 2, body: 'Enjoy!' },\
\
  ])

}
```

See the [CLI reference](https://docs.astro.build/en/guides/integrations-guide/db/#astro-db-cli-reference) for a complete list of commands.

## Building Astro DB integrations

[Section titled Building Astro DB integrations](https://docs.astro.build/en/guides/astro-db/#building-astro-db-integrations)

[Astro integrations](https://docs.astro.build/en/reference/integrations-reference/) can extend user projects with additional Astro DB tables and seed data.

Use the `extendDb()` method in the `astro:db:setup` hook to register additional Astro DB config and seed files.
The `defineDbIntegration()` helper provides TypeScript support and auto-complete for the `astro:db:setup` hook.

```

import { defineDbIntegration } from '@astrojs/db/utils';

export default function MyIntegration() {

  return defineDbIntegration({

    name: 'my-astro-db-powered-integration',

    hooks: {

      'astro:db:setup': ({ extendDb }) => {

        extendDb({

          configEntrypoint: '@astronaut/my-package/config',

          seedEntrypoint: '@astronaut/my-package/seed',

        });

      },

      // Other integration hooks...

    },

  });

}
```

Integration [config](https://docs.astro.build/en/guides/astro-db/#define-your-database) and [seed](https://docs.astro.build/en/guides/astro-db/#seed-your-database-for-development) files follow the same format as their user-defined equivalents.

### Type safe operations in integrations

[Section titled Type safe operations in integrations](https://docs.astro.build/en/guides/astro-db/#type-safe-operations-in-integrations)

While working on integrations, you may not be able to benefit from Astro’s generated table types exported from `astro:db`.
For full type safety, use the `asDrizzleTable()` utility to create a table reference object you can use for database operations.

For example, given an integration setting up the following `Pets` database table:

```

import { defineDb, defineTable, column } from 'astro:db';

export const Pets = defineTable({

  columns: {

    name: column.text(),

    species: column.text(),

  },

});

export default defineDb({ tables: { Pets } });
```

The seed file can import `Pets` and use `asDrizzleTable()` to insert rows into your table with type checking:

```

import { asDrizzleTable } from '@astrojs/db/utils';

import { db } from 'astro:db';

import { Pets } from './config';

export default async function() {

  const typeSafePets = asDrizzleTable('Pets', Pets);

  await db.insert(typeSafePets).values([\
\
    { name: 'Palomita', species: 'cat' },\
\
    { name: 'Pan', species: 'dog' },\
\
  ]);

}
```

The value returned by `asDrizzleTable('Pets', Pets)` is equivalent to `import { Pets } from 'astro:db'`, but is available even when Astro’s type generation can’t run.
You can use it in any integration code that needs to query or insert into the database.

## Migrate from Astro Studio to Turso

[Section titled Migrate from Astro Studio to Turso](https://docs.astro.build/en/guides/astro-db/#migrate-from-astro-studio-to-turso)

1. In the [Studio dashboard](https://studio.astro.build/), navigate to the project you wish to migrate. In the settings tab, use the “Export Database” button to download a dump of your database.
2. Follow the official instructions to [install the Turso CLI](https://docs.turso.tech/cli/installation) and [sign up or log in](https://docs.turso.tech/cli/authentication) to your Turso account.
3. Create a new database on Turso using the `turso db create` command.



```


turso db create [database-name]
```

4. Fetch the database URL using the Turso CLI, and use it as the environment variable `ASTRO_DB_REMOTE_URL`.



```


turso db show [database-name]
```











```


ASTRO_DB_REMOTE_URL=[your-database-url]
```

5. Create a token to access your database, and use it as the environment variable `ASTRO_DB_APP_TOKEN`.



```


turso db tokens create [database-name]
```











```


ASTRO_DB_APP_TOKEN=[your-app-token]
```

6. Push your DB schema and metadata to the new Turso database.



```


astro db push --remote
```

7. Import the database dump from step 1 into your new Turso DB.



```


turso db shell [database-name] < ./path/to/dump.sql
```

8. Once you have confirmed your project connects to the new database, you can safely delete the project from Astro Studio.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)

## Astro View Transitions
[Skip to content](https://docs.astro.build/en/guides/view-transitions/#_top)

# View transitions

Astro supports view transitions with just a few lines of code. View transitions update your page content without the browser’s normal, full-page navigation refresh and provide seamless animations between pages. Where [browser support for the View Transition API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API#browser_compatibility) is lacking, Astro allows you to [control fallback strategies](https://docs.astro.build/en/guides/view-transitions/#fallback-control) for the best possible experience for all visitors.

Astro provides a `<ClientRouter />` routing component that can be added to a single page’s `<head>` to control page transitions as you navigate away to another page. It provides a lightweight client-side router that [intercepts navigation](https://docs.astro.build/en/guides/view-transitions/#client-side-navigation-process) and allows you to customize the transition between pages.

Add this component to a reusable `.astro` component, such as a common head or layout, for [animated page transitions across your entire site (SPA mode)](https://docs.astro.build/en/guides/view-transitions/#full-site-view-transitions-spa-mode).

Astro’s view transitions support is powered by the new [View Transitions](https://developer.chrome.com/docs/web-platform/view-transitions/) browser API and also includes:

- A few [built-in animation options](https://docs.astro.build/en/guides/view-transitions/#built-in-animation-directives), such as `fade`, `slide`, and `none`.
- Support for both forwards and backwards navigation animations.
- The ability to fully [customize all aspects of transition animation](https://docs.astro.build/en/guides/view-transitions/#customizing-animations), and build your own animations.
- The option to [prevent client-side navigation for non-page links](https://docs.astro.build/en/guides/view-transitions/#preventing-client-side-navigation).
- [Control over fallback behavior](https://docs.astro.build/en/guides/view-transitions/#fallback-control) for browsers that do not yet support the View Transition APIs.
- Automatic support for [`prefers-reduced-motion`](https://docs.astro.build/en/guides/view-transitions/#prefers-reduced-motion).

## Adding View Transitions to a Page

[Section titled Adding View Transitions to a Page](https://docs.astro.build/en/guides/view-transitions/#adding-view-transitions-to-a-page)

Opt in to using view transitions on individual pages by importing and adding the `<ClientRouter />` routing component to `<head>` on every desired page.

```

---

import { ClientRouter } from "astro:transitions";

---

<html lang="en">

  <head>

    <title>My Homepage</title>

    <ClientRouter />

  </head>

  <body>

    <h1>Welcome to my website!</h1>

  </body>

</html>
```

## Full site view transitions (SPA mode)

[Section titled Full site view transitions (SPA mode)](https://docs.astro.build/en/guides/view-transitions/#full-site-view-transitions-spa-mode)

Import and add the `<ClientRouter />` component to your common `<head>` or shared layout component. Astro will create default page animations based on the similarities between the old and new page, and will also provide fallback behavior for unsupported browsers.

The example below shows adding Astro’s default page navigation animations site-wide, including the default fallback control option for non-supporting browsers, by importing and adding this component to a `<CommonHead />` Astro component:

```

---

import { ClientRouter } from "astro:transitions";

---

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

<meta name="generator" content={Astro.generator} />

<!-- Primary Meta Tags -->

<title>{title}</title>

<meta name="title" content={title} />

<meta name="description" content={description} />

<ClientRouter />
```

No other configuration is necessary to enable Astro’s default client-side navigation!

Use [transition directives](https://docs.astro.build/en/guides/view-transitions/#transition-directives) or [override default client-side navigation](https://docs.astro.build/en/guides/view-transitions/#preventing-client-side-navigation) on individual elements for finer control.

## Transition Directives

[Section titled Transition Directives](https://docs.astro.build/en/guides/view-transitions/#transition-directives)

Astro will automatically assign corresponding elements found in both the old page and the new page a shared, unique `view-transition-name`. This pair of matching elements is inferred by both the type of element and its location in the DOM.

Use optional `transition:*` directives on page elements in your `.astro` components for finer control over the page transition behaviour during navigation.

- `transition:name`: Allows you to override Astro’s default element matching for old/new content animation and [specify a transition name](https://docs.astro.build/en/guides/view-transitions/#naming-a-transition) to associate a pair of DOM elements.
- `transition:animate`: Allows you to override Astro’s default animation while replacing the old element with the new one by specifying an animation type. Use Astro’s [built-in animation directives](https://docs.astro.build/en/guides/view-transitions/#built-in-animation-directives) or [create custom transition animations](https://docs.astro.build/en/guides/view-transitions/#customizing-animations).
- `transition:persist`: Allows you to override Astro’s default replacing old elements for new ones and instead [persist components and HTML elements](https://docs.astro.build/en/guides/view-transitions/#maintaining-state) when navigating to another page.

### Naming a transition

[Section titled Naming a transition](https://docs.astro.build/en/guides/view-transitions/#naming-a-transition)

In some cases, you may want or need to identify the corresponding view transition elements yourself. You can specify a name for a pair of elements using the `transition:name` directive.

```

<aside transition:name="hero">
```

```

<aside transition:name="hero">
```

Note that the provided `transition:name` value can only be used once on each page. Set this manually when Astro can’t infer a proper name itself, or for more fine control over matching elements.

### Maintaining State

[Section titled Maintaining State](https://docs.astro.build/en/guides/view-transitions/#maintaining-state)

**Added in:** `astro@2.10.0`

You can persist components and HTML elements (instead of replacing them) across page navigations using the `transition:persist` directive.

For example, the following `<video>` will continue to play as you navigate to another page that contains the same video element. This works for both forwards and backwards navigation.

```

<video controls muted autoplay transition:persist>

  <source

    src="https://ia804502.us.archive.org/33/items/GoldenGa1939_3/GoldenGa1939_3_512kb.mp4"

    type="video/mp4"

  />

</video>
```

You can also place the directive on an [Astro island](https://docs.astro.build/en/concepts/islands/) (a UI framework component with a [`client:` directive](https://docs.astro.build/en/reference/directives-reference/#client-directives)). If that component exists on the next page, the island from the old page **with its current state** will continue to be displayed, instead of replacing it with the island from the new page.

In the example below, the component’s internal state of the count will not be reset when navigating back and forth across pages that contain the `<Counter />` component with the `transition:persist` attribute.

```

<Counter client:load transition:persist initialCount={5} />
```

You can also [manually identify corresponding elements](https://docs.astro.build/en/guides/view-transitions/#naming-a-transition) if the island/element is in a different component between the two pages.

```

<video

  controls

  muted

  autoplay

  transition:name="media-player"

  transition:persist

/>
```

```

<MyVideo

  controls

  muted

  autoplay

  transition:name="media-player"

  transition:persist

/>
```

As a convenient shorthand, `transition:persist` can alternatively take a transition name as a value.

```

<video controls muted autoplay transition:persist="media-player">
```

#### `transition:persist-props`

[Section titled transition:persist-props](https://docs.astro.build/en/guides/view-transitions/#transitionpersist-props)

**Added in:** `astro@4.5.0`

This allows you to control whether or not an island’s props should be persisted upon navigation.

By default, when you add `transition:persist` to an island, the state is retained upon navigation, but your component will re-render with new props. This is useful, for example, when a component receives page-specific props such as the current page’s `title`.

You can override this behavior by setting `transition:persist-props` in addition to `transition:persist`. Adding this directive will keep an island’s existing props (not re-render with new values) in addition to maintaining its existing state.

### Built-in Animation Directives

[Section titled Built-in Animation Directives](https://docs.astro.build/en/guides/view-transitions/#built-in-animation-directives)

Astro comes with a few built-in animations to override the default `fade` transition. Add the `transition:animate` directive to individual elements to customize the behavior of specific transitions.

- `fade` (default): An opinionated crossfade animation. The old content fades out and the new content fades in.
- `initial`: Opt out of Astro’s opinionated crossfade animation and use the browser’s default styling.
- `slide`: An animation where the old content slides out to the left and new content slides in from the right. On backwards navigation, the animations are the opposite.
- `none`: Disable the browser’s default animations. Use on a page’s `<html>` element to disable the default fade for every element on the page.

Combine directives for full control over your page animation. Set a page default on the `<html>` element, and override on any individual elements as desired.

The example below produces a slide animation for the body content while disabling the browser’s default fade animation for the rest of the page:

```

---

import CommonHead from "../components/CommonHead.astro";

---

<html transition:name="root" transition:animate="none">

  <head>

    <CommonHead />

  </head>

  <body>

    <header>

      ...

    </header>

    <!-- Override your page default on a single element -->

    <main transition:animate="slide">

      ...

    </main>

  </body>

</html>
```

### Customizing Animations

[Section titled Customizing Animations](https://docs.astro.build/en/guides/view-transitions/#customizing-animations)

You can customize all aspects of a transition with any CSS animation properties.

To customize a built-in animation, first import the animation from `astro:transitions`, and then pass in customization options.

The example below customizes the duration of the built-in `fade` animation:

```

---

import { fade } from "astro:transitions";

---

<header transition:animate={fade({ duration: "0.4s" })}>
```

You can also define your own animations for use with `transition:animate` by defining both the forwards and backwards behavior, as well as new and old pages, according to the following types:

```

export interface TransitionAnimation {

  name: string; // The name of the keyframe

  delay?: number | string;

  duration?: number | string;

  easing?: string;

  fillMode?: string;

  direction?: string;

}

export interface TransitionAnimationPair {

  old: TransitionAnimation | TransitionAnimation[];

  new: TransitionAnimation | TransitionAnimation[];

}

export interface TransitionDirectionalAnimations {

  forwards: TransitionAnimationPair;

  backwards: TransitionAnimationPair;

}
```

The following example shows all the necessary properties to define a custom `bump` animation inside a `<style is:global>` tag in your root layout file:

```

---

import { ClientRouter } from "astro:transitions";

---

<html lang="en">

  <head>

    <ClientRouter />

  </head>

  <body>

    <slot />

  </body>

</html>

<style is:global>

  @keyframes bump {

    0% {

      opacity: 0;

      transform: scale(1) translateX(200px);

    }

    50% {

      opacity: 0.5;

      transform: scale(1.1);

    }

    100% {

      opacity: 1;

      transform: scale(1) translateX(0);

    }

  }

</style>
```

The animation’s behavior must be defined in the frontmatter of every component using the animation:

```

---

const anim = {

  old: {

    name: "bump",

    duration: "0.5s",

    easing: "ease-in",

    direction: "reverse",

  },

  new: {

    name: "bump",

    duration: "0.5s",

    easing: "ease-in-out",

  },

};

const customTransition = {

  forwards: anim,

  backwards: anim,

};

---

<header transition:animate={customTransition}> ... </header>
```

You have great flexibility when defining custom animations. To achieve your desired result, you may wish to consider unusual combinations such as using different objects for forward and backward, or providing separate keyframe animations for old and new.

## Router control

[Section titled Router control](https://docs.astro.build/en/guides/view-transitions/#router-control)

The `<ClientRouter />` router handles navigation by listening to:

- Clicks on `<a>` elements.
- Backwards and forwards navigation events.

The following options allow you to further control when navigation occurs within the router:

- `data-astro-reload`: an `<a>` tag attribute to [force a full-page navigation](https://docs.astro.build/en/guides/view-transitions/#preventing-client-side-navigation)
- `data-astro-history="auto | push | replace"`: an `<a>` tag attribute to [control the browser’s history](https://docs.astro.build/en/guides/view-transitions/#replace-entries-in-the-browser-history)
- `navigate(href, options)`: a method available to any client script or client component to [trigger navigation](https://docs.astro.build/en/guides/view-transitions/#trigger-navigation)

### Preventing client-side navigation

[Section titled Preventing client-side navigation](https://docs.astro.build/en/guides/view-transitions/#preventing-client-side-navigation)

There are some cases where you cannot navigate via client-side routing since both pages involved must use the `<ClientRouter />` router to prevent a full-page reload. You may also not want client-side routing on every navigation change and would prefer a traditional page navigation on select routes instead.

You can opt out of client-side routing on a per-link basis by adding the `data-astro-reload` attribute to any `<a>` or `<form>` tag. This attribute will override any existing `<ClientRouter />` component and instead trigger a browser refresh during navigation.

The following example shows preventing client-side routing when navigating to an article from the home page only. This still allows you to have animation on shared elements, such as a hero image, when navigating to the same page from an article listing page:

```

<a href="/articles/emperor-penguins" data-astro-reload>
```

```

<a href="/articles/emperor-penguins">
```

Links with the `data-astro-reload` attribute will be ignored by the router and a full-page navigation will occur.

### Trigger navigation

[Section titled Trigger navigation](https://docs.astro.build/en/guides/view-transitions/#trigger-navigation)

You can also trigger client-side navigation via events not normally listened to by the `<ClientRouter />` router using `navigate`. This function from the `astro:transitions/client` module can be used in scripts, and in framework components that are hydrated with a [client directive](https://docs.astro.build/en/reference/directives-reference/#client-directives).

The following example shows an Astro component that navigates a visitor to another page they select from a menu:

```

<script>

  import { navigate } from "astro:transitions/client";

  // Navigate to the selected option automatically.

  document.querySelector("select").onchange = (event) => {

    let href = event.target.value;

    navigate(href);

  };

</script>

<select>

  <option value="/play">Play</option>

  <option value="/blog">Blog</option>

  <option value="/about">About</option>

  <option value="/contact">Contact</option>

</select>
```

```

---

import Form from "../components/Form.astro";

import { ClientRouter } from "astro:transitions";

---

<html>

  <head>

    <ClientRouter />

  </head>

  <body>

    <Form />

  </body>

</html>
```

The following example implements the same using `navigate()` in a React `<Form />` component:

```

import { navigate } from "astro:transitions/client";

export default function Form() {

  return (

    <select onChange={(e) => navigate(e.target.value)}>

      <option value="/play">Play</option>

      <option value="/blog">Blog</option>

      <option value="/about">About</option>

      <option value="/contact">Contact</option>

    </select>

  );

}
```

The `<Form />` component can then be rendered on an Astro page that uses the `<ClientRouter />` router, with a client directive:

```

---

import Form from "../components/Form.jsx";

import { ClientRouter } from "astro:transitions";

---

<html>

  <head>

    <ClientRouter />

  </head>

  <body>

    <Form client:load />

  </body>

</html>
```

The `navigate` method takes these arguments:

- `href` (required) - The new page to navigate to.
- `options` \- An optional object with the following properties:

  - `history`: `"push"` \| `"replace"` \| `"auto"`
    - `"push"`: the router will use `history.pushState` to create a new entry in the browser history.
    - `"replace"`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.
    - `"auto"` (default): the router will attempt `history.pushState`, but if the URL is not one that can be transitioned to, the current URL will remain with no changes to the browser history.
  - `formData`: A [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object for `POST` requests.

For backward and forward navigation through the browser history, you can combine `navigate()` with the built-in `history.back()`, `history.forward()` and `history.go()` functions of the browser. If `navigate()` is called during the server-side render of your component, it has no effect.

### Replace entries in the browser history

[Section titled Replace entries in the browser history](https://docs.astro.build/en/guides/view-transitions/#replace-entries-in-the-browser-history)

Normally, each time you navigate, a new entry is written to the browser’s history. This allows navigation between pages using the browser’s `back` and `forward` buttons.

The `<ClientRouter />` router allows you to overwrite history entries by adding the `data-astro-history` attribute to any individual `<a>` tag.

The `data-astro-history` attribute can be set to the same three values as the [`history` option of the `navigate()` function](https://docs.astro.build/en/guides/view-transitions/#trigger-navigation):

`data-astro-history`: `"push"` \| `"replace"` \| `"auto"`

- `"push"`: the router will use `history.pushState` to create a new entry in the browser history.
- `"replace"`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.
- `"auto"` (default): the router will attempt `history.pushState`, but if the URL is not one that can be transitioned to, the current URL will remain with no changes to the browser history.

The following example navigates to the `/main` page but does not add a new entry to the browsing history. Instead, it reuses the current entry in the history ( `/confirmation`) and overwrites it.

```

<a href="/main" data-astro-history="replace">
```

This has the effect that if you go back from the `/main` page, the browser will not display the `/confirmation` page, but the page before it.

### Transitions with forms

[Section titled Transitions with forms](https://docs.astro.build/en/guides/view-transitions/#transitions-with-forms)

**Added in:** `astro@4.0.0`

The `<ClientRouter />` router will trigger in-page transitions from `<form>` elements, supporting both `GET` and `POST` requests.

By default, Astro submits your form data as `multipart/form-data` when your `method` is set to `POST`. If you want to match the default behavior of web browsers, use the `enctype` attribute to submit your data encoded as `application/x-www-form-urlencoded`:

```

<form

  action="/contact"

  method="POST"

  enctype="application/x-www-form-urlencoded"

>
```

You can opt out of router transitions on any individual form using the `data-astro-reload` attribute:

```

<form action="/contact" data-astro-reload>
```

## Fallback control

[Section titled Fallback control](https://docs.astro.build/en/guides/view-transitions/#fallback-control)

The `<ClientRouter />` router works best in browsers that support View Transitions (i.e. Chromium browsers), but also includes default fallback support for other browsers. Even if the browser does not support the View Transitions API, Astro’s client router can still provide in-browser navigation using one of the fallback options.

Depending on browser support, you may need to explicitly set the `name` or `animate` [transition directives](https://docs.astro.build/en/guides/view-transitions/#transition-directives) on the elements you wish to animate for a comparable experience across all browsers:

```

---

import Layout from "../layouts/LayoutUsingClientRouter.astro";

---

<title transition:animate="fade">About my site</title>
```

You can override Astro’s default fallback support by adding a `fallback` property on the `<ClientRouter />` component and setting it to `swap` or `none`:

- `animate` (default, recommended): Astro will simulate view transitions using custom attributes before updating page content.
- `swap`: Astro will not attempt to animate the page. Instead, the old page will be immediately replaced by the new one.
- `none`: Astro will not do any animated page transitions at all. Instead, you will get full page navigation in non-supporting browsers.

```

---

import { ClientRouter } from "astro:transitions";

---

<title>My site</title>

<ClientRouter fallback="swap" />
```

## Client-side navigation process

[Section titled Client-side navigation process](https://docs.astro.build/en/guides/view-transitions/#client-side-navigation-process)

When using the `<ClientRouter />` router, the following steps occur to produce Astro’s client-side navigation:

1. A visitor to your site triggers navigation by any of the following actions:
   - Clicking an `<a>` tag linking internally to another page on your site.
   - Clicking the back button.
   - Clicking the forward button.
2. The router starts fetching the next page.

3. The router adds the `data-astro-transition` attribute to the HTML element with a value of `"forward"` or `"back"` as appropriate.

4. The router calls `document.startViewTransition`. This triggers the browser’s own [view transition process](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using#the_view_transition_process). Importantly, the browser screenshots the current state of the page.

5. Inside the `startViewTransition` callback, the router performs a **swap**, which consists of the following sequence of events:
   - The contents of the `<head>` are swapped out, with some elements kept:
     - Stylesheet DOM nodes are left in if they exist on the new page, to prevent FOUC.
     - Scripts are left in if they exist on the new page.
     - Any other head elements with `transition:persist` are left in if there is a corresponding element in the new page.
   - The `<body>` is completely replaced with the new page’s body.

   - Elements marked `transition:persist` are moved over to the new DOM if they exist on the new page.

   - Scroll position is restored if necessary.

   - The `astro:after-swap` event is triggered on the `document`. This is the end of the **swap** process.
6. The router waits for any new stylesheets to load before resolving the transition.

7. The router executes any new scripts added to the page.

8. The `astro:page-load` event fires. This is the end of the navigation process.


## Script behavior with view transitions

[Section titled Script behavior with view transitions](https://docs.astro.build/en/guides/view-transitions/#script-behavior-with-view-transitions)

When you add view transitions to an existing Astro project, some of your scripts may no longer re-run after page navigation like they did with full-page browser refreshes. Use the following information to ensure that your scripts execute as expected.

### Script order

[Section titled Script order](https://docs.astro.build/en/guides/view-transitions/#script-order)

When navigating between pages with the `<ClientRouter />` component, scripts are run in sequential order to match browser behavior.

### Script re-execution

[Section titled Script re-execution](https://docs.astro.build/en/guides/view-transitions/#script-re-execution)

[Bundled module scripts](https://docs.astro.build/en/guides/client-side-scripts/#script-processing), which are the default scripts in Astro, are only ever executed once. After initial execution they will be ignored, even if the script exists on the new page after a transition.

Unlike bundled module scripts, [inline scripts](https://docs.astro.build/en/guides/client-side-scripts/#opting-out-of-processing) have the potential to be re-executed during a user’s visit to a site if they exist on a page that is visited multiple times. Inline scripts might also re-execute when a visitor navigates to a page without the script, and then back to one with the script.

With view transitions, some scripts may no longer re-run after page navigation like they do with full-page browser refreshes. There are several [events during client-side routing that you can listen for](https://docs.astro.build/en/guides/view-transitions/#lifecycle-events), and fire events when they occur. You can wrap an existing script in an event listener to ensure it runs at the proper time in the navigation cycle.

The following example wraps a script for a mobile “hamburger” menu in an event listener for `astro:page-load` which runs at the end of page navigation to make the menu responsive to being clicked after navigating to a new page:

```

document.addEventListener("astro:page-load", () => {

  document.querySelector(".hamburger").addEventListener("click", () => {

    document.querySelector(".nav-links").classList.toggle("expanded");

  });

});
```

The following example shows a function that runs in response to the `astro:after-swap` event, which happens immediately after the new page has replaced the old page and before the DOM elements are painted to the screen. This avoids a flash of light mode theme after page navigation by checking and, if necessary, setting the dark mode theme before the new page is rendered:

```

<script is:inline>

  function applyTheme() {

    localStorage.theme === "dark"

      ? document.documentElement.classList.add("dark")

      : document.documentElement.classList.remove("dark");

  }

  document.addEventListener("astro:after-swap", applyTheme);

  applyTheme();

</script>
```

#### `data-astro-rerun`

[Section titled data-astro-rerun](https://docs.astro.build/en/guides/view-transitions/#data-astro-rerun)

**Added in:** `astro@4.5.0`

To force inline scripts to re-execute after every transition, add the `data-astro-rerun` property. Adding any attribute to a script also implicitly adds `is:inline`, so this is only available for scripts that are not bundled and processed by Astro.

```

<script is:inline data-astro-rerun>...</script>
```

To ensure that a script runs every time a page is loaded during client-side navigation, it should be executed by a [lifecycle event](https://docs.astro.build/en/guides/view-transitions/#lifecycle-events). For example, event listeners for `DOMContentLoaded` can be replaced by the [`astro:page-load`](https://docs.astro.build/en/guides/view-transitions/#astropage-load) lifecycle event.

If you have code that sets up a global state in an inline script, this state will need to take into account that the script might execute more than once. Check for the global state in your `<script>` tag, and conditionally execute your code where possible. This works because `window` is preserved.

```

<script is:inline>

  if (!window.SomeGlobal) {

    window.SomeGlobal = {};

  }

</script>
```

## Lifecycle events

[Section titled Lifecycle events](https://docs.astro.build/en/guides/view-transitions/#lifecycle-events)

The `<ClientRouter />` router fires a number of events on the `document` during navigation. These events provide hooks into the lifecycle of navigation, allowing you to do things like show indicators that a new page is loading, override default behavior, and restore state as navigation is completing.

The navigation process involves a **preparation** phase, when new content is loaded; a **DOM swap** phase, where the old page’s content is replaced by the new page’s content; and a **completion** phase where scripts are executed, loading is reported as completed and clean-up work is carried out.

Astro’s View Transition API lifecycle events in order are:

- [`astro:before-preparation`](https://docs.astro.build/en/guides/view-transitions/#astrobefore-preparation)
- [`astro:after-preparation`](https://docs.astro.build/en/guides/view-transitions/#astroafter-preparation)
- [`astro:before-swap`](https://docs.astro.build/en/guides/view-transitions/#astrobefore-swap)
- [`astro:after-swap`](https://docs.astro.build/en/guides/view-transitions/#astroafter-swap)
- [`astro:page-load`](https://docs.astro.build/en/guides/view-transitions/#astropage-load)

While some actions can be triggered during any event, some tasks can only be performed during a specific event for best results, such as displaying a loading spinner before preparation or overriding animation pairs before swapping content.

### `astro:before-preparation`

[Section titled astro:before-preparation](https://docs.astro.build/en/guides/view-transitions/#astrobefore-preparation)

**Added in:** `astro@3.6.0`

An event that fires at the beginning of the preparation phase, after navigation has started (e.g. after the user has clicked a link), but before content is loaded.

This event is used:

- To do something before loading has started, such as showing a loading spinner.
- To alter loading, such as loading content you’ve defined in a template rather than from the external URL.
- To change the `direction` of the navigation (which is usually either `forward` or `backward`) for custom animation.

Here is an example of using the `astro:before-preparation` event to load a spinner before the content is loaded and stop it immediately after loading. Note that using the `loader` callback in this way allows asynchronous execution of code.

```

<script is:inline>

  document.addEventListener("astro:before-preparation", (event) => {

    const originalLoader = event.loader;

    event.loader = async function () {

      const { startSpinner } = await import("./spinner.js");

      const stop = startSpinner();

      await originalLoader();

      stop();

    };

  });

</script>
```

### `astro:after-preparation`

[Section titled astro:after-preparation](https://docs.astro.build/en/guides/view-transitions/#astroafter-preparation)

**Added in:** `astro@3.6.0`

An event that fires at the end of the preparation phase, after the new page’s content has been loaded and parsed into a document. This event occurs before the view transitions phase.

This example uses the `astro:before-preparation` event to start a loading indicator and the `astro:after-preparation` event to stop it:

```

<script is:inline>

  document.addEventListener("astro:before-preparation", () => {

    document.querySelector("#loading").classList.add("show");

  });

  document.addEventListener("astro:after-preparation", () => {

    document.querySelector("#loading").classList.remove("show");

  });

</script>
```

This is a simpler version of loading a spinner than the example shown above: if all of the listener’s code can be executed synchronously, there is no need to hook into the `loader` callback.

### `astro:before-swap`

[Section titled astro:before-swap](https://docs.astro.build/en/guides/view-transitions/#astrobefore-swap)

**Added in:** `astro@3.6.0`

An event that fires before the new document (which is populated during the preparation phase) replaces the current document. This event occurs inside of the view transition, where the user is still seeing a snapshot of the old page.

This event can be used to make changes before the swap occurs. The `newDocument` property on the event represents the incoming document. Here is an example of ensuring the browser’s light or dark mode preference in `localStorage` is carried over to the new page:

```

<script is:inline>

  function setDarkMode(document) {

    let theme = localStorage.darkMode ? "dark" : "light";

    document.documentElement.dataset.theme = theme;

  }

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (event) => {

    // Pass the incoming document to set the theme on it

    setDarkMode(event.newDocument);

  });

</script>
```

The `astro:before-swap` event can also be used to change the _implementation_ of the swap. The default swap implementation diffs head content, moves **persistent** elements from the old document to the `newDocument`, and then replaces the entire `body` with the body of the new document.

At this point of the lifecycle, you could choose to define your own swap implementation, for example to diff the entire contents of the existing document (which some other routers do):

```

<script is:inline>

  document.addEventListener("astro:before-swap", (event) => {

    event.swap = () => {

      diff(document, event.newDocument);

    };

  });

</script>
```

#### Building a custom swap function

[Section titled Building a custom swap function](https://docs.astro.build/en/guides/view-transitions/#building-a-custom-swap-function)

**Added in:** `astro@4.15.0`

The `swapFunctions` object of the `astro:transitions/client` module provides five utility functions that handle specific swap-related tasks, including handling document attributes, page elements, and script execution. These functions can be used directly to define a custom swap implementation.

The following example demonstrates how to use these functions to recreate Astro’s built-in swap implementation:

```

<script>

  import { swapFunctions } from "astro:transitions/client";

  // substitutes `window.document` with `doc`

  function mySwap(doc: Document) {

    swapFunctions.deselectScripts(doc);

    swapFunctions.swapRootAttributes(doc);

    swapFunctions.swapHeadElements(doc);

    const restoreFocusFunction = swapFunctions.saveFocus();

    swapFunctions.swapBodyElement(doc.body, document.body);

    restoreFocusFunction();

  }

  event.swap = () => mySwap(event.newDocument);

<script>
```

Custom swap implementations can start with this template and add or replace individual steps with custom logic as needed.

### `astro:after-swap`

[Section titled astro:after-swap](https://docs.astro.build/en/guides/view-transitions/#astroafter-swap)

An event that fires immediately after the new page replaces the old page. You can listen to this event on the `document` and trigger actions that will occur before the new page’s DOM elements render and scripts run.

This event, when listened to on the **outgoing page**, is useful to pass along and restore any state on the DOM that needs to transfer over to the new page.

This is the latest point in the lifecycle where it is still safe to, for example, add a dark mode class name ( `<html class="dark-mode">`), though you may wish to do so in an earlier event.

The `astro:after-swap` event occurs immediately after the browser history has been updated and the scroll position has been set.
Therefore, one use of targeting this event is to override the default scroll restore for history navigation. The following example resets the horizontal and vertical scroll position to the top left corner of the page for each navigation.

```

document.addEventListener("astro:after-swap", () =>

  window.scrollTo({ left: 0, top: 0, behavior: "instant" }),

);
```

### `astro:page-load`

[Section titled astro:page-load](https://docs.astro.build/en/guides/view-transitions/#astropage-load)

An event that fires at the end of page navigation, after the new page is visible to the user and blocking styles and scripts are loaded. You can listen to this event on the `document`.

The `<ClientRouter />` component fires this event both on initial page navigation for a pre-rendered page and on any subsequent navigation, either forwards or backwards.

You can use this event to run code on every page navigation, for example to set up event listeners that would otherwise be lost during navigation.

```

<script>

  document.addEventListener("astro:page-load", () => {

    // This runs on first page load and after every navigation.

    setupStuff(); // e.g. add event listeners

  });

</script>
```

## Accessibility

[Section titled Accessibility](https://docs.astro.build/en/guides/view-transitions/#accessibility)

Enabling client-side routing and animating page transitions both come with accessibility challenges, and Astro aims to make sites opting in to View Transitions as accessible-by-default as possible.

### Route announcement

[Section titled Route announcement](https://docs.astro.build/en/guides/view-transitions/#route-announcement)

**Added in:** `astro@3.2.0`

The `<ClientRouter />` component includes a route announcer for page navigation during client-side routing. No configuration or action is needed to enable this.

Assistive technologies let visitors know that the page has changed by announcing the new page title after navigation. When using server-side routing with traditional full-page browser refreshes, this happens by default after the new page loads. In client-side routing, the `<ClientRouter />` component performs this action.

To add route announcement to client-side routing, the component adds an element to the new page with the `aria-live` attribute set to `assertive`. This tells AT (assistive technology) to announce immediately. The component also checks for the following, in priority order, to determine the announcement text:

- The `<title>`, if it exists.
- The first `<h1>` it finds.
- The `pathname` of the page.

We strongly recommend you always include a `<title>` in each page for accessibility.

### `prefers-reduced-motion`

[Section titled prefers-reduced-motion](https://docs.astro.build/en/guides/view-transitions/#prefers-reduced-motion)

Astro’s `<ClientRouter />` component includes a CSS media query that disables _all_ view transition animations, including fallback animation, whenever the [`prefer-reduced-motion`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) setting is detected. Instead, the browser will simply swap the DOM elements without an animation.

Learn

[Contribute](https://docs.astro.build/en/contribute/) [Community](https://astro.build/chat) [Sponsor](https://opencollective.com/astrodotbuild)
